---
title: "Dealing with missing data"
author: "Johanna Munoz"
format:
  html:
    toc: true
    number-sections: true
editor: visual
execute:
  cache: true
---

```{r}
#| include: FALSE
source("Chapter 04 - Missing Data Imputation/chapter_4.r")
library(kableExtra)
library(table1)
```



In this example, we consider the estimation of comparative treatment effects in the absence of treatment-effect heterogeneity.

## Setup

### Prepare R environment



```{r}
#| warning: FALSE
#| message: FALSE
library(mice)
library(dplyr)
library(ggmice)
library(MatchThem)
```



### Generating an observational dataset

We can simulate an observational dataset of $N = 3000$ patients as follows:



```{r}
data_noHTE <- generate_data(n = 3000, seed = 1234) 
```



This dataset does not (yet) contain any missing values;

The simulated dataset contains two treatment groups with differences in baseline characteristics. For example, the figure below shows that we have baseline imbalance in age.



```{r}
#| echo: FALSE
#| label: fig-dist-confounders
#| fig.cap: Distribution of confounders and outcome variable
#| fig.width: 6
#| fig.height: 6

mu <- data_noHTE %>% group_by(treatment) %>% summarize(grp.mean = mean(age))

ggplot(data_noHTE, aes(x=age, color=treatment)) +
  geom_density()+
  geom_vline(data=mu, aes(xintercept=grp.mean, color=treatment), linetype="dashed")+
  labs(x="Age (years)", y = "Density",colour="Treatment")+
  scale_color_brewer(palette="Accent") + 
  theme_minimal()+
  theme(legend.position="top")
```

```{r}
#| echo: FALSE
# Estimation of treatment effects in the complete data
result <- getest(data = data_noHTE, estimandv = "ATE", Tform = 1, CC = TRUE, analysis = "Full Data")
```



### Generating missing values

Missing values can be generated using the function `getmissdata()`, which considers the following patterns of missingness for the previous number of relapses (`prerelapse_num`):

1.  MAR: missingness depends on `age` and `sex`
2.  MART: missingness depends on `age`, `sex` and the treatment variable `treatment`
3.  MARTY: missingness depends on `age`, `sex`, `treatment` and the outcome variable `y`
4.  MNAR: missingness depends on `age`, `sex` and `prerelapse_num`



```{r}
mdata_noHTE <- getmissdata(data_noHTE, "MART")
```



After introducing missing values, we only have complete data for $N=$ `r sum(complete.cases(mdata_noHTE))` patients.



```{r}
#| echo: FALSE
dat <- formatMSdata(mdata_noHTE)

table1(~ age + female + prevDMTefficacy + premedicalcost + numSymptoms + prerelapse_num | treatment, data = dat, caption = "Baseline characteristics of the incomplete dataset.")
```



## Analysis of incomplete data

### Complete Case Analysis

Below, we describe how to estimate the ATE using propensity score matching.



```{r}
impdata <- mdata_noHTE[complete.cases(mdata_noHTE), ]

# Apply Matching
mout <- matchit(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num, 
                data = impdata,
                family = binomial,
                method = "full",
                caliper = 0.2,
                estimand = "ATE",
                replace = FALSE) 

mdata <- as.data.table(match.data(mout))
match_mod <- glm("y ~ DMF + offset(log(years))",
                 family = poisson(link = "log"),
                 data = mdata,
                 weights = weights)

# Estimate robust variance-covariance matrix
tx_var <- vcovCL(match_mod, cluster = ~ subclass, sandwich = TRUE) 
```



We can extract the treatment effect estimate as follows:



```{r}
# Treatment effect estimate (log rate ratio)
coef(match_mod)["DMF"]

# Standard error
sqrt(tx_var["DMF", "DMF"])
```

```{r echo = F}
est.beta <- coef(match_mod)["DMF"]
result <- result %>% add_row(analysis = "Complete Case Analysis",
                               method = "Matching", 
                               estimand = "ATE",
                               estimate = est.beta,
                               std.error = sqrt(tx_var["DMF", "DMF"]),
                               LCI = est.beta + qnorm(0.025)*sqrt(tx_var["DMF", "DMF"]),
                               UCI = est.beta + qnorm(0.975)*sqrt(tx_var["DMF", "DMF"]))
```



### Multiple Imputation (within method)

In this approach, we will generate $m=5$ imputed datasets and perform matching within each imputed dataset. We first need to specify how the variables `prevDMTefficacy`, `premedicalcost`, `numSymptoms`, `prerelapse_num` and `age` will be imputed:



```{r}
#| eval: FALSE

# We add a covariate for log(years)
impdata <-  mdata_noHTE %>% mutate(logyears = log(years))

# Specify the conditional imputation models
form_y <- list(prevDMTefficacy ~ age + female + logyears + premedicalcost + numSymptoms + 
                 treatment + prerelapse_num + y,
               premedicalcost ~ age + female + logyears + prevDMTefficacy + numSymptoms + 
                 treatment + prerelapse_num + y,
               numSymptoms ~ age + female + premedicalcost + logyears + prevDMTefficacy + 
                 prerelapse_num + treatment + y,
               prerelapse_num ~ age + female + premedicalcost + logyears + prevDMTefficacy + 
                 numSymptoms + treatment + y,
               age ~ prerelapse_num + female + premedicalcost + logyears + prevDMTefficacy + 
                 numSymptoms + treatment + y)
form_y <- name.formulas(form_y)

# Adopt predictive mean matching for imputing the incomplete variables
imp0 <- mice(impdata, form = form_y, maxit = 0)
method <- imp0$method
method["numSymptoms"] <- "pmm"
method["prevDMTefficacy"] <- "pmm"

# Generate 5 imputed datasets
imp <- mice(impdata, form = form_y, method = method, m = 5, maxit = 100)
```

```{r}
#| echo: FALSE
load("Chapter 04 - Missing Data Imputation/imp_within_noHTE.rda")
```



We can now estimate the ATE using propensity score analysis in each of the imputed datasets. We here adopt full matching without replacement.



```{r}
#| message: FALSE

# Matching based on PS model
mout <- matchthem(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num,
                  datasets = imp,
                  approach = "within",
                  method = "full",
                  caliper = 0.2,
                  family = binomial,
                  estimand = "ATE",
                  distance = "glm",
                  link = "logit",
                  replace = FALSE) 
```



The results are then combined using Rubin's rules. We adopt robust standard errors to account for clustering of matched individuals.



```{r}
#| message: FALSE

match_mod <- summary(pool(with(mout, svyglm(y ~ DMF + offset(log(years)), 
                                            family = poisson(link = "log")),
                               cluster = TRUE)), conf.int = TRUE)
```



We can extract the treatment effect estimate and corresponding standard error as follows:



```{r}
# Treatment effect estimate (log rate ratio)
(match_mod %>% filter(term == "DMF"))$estimate

# Standard error
(match_mod %>% filter(term == "DMF"))$std.error
```

```{r}
#| echo: FALSE
#| 
# Save the results
est.beta <- (match_mod %>% filter(term == "DMF"))$estimate
se.beta <- (match_mod %>% filter(term == "DMF"))$std.error
est.beta.lci <- (match_mod %>% filter(term == "DMF"))$"2.5 %"
est.beta.uci <- (match_mod %>% filter(term == "DMF"))$"97.5 %"
result <- result %>% add_row(analysis = "MICE (within method)",
                               method = "Matching", 
                               estimand = "ATE",
                               estimate = est.beta,
                               std.error = se.beta,
                               LCI = est.beta.lci,
                               UCI = est.beta.uci)
```



### Multiple Imputation (across method)



```{r}
#| message: FALSE
#| warning: FALSE
# Matching based on PS model
mout <- matchthem(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num,
                  datasets = imp,
                  approach = "across",
                  method = "full",
                  caliper = 0.2,
                  family = binomial,
                  estimand = "ATE",
                  distance = "glm",
                  link = "logit",
                  replace = FALSE) 
```



The results are then combined using Rubin's rules. We adopt robust standard errors to account for clustering of matched individuals.



```{r}
#| message: FALSE
match_mod <- summary(pool(with(mout, svyglm(y ~ DMF + offset(log(years)), 
                                            family = poisson(link = "log")),
                               cluster = TRUE)), conf.int = TRUE)
```



We can extract the treatment effect estimate and corresponding standard error as follows:



```{r}
# Treatment effect estimate (log rate ratio)
(match_mod %>% filter(term == "DMF"))$estimate

# Standard error
(match_mod %>% filter(term == "DMF"))$std.error
```

```{r}
#| echo: FALSE
# Save the results
est.beta <- (match_mod %>% filter(term == "DMF"))$estimate
se.beta <- (match_mod %>% filter(term == "DMF"))$std.error
est.beta.lci <- (match_mod %>% filter(term == "DMF"))$"2.5 %"
est.beta.uci <- (match_mod %>% filter(term == "DMF"))$"97.5 %"
result <- result %>% add_row(analysis = "MICE (across method)",
                               method = "Matching", 
                               estimand = "ATE",
                               estimate = est.beta,
                               std.error = se.beta,
                               LCI = est.beta.lci,
                               UCI = est.beta.uci)
```



## Convergence checking

We can inspect convergence for the imputed variable `prerelapse_num` using a trace plot:



```{r}
plot_trace(imp, vrb = "prerelapse_num")
```



## Results

Analysis methods:

-   **Full Data**: The treatment effect is estimated in the original data of $N=3000$ patients where no missing values are present. This estimate can be used as a benchmark to compare the missing data methods.
-   **Complete Case Analysis**: The treatment effect is estimated using all data from $N=$ `r sum(complete.cases(mdata_noHTE))` patients that do not have any missing values.
-   **Missing Indicator**: The treatment effect is estimated in the incomplete dataset of $N=3000$ patients. The propensity score model includes a missing indicator variable for each incomplete covariate.
-   **MICE (within method)**: A treatment effect is estimated within each imputed dataset using propensity score analysis. Using Rubin's rule, the five treatment effects are combined into a single treatment effect.
-   **MICE (ITE method)**: The missing covariates and potential outcomes are imputed simultaneously. Treatment effect estimates are derived by taking the average of the individualized treatment effect estimates Y\|DMF - Y\|TERI.



```{r}
#| echo: FALSE
#| message: FALSE
# Missing indicator
fit_MInd <- getest(data = mdata_noHTE, 
                   estimandv = "ATE", # Estimate the ATE or ATT  
                   Tform = 2, # PS model formula
                   CC = FALSE, # use the complete case dataset,
                   analysis = "Missing Indicator")

# Multiple imputation; using ITE
fit_MICEite <- getmiceITEest(data = mdata_noHTE, 
                             estimandv = "ATE", 
                             hte = FALSE, 
                             analysis = "Multiple Imputation (ITE)") 


alldata <- rbind(result, fit_MInd, fit_MICEite) %>% 
  filter(method %in% c("Matching", ""))

alldata$analysis = factor(alldata$analysis,
                           labels = c("Full Data", "Complete Case Analysis", 
                                      "Missing Indicator", "MICE (within method)",
                                      "MICE (across method)",
                                      "Multiple Imputation (ITE)"),
                           levels = c("Full Data", "Complete Case Analysis", 
                                      "Missing Indicator", "MICE (within method)",
                                      "MICE (across method)",
                                      "Multiple Imputation (ITE)"))

ggplot(alldata,aes(x= analysis, y= estimate, col = analysis)) +
  geom_point(shape = 1,
             size  = 1) +
  geom_errorbar(aes(ymin  = LCI,
                    ymax  = UCI),
                width = 0.2,
                linewidth  = 0.5) +
  see::scale_color_flat()+theme_light()    + 
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        legend.position="bottom")    
```

