[
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "Comparative Effectiveness and Personalized Medicine Research Using Real-World Data",
    "section": "About this book",
    "text": "About this book\nThis book provides practical guidance for estimating the effectiveness of treatments in real-world populations. It explains how real-world data can directly be used or combined with other data sources to derive overall and individualized estimates of treatment effect. The book explains statistical methods for implementing bias adjustments, conducting evidence synthesis and individualizing treatment effect, whilst also providing illustrative examples and supporting software. The chapters and contents of the book are written by leading experts, with a track record in the generation and/or evaluation of real-world evidence.\nThis book is intended as a pivotal textbook for statisticians, epidemiologists, methodologists, regulators and/or regulatory scientists considering, undertaking or appraising the real-world evidence of treatment effectiveness. It covers key concepts and stages to derive and evaluate treatment effect estimates for entire populations and specific individuals. The book offers a conceptual framework towards estimating treatment effects at both the population and individualized level, where modelling methods may include traditional regression-based and machine learning methods."
  },
  {
    "objectID": "index.html#motivation",
    "href": "index.html#motivation",
    "title": "Comparative Effectiveness and Personalized Medicine Research Using Real-World Data",
    "section": "Motivation",
    "text": "Motivation\nAlthough randomized clinical trials traditionally form the cornerstone of comparative effectiveness research, there is a growing demand to consider evidence from “real-world data” (RWD) in clinical decision-making. These data are often available from observational cohort studies, administrative databases, and patient registries, and may offer additional insights into the comparative effectiveness and safety of treatments. Yet, the analysis of RWD and the evaluation of real-world evidence face many operational and methodological challenges.\nIn this book, we aim to address three current needs. First, this book will offer the guidance that is currently lacking on assessing the quality of RWD and on implementing appropriate statistical methods to reduce bias of single study estimates of treatment effects. Second, this book will provide researchers with advanced approaches to pooling estimates from multiple non-randomized studies for which traditional evidence synthesis methods are not suitable. Finally, to answer the growing need to translate average estimates of treatment effects to individualized clinical decision-making, this book will present recent methods for more tailored approaches where patient characteristics are used to derive their individualized prognosis and treatment benefit.\nThis book aims to explain key principles and state-of-the-art methods for deriving treatment effects in entire populations and specific individuals using RWD. It will not only discuss statistical theory by key experts in the field; it will also provide illustrative examples and practical guidance for implementation in R. In short, the book aims to prepare a new generation of researchers who wish to generate and integrate evidence from both randomized and non-randomized data sources to investigate the real-world effectiveness of treatments in populations and individual patients."
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "Comparative Effectiveness and Personalized Medicine Research Using Real-World Data",
    "section": "Contents",
    "text": "Contents\nThe book is divided into six sections:\n\nIntroduction. This section introduces the relevance of real-world data for conducting comparative effectiveness research, and discusses various concerns regarding their use.\nPrinciples of treatment effect estimation using real-world data. In this section, we discuss key principles of treatment effect estimation in non-randomized data sources. We explain methods to adjust for confounding (including propensity score analysis and disease risk score analysis) and missing data when estimating the treatment effect for a specific (sub)population.\nPrinciples of evidence synthesis. In this section, we discuss statistical methods for estimating the treatment effect using (individual participant and/or aggregate) data from multiple studies. To this purpose, key principles of meta-analysis are introduced and explained, including the standard fixed effect and random effects meta-analysis models, methods for individual patient data (IPD) meta-analysis, methods for network meta-analysis, and methods for data-driven and tailored bias adjustment.\nAdvanced modelling issues for dealing with additional bias in both randomized and non-randomized data sources. In this section, we discuss advanced statistical and machine learning methods for dealing with time-varying confounding, informative visit schedules, and measurement error.\nIndividualizing treatment effects for personalized medicine. In this section, we discuss statistical methods to estimate and evaluate individualized treatment effects.\nClosing"
  },
  {
    "objectID": "chapter_03.html#example-code",
    "href": "chapter_03.html#example-code",
    "title": "2  Validity control and quality assessment of real-world data and real-world evidence",
    "section": "2.1 Example code",
    "text": "2.1 Example code\nA risk of bias assessment was conducted in the COVID-NMA review. We can create a summary table of risk of bias assessment and produce a traffic light plot as follows:\n\nRisk_of_Bias <- read_excel(\"resources/RoB-covid.xlsx\")\n\n#creation of traffic light plot\ntrafficlight_rob <- rob_traffic_light(data = Risk_of_Bias, tool = \"ROB2\")\ntrafficlight_rob"
  },
  {
    "objectID": "chapter_03.html#version-info",
    "href": "chapter_03.html#version-info",
    "title": "2  Validity control and quality assessment of real-world data and real-world evidence",
    "section": "Version info",
    "text": "Version info\nThis chapter was rendered using the following version of R and its packages:\n\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] robvis_0.3.0 readxl_1.4.2\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.3      jsonlite_1.8.4    dplyr_1.1.2       compiler_4.3.0   \n [5] tidyselect_1.2.0  tidyr_1.3.0       scales_1.2.1      yaml_2.3.7       \n [9] fastmap_1.1.1     ggplot2_3.4.2     R6_2.5.1          generics_0.1.3   \n[13] knitr_1.42        htmlwidgets_1.6.2 tibble_3.2.1      munsell_0.5.0    \n[17] pillar_1.9.0      rlang_1.1.1       utf8_1.2.3        xfun_0.39        \n[21] cli_3.6.1         withr_2.5.0       magrittr_2.0.3    digest_0.6.31    \n[25] grid_4.3.0        rstudioapi_0.14   lifecycle_1.0.3   vctrs_0.6.2      \n[29] evaluate_0.21     glue_1.6.2        farver_2.1.1      cellranger_1.1.0 \n[33] codetools_0.2-19  fansi_1.0.4       colorspace_2.1-0  rmarkdown_2.21   \n[37] purrr_1.0.1       tools_4.3.0       pkgconfig_2.0.3   htmltools_0.5.5"
  },
  {
    "objectID": "chapter_06.html#introduction",
    "href": "chapter_06.html#introduction",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "3.1 Introduction",
    "text": "3.1 Introduction\nThe purpose of this document is to provide example R code that demonstrates how to estimate the propensity score and implement matching, stratification, weighting, and regression adjustment for the continuous propensity score. In this example using simulated data, we have two disease modifying therapies (DMT1 and DMT0) and the outcome is the number of post-treatment multiple sclerosis relapses during follow-up. We will estimate the average treatment effect in the treated (ATT) using propensity score matching, stratification, and weighting. We will estimate the average treatment effect in the population (ATE) using regression adjustment for the continuous propensity score. The treatment effects can be interpreted as annualized relapse rate ratios (ARR).\nWe consider an example dataset with the following characteristics:\n\nhead(dat)\n\n   age female prevDMTefficacy premedicalcost numSymptoms prerelapse_num\n1:  50      1            None        3899.61           1              1\n2:  51      0            None        9580.51           1              0\n3:  56      0            None        4785.89           1              0\n4:  44      1            None        8696.80           1              1\n5:  63      0            None        2588.03           1              0\n6:  28      1            None        5435.57           1              0\n   treatment y      years      Iscore\n1:      DMT1 0 1.78507871 Moderate A1\n2:      DMT1 0 0.01368925     High A1\n3:      DMT1 2 3.25530459     High A1\n4:      DMT1 2 5.73853525     Neutral\n5:      DMT1 0 1.31143053     High A1\n6:      DMT1 0 0.59137577 Moderate A0"
  },
  {
    "objectID": "chapter_06.html#comparing-baseline-characteristics",
    "href": "chapter_06.html#comparing-baseline-characteristics",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "3.2 Comparing baseline characteristics",
    "text": "3.2 Comparing baseline characteristics\n\nDMT1 is the treatment group and DMT0 is the control group\nprevDMTefficacy is previous DMT efficacy (none, low efficacy, and medium/high efficacy)\nprerelapse_num is the number of previous MS relapses\n\n\n\n\n\n\n\nDMT0\nDMT1\n\n\n\n\nn\n2300\n7700\n\n\nage (mean (SD))\n51.39 (8.32)\n44.25 (9.79)\n\n\nfemale = 1 (%)\n1671 (72.65)\n5915 (76.82)\n\n\nprevDMTefficacy (%)\n\n\n\n\nNone\n1247 (54.22)\n3171 (41.18)\n\n\nLow_efficacy\n261 (11.35)\n858 (11.14)\n\n\nMedium_high_efficacy\n792 (34.43)\n3671 (47.68)\n\n\nprerelapse_num (mean (SD))\n0.39 (0.62)\n0.46 (0.68)"
  },
  {
    "objectID": "chapter_06.html#estimating-the-propensity-score",
    "href": "chapter_06.html#estimating-the-propensity-score",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "3.3 Estimating the propensity score",
    "text": "3.3 Estimating the propensity score\n\n3.3.1 Logistic regression\nWe sought to restore balance in the distribution of baseline covariates in patients treated with DMT1 (index treatment) and DMT0 (control tratment). We fit a multivariable logistic regression model in which treatment was regressed on baseline characteristics including age, sex, previous DMT efficacy, and previous number of relapses.\n\n# Fit logistic regression model\nps.model <- glm(treatment ~ age + female + prevDMTefficacy + prerelapse_num, \n                data = dat, family = binomial())\n\n# Summary of logistic regression model\nsummary(ps.model)\n\n\nCall:\nglm(formula = treatment ~ age + female + prevDMTefficacy + prerelapse_num, \n    family = binomial(), data = dat)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.7949   0.2585   0.5220   0.7478   1.5033  \n\nCoefficients:\n                                     Estimate Std. Error z value Pr(>|z|)    \n(Intercept)                          4.809473   0.157127  30.609  < 2e-16 ***\nage                                 -0.086708   0.002996 -28.939  < 2e-16 ***\nfemale1                              0.253611   0.057664   4.398 1.09e-05 ***\nprevDMTefficacyLow_efficacy          0.310394   0.083022   3.739 0.000185 ***\nprevDMTefficacyMedium_high_efficacy  0.660266   0.054393  12.139  < 2e-16 ***\nprerelapse_num                       0.156318   0.039288   3.979 6.93e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 10786  on 9999  degrees of freedom\nResidual deviance:  9597  on 9994  degrees of freedom\nAIC: 9609\n\nNumber of Fisher Scoring iterations: 5\n\n# Extract propensity scores\ndat$ps <- predict(ps.model, data = dat, type = \"response\")\n\n\n\n3.3.2 Assessing overlap\nWe examined the degree of overlap in the distribution of propensity scores across treatment groups using histograms and side-by-side box plots.\n\n# Histogram\nggplot(dat, aes(x = ps, fill = as.factor(treatment), color = as.factor(treatment))) + \n  geom_histogram(alpha = 0.3, position='identity', bins = 15) + \n  facet_grid(as.factor(treatment) ~ .) + \n  xlab(\"Probability of Treatment\") + \n  ylab(\"Count\") +\n  ggtitle(\"Propensity Score Distribution by Treatment Group\") +\n  theme(legend.position = \"bottom\", legend.direction = \"vertical\")\n\n\n\n# Side-by-side box plots\nggplot(dat, aes(x=as.factor(treatment), y=ps, fill=as.factor(treatment))) +\n  geom_boxplot() + \n  ggtitle(\"Propensity Score Distribution by Treatment Group\") +\n  ylab(\"Probability of Treatment\") + \n  xlab(\"Treatment group\") +\n  theme(legend.position = \"none\")\n\n\n\n# Distribution of propensity scores by treatment groups\nsummary(dat$ps[dat$treatment == \"DMT1\"])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.3230  0.7214  0.8265  0.7970  0.9010  0.9854 \n\nsummary(dat$ps[dat$treatment == \"DMT0\"])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.3230  0.5730  0.6894  0.6795  0.7975  0.9799"
  },
  {
    "objectID": "chapter_06.html#propensity-score-matching",
    "href": "chapter_06.html#propensity-score-matching",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "3.4 Propensity score matching",
    "text": "3.4 Propensity score matching\n\n\n\n\n3.4.1 1:1 Optimal full matching without replacement\n\nlibrary(MatchIt)\n\n# Use MatchIt package for PS matching\nopt <- matchit(treatment ~ age + female + prevDMTefficacy + prerelapse_num, \n               data = dat, \n               method = \"full\",\n               estimand = \"ATT\")\n\nopt\n\nA matchit object\n - method: Optimal full matching\n - distance: Propensity score\n             - estimated with logistic regression\n - number of obs.: 10000 (original), 10000 (matched)\n - target estimand: ATT\n - covariates: age, female, prevDMTefficacy, prerelapse_num\n\n\n\n\n3.4.2 Assess balance after matching\n\nsummary(opt)\n\n\nCall:\nmatchit(formula = treatment ~ age + female + prevDMTefficacy + \n    prerelapse_num, data = dat, method = \"full\", estimand = \"ATT\")\n\nSummary of Balance for All Data:\n                                    Means Treated Means Control Std. Mean Diff.\ndistance                                   0.7970        0.6795          0.8943\nage                                       44.2496       51.3883         -0.7289\nfemale0                                    0.2318        0.2735         -0.0987\nfemale1                                    0.7682        0.7265          0.0987\nprevDMTefficacyNone                        0.4118        0.5422         -0.2649\nprevDMTefficacyLow_efficacy                0.1114        0.1135         -0.0065\nprevDMTefficacyMedium_high_efficacy        0.4768        0.3443          0.2651\nprerelapse_num                             0.4595        0.3930          0.0976\n                                    Var. Ratio eCDF Mean eCDF Max\ndistance                                0.7873    0.1917   0.3379\nage                                     1.3868    0.1519   0.3085\nfemale0                                      .    0.0417   0.0417\nfemale1                                      .    0.0417   0.0417\nprevDMTefficacyNone                          .    0.1304   0.1304\nprevDMTefficacyLow_efficacy                  .    0.0020   0.0020\nprevDMTefficacyMedium_high_efficacy          .    0.1324   0.1324\nprerelapse_num                          1.1990    0.0133   0.0383\n\nSummary of Balance for Matched Data:\n                                    Means Treated Means Control Std. Mean Diff.\ndistance                                   0.7970        0.7970          0.0001\nage                                       44.2496       44.1364          0.0116\nfemale0                                    0.2318        0.2517         -0.0470\nfemale1                                    0.7682        0.7483          0.0470\nprevDMTefficacyNone                        0.4118        0.4157         -0.0079\nprevDMTefficacyLow_efficacy                0.1114        0.1224         -0.0347\nprevDMTefficacyMedium_high_efficacy        0.4768        0.4619          0.0297\nprerelapse_num                             0.4595        0.4654         -0.0087\n                                    Var. Ratio eCDF Mean eCDF Max\ndistance                                0.9955    0.0012   0.0116\nage                                     1.0161    0.0076   0.0260\nfemale0                                      .    0.0199   0.0199\nfemale1                                      .    0.0199   0.0199\nprevDMTefficacyNone                          .    0.0039   0.0039\nprevDMTefficacyLow_efficacy                  .    0.0109   0.0109\nprevDMTefficacyMedium_high_efficacy          .    0.0148   0.0148\nprerelapse_num                          0.9530    0.0057   0.0110\n                                    Std. Pair Dist.\ndistance                                     0.0022\nage                                          0.1688\nfemale0                                      0.5149\nfemale1                                      0.5149\nprevDMTefficacyNone                          0.1816\nprevDMTefficacyLow_efficacy                  0.5944\nprevDMTefficacyMedium_high_efficacy          0.4731\nprerelapse_num                               0.3893\n\nSample Sizes:\n              Control Treated\nAll           2300.      7700\nMatched (ESS)  198.89    7700\nMatched       2300.      7700\nUnmatched        0.         0\nDiscarded        0.         0\n\nplot(summary(opt))\n\n\n\n# black line is treated group, grey line is control group\nplot(opt, type = \"density\", which.xs = vars) \n\n\n\n\n\n\n\n\n\n3.4.3 Estimating the ATT\nWe can estimate the ATT in the matched sample using Poisson regression in which the number of post-treatment relapses is regressed on treatment status and follow-up time for each patient (captured by the variable years). More details are provided at .\n\n# Matched data\nmatched.data <- match.data(opt)\n\n# Poisson regression model\nopt.fit <- glm(y ~ treatment + offset(log(years)), \n            family = poisson(link = \"log\"),\n            data = matched.data, \n            weights = weights)\n\n# Treatment effect estimation\nopt.comp <- comparisons(opt.fit,\n                        variables = \"treatment\",\n                        vcov = ~subclass,\n                        newdata = subset(matched.data, treatment == \"DMT1\"),\n                        wts = \"weights\",\n                        transform_pre = \"ratio\")\n\nopt.comp |> tidy()\n\n# A tibble: 1 × 9\n  type     term      contrast   estim…¹ std.e…² stati…³  p.value conf.…⁴ conf.…⁵\n  <chr>    <chr>     <chr>        <dbl>   <dbl>   <dbl>    <dbl>   <dbl>   <dbl>\n1 response treatment mean(DMT1…   0.761   0.100    7.59 3.21e-14   0.564   0.958\n# … with abbreviated variable names ¹​estimate, ²​std.error, ³​statistic,\n#   ⁴​conf.low, ⁵​conf.high\n\n\nAs indicated in the summary output above, the annualized relapse rate ratio for DMT1 vs DMT0 among patients treated with DMT0 (ATT) is given as 0.76 with a 95% confidence interval ranging from 0.56 to 0.96."
  },
  {
    "objectID": "chapter_06.html#propensity-score-stratification",
    "href": "chapter_06.html#propensity-score-stratification",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "3.5 Propensity score stratification",
    "text": "3.5 Propensity score stratification\n\n3.5.1 Divide sample into quintiles of propensity scores\nWe will form five mutually exclusive groups of the estimated propensity score.\n\n# Create five strata\ndat <- dat %>% mutate(ps.strata = cut(ps, \n                                      breaks = c(quantile(ps, probs=seq(0,1,0.2))),\n                                      labels = seq(1:5),\n                                      include.lowest = TRUE))\n\n# Number of patients in each stratum\ntable(dat$ps.strata)\n\n\n   1    2    3    4    5 \n2002 2015 1991 1997 1995 \n\n\n\n\n3.5.2 Assess balance within each propensity score stratum\nWithin each propensity score stratum, treated and control patients should have similar values of the propensity score and the distribution of baseline covariates should be approximately balanced between treatment groups.\n\n3.5.2.1 Propensity Score Stratum #1\n\ntab1.strata1 <- CreateTableOne(vars, data = dat %>% filter(ps.strata == 1), \n                               factorVars = c(\"female\", \"prevDMTefficacy\"), \n                               strata = \"treatment\", test = FALSE)\n\ntab1.strata1.print <- print(tab1.strata1, catDigits = 2, contDigits = 2, \n                            smd = TRUE)\n\n\n\n\n\n\n\nDMT0\nDMT1\nSMD\n\n\n\n\nn\n901\n1101\n\n\n\nage (mean (SD))\n58.38 (3.67)\n57.45 (3.73)\n0.251\n\n\nfemale = 1 (%)\n605 (67.15)\n775 (70.39)\n0.070\n\n\nprevDMTefficacy (%)\n\n\n0.056\n\n\nNone\n650 (72.14)\n771 (70.03)\n\n\n\nLow_efficacy\n106 (11.76)\n130 (11.81)\n\n\n\nMedium_high_efficacy\n145 (16.09)\n200 (18.17)\n\n\n\nprerelapse_num (mean (SD))\n0.29 (0.53)\n0.33 (0.56)\n0.074\n\n\n\n\n\n\n\n3.5.2.2 Propensity Score Stratum #2\n\ntab1.strata2 <- CreateTableOne(vars, data = dat %>% filter(ps.strata == 2), \n                               factorVars = c(\"female\", \"prevDMTefficacy\"), \n                               strata = \"treatment\", test = FALSE)\n\ntab1.strata2.print <- print(tab1.strata2, catDigits = 2, contDigits = 2, \n                            smd = TRUE)\n\n\n\n\n\n\n\nDMT0\nDMT1\nSMD\n\n\n\n\nn\n617\n1398\n\n\n\nage (mean (SD))\n52.18 (4.35)\n51.97 (4.22)\n0.049\n\n\nfemale = 1 (%)\n458 (74.23)\n1048 (74.96)\n0.017\n\n\nprevDMTefficacy (%)\n\n\n0.054\n\n\nNone\n292 (47.33)\n624 (44.64)\n\n\n\nLow_efficacy\n69 (11.18)\n162 (11.59)\n\n\n\nMedium_high_efficacy\n256 (41.49)\n612 (43.78)\n\n\n\nprerelapse_num (mean (SD))\n0.40 (0.64)\n0.41 (0.66)\n0.004\n\n\n\n\n\n\n\n3.5.2.3 Propensity Score Stratum #3\n\ntab1.strata3 <- CreateTableOne(vars, data = dat %>% filter(ps.strata == 3), \n                               factorVars = c(\"female\", \"prevDMTefficacy\"), \n                               strata = \"treatment\", test = FALSE)\n\ntab1.strata3.print <- print(tab1.strata3, catDigits = 2, contDigits = 2, \n                            smd = TRUE)\n\n\n\n\n\n\n\nDMT0\nDMT1\nSMD\n\n\n\n\nn\n392\n1599\n\n\n\nage (mean (SD))\n46.73 (4.06)\n46.36 (4.08)\n0.092\n\n\nfemale = 1 (%)\n305 (77.81)\n1193 (74.61)\n0.075\n\n\nprevDMTefficacy (%)\n\n\n0.041\n\n\nNone\n168 (42.86)\n687 (42.96)\n\n\n\nLow_efficacy\n52 (13.27)\n191 (11.94)\n\n\n\nMedium_high_efficacy\n172 (43.88)\n721 (45.09)\n\n\n\nprerelapse_num (mean (SD))\n0.49 (0.68)\n0.47 (0.66)\n0.031\n\n\n\n\n\n\n\n3.5.2.4 Propensity Score Stratum #4\n\ntab1.strata4 <- CreateTableOne(vars, data = dat %>% filter(ps.strata == 4), \n                               factorVars = c(\"female\", \"prevDMTefficacy\"), \n                               strata = \"treatment\", test = FALSE)\n\ntab1.strata4.print <- print(tab1.strata4, catDigits = 2, contDigits = 2, \n                            smd = TRUE)\n\n\n\n\n\n\n\nDMT0\nDMT1\nSMD\n\n\n\n\nn\n269\n1728\n\n\n\nage (mean (SD))\n41.07 (4.11)\n40.88 (4.29)\n0.046\n\n\nfemale = 1 (%)\n203 (75.46)\n1356 (78.47)\n0.071\n\n\nprevDMTefficacy (%)\n\n\n0.084\n\n\nNone\n105 (39.03)\n634 (36.69)\n\n\n\nLow_efficacy\n22 ( 8.18)\n181 (10.47)\n\n\n\nMedium_high_efficacy\n142 (52.79)\n913 (52.84)\n\n\n\nprerelapse_num (mean (SD))\n0.50 (0.69)\n0.51 (0.71)\n0.012\n\n\n\n\n\n\n\n3.5.2.5 Propensity Score Stratum #5\n\ntab1.strata5 <- CreateTableOne(vars, data = dat %>% filter(ps.strata == 5), \n                               factorVars = c(\"female\", \"prevDMTefficacy\"), \n                               strata = \"treatment\", test = FALSE)\n\ntab1.strata5.print <- print(tab1.strata5, catDigits = 2, contDigits = 2, \n                            smd = TRUE)\n\n\n\n\n\n\n\nDMT0\nDMT1\nSMD\n\n\n\n\nn\n121\n1874\n\n\n\nage (mean (SD))\n33.26 (4.95)\n32.04 (5.58)\n0.233\n\n\nfemale = 1 (%)\n100 (82.64)\n1543 (82.34)\n0.008\n\n\nprevDMTefficacy (%)\n\n\n0.050\n\n\nNone\n32 (26.45)\n455 (24.28)\n\n\n\nLow_efficacy\n12 ( 9.92)\n194 (10.35)\n\n\n\nMedium_high_efficacy\n77 (63.64)\n1225 (65.37)\n\n\n\nprerelapse_num (mean (SD))\n0.52 (0.66)\n0.52 (0.73)\n0.004\n\n\n\n\n\n\n\n\n3.5.3 Estimating and pooling of stratum-specific treatment effects\nThe overall ATT across strata can be estimated by weighting stratum-specific estimates by the proportion of treated patients in each stratum over all treated patients in the sample.\nWe first define a function att.strata.function() to calculate stratum-specific estimates of the treatment effect:\n\natt.strata.function <- function(data, stratum, confint = TRUE) {\n\n  fit <- glm(\"y ~ treatment + offset(log(years))\",\n      family = poisson(link = \"log\"),\n      data = data %>% filter(ps.strata == stratum))\n\n  arr <- round(as.numeric(exp(coef(fit)[\"treatmentDMT1\"])), digits = 3)\n  ll <- ul <- NA\n  \n  if (confint) {\n    ll <- round(exp(confint(fit))[\"treatmentDMT1\",1], digits = 3)\n    ul <- round(exp(confint(fit))[\"treatmentDMT1\",2], digits = 3)\n  }\n  \n  return(c(\"stratum\" = stratum,\n           \"arr\" = arr,\n           \"ci_lower\"  = ll,\n           \"ci_upper\"  = ul))\n}\n\narr.strata <- as.data.frame(t(sapply(1:5, att.strata.function, data = dat)))\narr.strata\n\n  stratum   arr ci_lower ci_upper\n1       1 0.904    0.760    1.076\n2       2 0.822    0.696    0.975\n3       3 0.798    0.666    0.961\n4       4 0.716    0.587    0.881\n5       5 0.589    0.463    0.761\n\n\nSubsequently, we define a function weights.strata.function() to calculate the weights for each stratum. The weight is the proportion of treated patients in each stratum over all treated patients in the sample:\n\nweights.strata.function <- function(data, stratum) {\n  n_DMT1_stratum <- nrow(data %>% filter(ps.strata == stratum & treatment == \"DMT1\"))\n  n_DMT1_all <- nrow(data %>% filter(treatment == \"DMT1\"))\n  weight <- n_DMT1_stratum/n_DMT1_all\n  return(c(\"stratum\" = stratum, \"weight\" = weight))\n}\n\nweights.strata <- as.data.frame(t(sapply(1:5, weights.strata.function, data = dat)))\nweights.strata\n\n  stratum    weight\n1       1 0.1429870\n2       2 0.1815584\n3       3 0.2076623\n4       4 0.2244156\n5       5 0.2433766\n\n\n\n# Create table with ARRs and weights for each PS stratum\narr.weights.merged <- merge(arr.strata, weights.strata, by = \"stratum\")\n\n# Calculate the weighted ARR for each stratum\narr.weights.merged <- arr.weights.merged %>%\n  mutate(weighted.arr = as.numeric(arr) * weight)\n\n# Sum the weighted ARRs across strata to get the overall ATT\nsum(arr.weights.merged$weighted.arr)\n\n[1] 0.7482462\n\n\n\n\n\nWe now define a new function ps.stratification.bootstrap() that integrates estimation of the ATT and the PS weights for bootstrapping purposes:\n\nps.stratification.bootstrap <- function(data, inds) {\n  d <- data[inds,]\n  \n  d$ps.strata <- cut(d$ps, \n                       breaks = c(quantile(dat$ps, probs = seq(0, 1, by = 0.2))),\n                       labels = seq(5),\n                       include.lowest = TRUE)\n  \n  arr.strata <- as.data.frame(t(sapply(1:5, att.strata.function, \n                                       data = d, confint = FALSE)))\n  \n  weights.strata <- as.data.frame(t(sapply(1:5, weights.strata.function, data = d)))\n  \n  return(arr.strata$arr[1] * weights.strata$weight[1] + \n           arr.strata$arr[2] * weights.strata$weight[2] +\n           arr.strata$arr[3] * weights.strata$weight[3] + \n           arr.strata$arr[4] * weights.strata$weight[4] +\n           arr.strata$arr[5] * weights.strata$weight[5])                                                  \n}\n\nWe can now estimate the treatment effect and its confidence interval using the bootstrap procedure:\n\nlibrary(boot)\n\n\nAttaching package: 'boot'\n\n\nThe following object is masked from 'package:survival':\n\n    aml\n\nset.seed(1854)\narr.stratification.boot <- boot(data = dat, \n                                statistic = ps.stratification.bootstrap, \n                                R = 1000)\n\n# Bootstrapped ARR\nmedian(arr.stratification.boot$t)\n\n[1] 0.7558609\n\n# Bootstrapped ARR 95% CI\nquantile(arr.stratification.boot$t[,1], c(0.025, 0.975))\n\n     2.5%     97.5% \n0.6835885 0.8362947"
  },
  {
    "objectID": "chapter_06.html#propensity-score-weighting",
    "href": "chapter_06.html#propensity-score-weighting",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "3.6 Propensity score weighting",
    "text": "3.6 Propensity score weighting\n\n3.6.1 Calculate propensity score weights for ATT\nPropensity score weighting reweights the study sample to generate an artificial population (i.e., pseudo-population) in which the covariates are no longer associated with treatment, thereby removing confounding by measured covariates. For the ATT, the weight for all treated patients is set to one. Conversely, the weight for patients in the control group is set to the propensity score divided by one minus the propensity score, that is, (PS/(1 − PS)). We estimated stabilized weights to address extreme weights.\n\nlibrary(WeightIt)\n\nw.out <- weightit(treatment ~ age + female + prevDMTefficacy + prerelapse_num,\n                  data = dat,\n                  method = \"ps\",\n                  estimand = \"ATT\")\n                  #stabilize = TRUE)\n\nw.out\n\nA weightit object\n - method: \"ps\" (propensity score weighting)\n - number of obs.: 10000\n - sampling weights: none\n - treatment: 2-category\n - estimand: ATT (focal: DMT1)\n - covariates: age, female, prevDMTefficacy, prerelapse_num\n\nsummary(w.out)\n\n                 Summary of weights\n\n- Weight ranges:\n\n        Min                                   Max\nDMT0 0.4772 |---------------------------| 48.6856\nDMT1 1.0000  ||                            1.0000\n\n- Units with 5 most extreme weights by group:\n                                             \n         9492    8836    6544    9610    4729\n DMT0 32.1027 32.1027 34.3126 38.1817 48.6856\n            6       4       3       2       1\n DMT1       1       1       1       1       1\n\n- Weight statistics:\n\n     Coef of Var   MAD Entropy # Zeros\nDMT0       1.098 0.673   0.383       0\nDMT1       0.000 0.000  -0.000       0\n\n- Effective Sample Sizes:\n\n              DMT0 DMT1\nUnweighted 2300.   7700\nWeighted   1043.16 7700\n\nplot(summary(w.out))\n\n\n\n\n\n\n3.6.2 Assess balance in the weighted sample\n\nbal.tab(w.out, stats = c(\"m\", \"v\"), thresholds = c(m = .05))\n\nBalance Measures\n                                         Type Diff.Adj     M.Threshold\nprop.score                           Distance  -0.0045 Balanced, <0.05\nage                                   Contin.   0.0054 Balanced, <0.05\nfemale                                 Binary   0.0005 Balanced, <0.05\nprevDMTefficacy_None                   Binary  -0.0003 Balanced, <0.05\nprevDMTefficacy_Low_efficacy           Binary   0.0023 Balanced, <0.05\nprevDMTefficacy_Medium_high_efficacy   Binary  -0.0020 Balanced, <0.05\nprerelapse_num                        Contin.  -0.0034 Balanced, <0.05\n                                     V.Ratio.Adj\nprop.score                                0.9926\nage                                       1.0102\nfemale                                         .\nprevDMTefficacy_None                           .\nprevDMTefficacy_Low_efficacy                   .\nprevDMTefficacy_Medium_high_efficacy           .\nprerelapse_num                            1.0941\n\nBalance tally for mean differences\n                    count\nBalanced, <0.05         7\nNot Balanced, >0.05     0\n\nVariable with the greatest mean difference\n Variable Diff.Adj     M.Threshold\n      age   0.0054 Balanced, <0.05\n\nEffective sample sizes\n              DMT0 DMT1\nUnadjusted 2300.   7700\nAdjusted   1043.16 7700\n\n\n\n\n3.6.3 Estimate the ATT\nOne way to estimate the ATT is to use the survey package. The function svyglm() generates model-robust (Horvitz-Thompson-type) standard errors by default, and thus does not require additional adjustments.\n\nlibrary(survey)\n\nweighted.data <- svydesign(ids = ~1, data = dat, weights = ~w.out$weights)\n\nweighted.fit <- svyglm(y ~ treatment + offset(log(years)),\n                       family = poisson(link = \"log\"),\n                       design = weighted.data)\n\nexp(coef(weighted.fit)[\"treatmentDMT1\"])\n\ntreatmentDMT1 \n    0.7083381 \n\nexp(confint(weighted.fit))[\"treatmentDMT1\",] \n\n    2.5 %    97.5 % \n0.6245507 0.8033662 \n\n\n\n\n\nAs indicated above, propensity score weighting yielded an ATT estimate of 0.71 (95% CI: 0.66; 0.76).\nAn alternative approach is to use glm() to estimate the treatment effect and calculate robust standard errors.\n\n# Alternative way to estimate treatment effect\nweighted.fit2 <- glm(y ~ treatment + offset(log(years)),\n              family = poisson(link = \"log\"),\n              data = dat,\n              weights = w.out$weights)\n\n# Extract the estimated ARR\nexp(coef(weighted.fit2))[\"treatmentDMT1\"]\n\ntreatmentDMT1 \n    0.7083381 \n\n# Calculate robust standard error and p-value of the log ARR\ncoeftest(weighted.fit2, vcov. = vcovHC)[\"treatmentDMT1\",]\n\n     Estimate    Std. Error       z value      Pr(>|z|) \n-3.448337e-01  6.442745e-02 -5.352280e+00  8.685284e-08 \n\n# Derive 95% confidence interval of the ARR\nexp(lmtest::coefci(weighted.fit2, \n       level = 0.95, # 95% confidence interval\n       vcov. = vcovHC)[\"treatmentDMT1\",])\n\n    2.5 %    97.5 % \n0.6243094 0.8036767 \n\n\n\n\n\nUsing this approach, the ATT estimate was 0.71 (95% CI: 0.62; 0.8)."
  },
  {
    "objectID": "chapter_06.html#regression-adjustment-for-the-propensity-score-for-the-ate",
    "href": "chapter_06.html#regression-adjustment-for-the-propensity-score-for-the-ate",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "3.7 Regression adjustment for the propensity score for the ATE",
    "text": "3.7 Regression adjustment for the propensity score for the ATE\nIn this approach, a regression model is fitted to describe the observed outcome as a function of the received treatment and the estimated propensity score:\n\nps.reg.fit <- glm(y ~ treatment + ps + offset(log(years)),\n                  family = poisson(link = \"log\"),\n                  data = dat)\n\nsummary(ps.reg.fit)\n\n\nCall:\nglm(formula = y ~ treatment + ps + offset(log(years)), family = poisson(link = \"log\"), \n    data = dat)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.0160  -0.7336  -0.4441  -0.1352   4.2634  \n\nCoefficients:\n              Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   -1.99585    0.10359 -19.266  < 2e-16 ***\ntreatmentDMT1 -0.25598    0.04431  -5.777 7.60e-09 ***\nps             1.07521    0.13878   7.748 9.36e-15 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 7514.7  on 9999  degrees of freedom\nResidual deviance: 7443.0  on 9997  degrees of freedom\nAIC: 12378\n\nNumber of Fisher Scoring iterations: 6\n\n# ATE\nexp(coef(ps.reg.fit))[\"treatmentDMT1\"] \n\ntreatmentDMT1 \n    0.7741606 \n\n\n\n\nWaiting for profiling to be done...\nWaiting for profiling to be done...\n\n\nBootstrapped confidence intervals can be obtained as follows:\n\n# Function to bootstrap for 95% CIs\nps.reg.bootstrap <- function(data, inds) {\n  d <- data[inds,]\n  \n  fit <- glm(y ~ treatment + ps + offset(log(years)),\n              family = poisson(link = \"log\"),\n              data = d)\n  \n  return(exp(coef(fit))[\"treatmentDMT1\"])\n}\n\nset.seed(1854)\n\n# Generate 1000 bootstrap replicates\narr.boot <- boot(dat, statistic = ps.reg.bootstrap, R = 1000) \n\n# Extract the median annualized relapse rate across 1000 bootstrap replicates\nmedian(arr.boot$t) \n\n[1] 0.7750426\n\n# Take 2.5th and 97.5th percentiles to be 95% CI\nquantile(arr.boot$t[,1], c(0.025, 0.975)) \n\n     2.5%     97.5% \n0.7010540 0.8545169"
  },
  {
    "objectID": "chapter_06.html#overview",
    "href": "chapter_06.html#overview",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "3.8 Overview",
    "text": "3.8 Overview\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\nEstimand\nEstimate\n95% CI (lower)\n95% CI (upper)\n\n\n\n\nOptimal full matching\nATT\n0.7610138\n0.5644807\n0.9575469\n\n\nPropensity score stratification\nATT\n0.7482462\nNA\nNA\n\n\nPropensity score stratification (with bootstrapping)\nATT\n0.7558609\n0.6835885\n0.8362947\n\n\nPropensity score weighting\nATT\n0.7083381\n0.6245507\n0.8033662\n\n\nPropensity score weighting (robust SE)\nATT\n0.7083381\n0.6243094\n0.8036767\n\n\nPS regression adjustment\nATE\n0.7741606\n0.7101080\n0.8448218\n\n\nPS regression adjustment (bootstrapping)\nATE\n0.7750426\n0.7010540\n0.8545169"
  },
  {
    "objectID": "chapter_06.html#version-info",
    "href": "chapter_06.html#version-info",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "Version info",
    "text": "Version info\nThis chapter was rendered using the following version of R and its packages:\n\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] WeightIt_0.14.2        boot_1.3-28.1          MatchIt_4.5.4         \n [4] sandwich_3.0-2         truncnorm_1.0-9        tableone_0.13.2       \n [7] survey_4.2-1           survival_3.5-5         Matrix_1.5-4          \n[10] MASS_7.3-58.4          marginaleffects_0.12.0 lmtest_0.9-40         \n[13] zoo_1.8-12             knitr_1.42             ggplot2_3.4.2         \n[16] data.table_1.14.8      cobalt_4.5.1           dplyr_1.1.2           \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3        generics_0.1.3    lattice_0.21-8    digest_0.6.31    \n [5] magrittr_2.0.3    evaluate_0.21     fastmap_1.1.1     jsonlite_1.8.4   \n [9] backports_1.4.1   DBI_1.1.3         fansi_1.0.4       scales_1.2.1     \n[13] cli_3.6.1         mitools_2.4       rlang_1.1.1       crayon_1.5.2     \n[17] munsell_0.5.0     splines_4.3.0     withr_2.5.0       yaml_2.3.7       \n[21] tools_4.3.0       colorspace_2.1-0  vctrs_0.6.2       R6_2.5.1         \n[25] lifecycle_1.0.3   htmlwidgets_1.6.2 pkgconfig_2.0.3   pillar_1.9.0     \n[29] gtable_0.3.3      glue_1.6.2        Rcpp_1.0.10       xfun_0.39        \n[33] tibble_3.2.1      tidyselect_1.2.0  rstudioapi_0.14   htmltools_0.5.5  \n[37] rmarkdown_2.21    compiler_4.3.0"
  },
  {
    "objectID": "chapter_06.html#references",
    "href": "chapter_06.html#references",
    "title": "3  Confounding adjustment using propensity score methods",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "chapter_07.html#simulation",
    "href": "chapter_07.html#simulation",
    "title": "4  Effect Modification Analysis within the Propensity score Framework",
    "section": "4.1 Simulation",
    "text": "4.1 Simulation\nFirst, we need to install the R package simcausal, which can be obtained from GitHub:\n\ndevtools::install_github('osofr/simcausal', build_vignettes = FALSE)\n\nWe will use the following data-generation model:\n\nrequire(simcausal)\nD <- DAG.empty()\nD <- D + \n  node(\"age\", distr = \"rnorm\", \n       mean = 2, sd = 4) + \n  node(\"gender\", distr = \"rbern\", \n       prob = plogis(4)) +\n  node(\"education\", distr = \"rbern\", \n       prob = plogis(3 + 5 * age)) +\n  node(\"diet\", distr = \"rbern\", \n       prob = plogis(1 - 3 * education)) +\n  node(\"income\", distr = \"rbern\", \n       prob = plogis(2 - 5 * education - 4 * age)) +\n  node(\"smoking\", distr = \"rbern\", \n       prob = plogis(1 + 1.2 * gender + 2 * age)) +\n  node(\"hypertension\", distr = \"rbern\", \n       prob = plogis(1 + log(3) * diet + \n                       log(1.3) * age + \n                       log(3.5) * smoking + \n                       log(0.5) * gender))\nDset <- set.DAG(D)\n\nBelow is the diagram, with pink lines representing open backdoor path.\n\n\nusing the following vertex attributes: \n\n\nNAdarkbluenone100.50\n\n\nusing the following edge attributes: \n\n\nblack0.210.60.5\n\n\n\n\n\nWe can now generate an example dataset:\n\nObs.Data <- sim(DAG = Dset, n = 50000, rndseed = 123)\nObs.Data$smoking <- as.character(Obs.Data$smoking)\nObs.Data$income <- as.factor(Obs.Data$income)\nObs.Data$income <- relevel(Obs.Data$income, ref = \"1\")\n\nSample data from the hypothetical example of association between hypertension and smoking, where other variables such as income, age [centered], gender, education and diet also plays a role in the data generation process.\n\n\n\n\n \n  \n      \n    age \n    gender \n    education \n    diet \n    income \n    smoking \n    hypertension \n  \n \n\n  \n    34901 \n    12.29 \n    1 \n    1 \n    1 \n    0 \n    1 \n    1 \n  \n  \n    149 \n    10.40 \n    1 \n    1 \n    0 \n    0 \n    1 \n    1 \n  \n  \n    10060 \n    2.99 \n    1 \n    1 \n    0 \n    0 \n    1 \n    0 \n  \n  \n    22220 \n    -4.31 \n    0 \n    0 \n    0 \n    1 \n    0 \n    1 \n  \n  \n    9979 \n    -6.44 \n    0 \n    0 \n    0 \n    1 \n    0 \n    1"
  },
  {
    "objectID": "chapter_07.html#covariate-adjustment",
    "href": "chapter_07.html#covariate-adjustment",
    "title": "4  Effect Modification Analysis within the Propensity score Framework",
    "section": "4.2 Covariate adjustment",
    "text": "4.2 Covariate adjustment\n\n4.2.1 Interaction approach\nBelow, we estimate a logistic regression model to assess whether the effect of smoking (the exposure) on hypertension is modified by income levels. This model considers the following variables:\n\nOutcome: hypertension\nExposure variables: smoking and income\nConfounders: age and gender\n\n\nrequire(jtools)\n\nfit.w.em <- glm(hypertension ~ smoking * income + age + gender, \n            family = binomial(link = \"logit\"), data = Obs.Data)\n\nresults.model <- summ(fit.w.em, exp = TRUE)\n\n\n\n\n\n \n  \n      \n    exp(Est.) \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    (Intercept) \n    5.46 \n    4.37 \n    6.82 \n    14.97 \n    0.00 \n  \n  \n    smoking1 \n    2.93 \n    2.60 \n    3.30 \n    17.69 \n    0.00 \n  \n  \n    income0 \n    0.48 \n    0.41 \n    0.57 \n    -8.28 \n    0.00 \n  \n  \n    age \n    1.29 \n    1.27 \n    1.31 \n    36.77 \n    0.00 \n  \n  \n    gender \n    0.54 \n    0.43 \n    0.67 \n    -5.55 \n    0.00 \n  \n  \n    smoking1:income0 \n    1.27 \n    1.04 \n    1.56 \n    2.33 \n    0.02 \n  \n\n\n\n\n\nResults indicate that the interaction between smoking status and income level is statistically significant (p = 0.02).\nIf we expand previous model to adjust for an additional confounder education, we have:\n\nfit.w.int <- glm(hypertension ~ smoking * income + age + gender + education, \n                 family = binomial(link = \"logit\"), \n                 data = Obs.Data)\n\nresults.int.model <- summ(fit.w.int, exp = TRUE)\n\n\n\n\n\n \n  \n      \n    exp(Est.) \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    (Intercept) \n    5.69 \n    4.56 \n    7.11 \n    15.31 \n    0.00 \n  \n  \n    smoking1 \n    3.35 \n    2.95 \n    3.79 \n    18.85 \n    0.00 \n  \n  \n    income0 \n    1.09 \n    0.85 \n    1.40 \n    0.68 \n    0.49 \n  \n  \n    age \n    1.30 \n    1.28 \n    1.32 \n    37.32 \n    0.00 \n  \n  \n    gender \n    0.54 \n    0.43 \n    0.67 \n    -5.58 \n    0.00 \n  \n  \n    education \n    0.42 \n    0.35 \n    0.51 \n    -8.87 \n    0.00 \n  \n  \n    smoking1:income0 \n    1.10 \n    0.90 \n    1.35 \n    0.93 \n    0.35 \n  \n\n\n\n\n\nThe interaction term between income and smoking is no longer statistically significant (p = 0.35).\nWe can generate a summary report from aforementioned effect modification analysis.\n\nrequire(interactionR)\n\nem.object <- interactionR(fit.w.em, \n                          exposure_names = c(\"income0\", \"smoking1\"), \n                          ci.type = \"mover\", ci.level = 0.95, \n                          em = TRUE, recode = FALSE)\n\nThe table below depicts the adjusted odds ratios for income levels (high = 0, and low = 1). The variables CI.ll and CI.ul depict the lower and upper limits of the 95 percent confidence intervals, OR11 = \\(OR_{A = 1, M = 1}\\) , OR10 = \\(OR_{A = 1}\\), OR01 = \\(OR_{M = 1}\\) and OR00 captures the reference.\n\n\n\n\nTable 4.1:  Summary report from an interaction analysis when investigating association between two exposure variables (smoking and income) and hypertension. \n \n  \n    Measures \n    Estimates \n    CI.ll \n    CI.ul \n  \n \n\n  \n    OR00 \n    1.00 \n    NA \n    NA \n  \n  \n    OR01 \n    2.93 \n    2.60 \n    3.30 \n  \n  \n    OR10 \n    0.48 \n    0.41 \n    0.57 \n  \n  \n    OR11 \n    1.80 \n    1.63 \n    1.98 \n  \n  \n    OR(smoking1 on outcome [income0==0] \n    2.93 \n    2.60 \n    3.30 \n  \n  \n    OR(smoking1 on outcome [income0==1] \n    3.72 \n    3.14 \n    4.41 \n  \n  \n    Multiplicative scale \n    1.27 \n    1.04 \n    1.56 \n  \n  \n    RERI \n    -0.61 \n    -0.98 \n    -0.29 \n  \n\n\n\n\n\n\nSimilarly, for the analysis adjusting for an additional confounder education, we have:\n\n\n\n\nTable 4.2:  Summary report from an interaction analysis when investigating association between two exposure variables (smoking and income) and hypertension. \n \n  \n    Measures \n    Estimates \n    CI.ll \n    CI.ul \n  \n \n\n  \n    OR00 \n    1.00 \n    NA \n    NA \n  \n  \n    OR01 \n    1.09 \n    0.85 \n    1.40 \n  \n  \n    OR10 \n    3.35 \n    2.95 \n    3.79 \n  \n  \n    OR11 \n    4.02 \n    3.29 \n    4.92 \n  \n  \n    OR(income0 on outcome [smoking1==0] \n    1.09 \n    0.85 \n    1.40 \n  \n  \n    OR(income0 on outcome [smoking1==1] \n    1.20 \n    1.00 \n    1.45 \n  \n  \n    OR(smoking1 on outcome [income0==0] \n    3.35 \n    2.95 \n    3.79 \n  \n  \n    OR(smoking1 on outcome [income0==1] \n    3.69 \n    3.11 \n    4.37 \n  \n  \n    Multiplicative scale \n    1.10 \n    0.90 \n    1.35 \n  \n  \n    RERI \n    0.59 \n    0.03 \n    1.27 \n  \n  \n    AP \n    0.15 \n    0.00 \n    0.26 \n  \n  \n    SI \n    1.24 \n    1.01 \n    1.53 \n  \n\n\n\n\n\n\n\n# test run with additive model\nObs.Data$smoking <- as.numeric(as.character(Obs.Data$smoking))\nObs.Data$income <- as.numeric(as.character(Obs.Data$income))\nfit.w.int.add <- glm(hypertension ~ smoking * income + age + gender + education, \n                     family = gaussian(link = \"identity\"), data = Obs.Data)\nsim_slopes(fit.w.int.add, pred = smoking, modx = income,\n           exp = TRUE, robust = TRUE,\n           confint = TRUE, data = Obs.Dat)\n\nJOHNSON-NEYMAN INTERVAL \n\nWhen income is INSIDE the interval [-3.27, 16.87], the slope of smoking is\np < .05.\n\nNote: The range of observed values of income is [0.00, 1.00]\n\nSIMPLE SLOPES ANALYSIS \n\nSlope of smoking when income = 0.00 (0): \n\n  Est.   S.E.   2.5%   97.5%   t val.      p\n------ ------ ------ ------- -------- ------\n  0.25   0.02   1.24    1.34    12.76   0.00\n\nSlope of smoking when income = 1.00 (1): \n\n  Est.   S.E.   2.5%   97.5%   t val.      p\n------ ------ ------ ------- -------- ------\n  0.28   0.01   1.30    1.34    34.53   0.00\n\n\n\n\n4.2.2 Stratification\nThis approach involves estimating a regression model in different strata of the discrete effect modifier income:\n\n# Estimate the prognostic effect of smoking in low income individuals\nfit.income1 <- glm(hypertension ~ smoking + age + gender, \n            family = binomial(link = \"logit\"), \n            data = subset(Obs.Data, income == 1))\n\n# Estimate the prognostic effect of smoking in high income individuals\nfit.income0 <- glm(hypertension ~ smoking + age + gender, \n            family = binomial(link = \"logit\"), \n            data = subset(Obs.Data, income == 0))\n\nThe table below summarizes the adjusted odds ratios for smoking across the different income levels (low = 1, and high = 0) as obtained using the stratified approach.\n\n\n\n\n\n\n\n \n  \n    Value of income \n    Estimate \n    2.5 % \n    97.5 % \n    z value \n    p value \n  \n \n\n  \n    1 \n    3.07 \n    2.71 \n    3.47 \n    17.65 \n    0 \n  \n  \n    0 \n    3.59 \n    3.02 \n    4.26 \n    14.57 \n    0 \n  \n\n\n\n\n\nNote that we can obtain the same results by estimating a regression model with an interaction term between the modifier and all covariates:\n\nfit.all.int <- glm(hypertension ~ income * (smoking + age + gender), \n                   family = binomial(link = \"logit\"), data = Obs.Data)\n\n# Odds ratio for smoking in individuals with low income \nexp(coef(fit.all.int)[\"smoking\"])\n\nsmoking \n3.59026 \n\n# Odds ratio for smoking in individuals with high income\nexp(coef(fit.all.int)[\"smoking\"] + coef(fit.all.int)[\"income:smoking\"])\n\n smoking \n3.066878"
  },
  {
    "objectID": "chapter_07.html#propensity-score-matching",
    "href": "chapter_07.html#propensity-score-matching",
    "title": "4  Effect Modification Analysis within the Propensity score Framework",
    "section": "4.3 Propensity score matching",
    "text": "4.3 Propensity score matching\n\n4.3.1 Stratification with exact matching within subgroups\nWe simulate another example dataset using aforementioned DAG, but restrict the sample size to 5000 individuals to reduce computational burden.\n\nset.seed(123)\nObs.Data <- sim(DAG = Dset, n = 5000, rndseed = 123)\n\nWe first estimate the propensity of smoking in the high-income group (income == 0):\n\nrequire(MatchIt)\n\nmatch.income.0 <- matchit(smoking ~ age + gender, \n                          data = subset(Obs.Data, income == 0),\n                          method = \"full\", distance = \"glm\", link = \"logit\")\ndata.income.0 <- match.data(match.income.0)\n\nBelow, we draw a sample from the high-income group based on the hypothetical example of an association between hypertension and smoking. Here age [centered], gender, education, and diet are covariates.\n\n\n            age gender education diet income smoking hypertension  distance\n657   6.0810120      0         1    1      0       1            1 0.9999874\n4932  1.6109860      1         1    0      0       1            0 0.9943155\n252  -0.2475055      1         1    1      0       0            1 0.8525107\n2693 -0.2511048      1         1    0      0       1            1 0.8516785\n1646 -0.2836155      1         0    1      0       1            1 0.8439843\n        weights subclass\n657  1.00000000       36\n4932 1.00000000       50\n252  0.03296089       25\n2693 1.00000000       25\n1646 1.00000000        4\n\n\nNow, we do the same for the low-income group (income == 1):\n\nmatch.income.1 <- matchit(smoking ~ age + gender, \n                          data = subset(Obs.Data, income == 1),\n                          method = \"full\", distance = \"glm\", link = \"logit\")\ndata.income.1 <- match.data(match.income.1)\n\nWe estimated the exposure effect from a weighted outcome model for the matched data. While the weights are essential for estimating the point estimate from the outcome model, the subclass variable assists in calculating the robust variance of the exposure effect estimate.\n\n# Treatment effect estimation\nfit.income.0 <- glm(hypertension ~ smoking + age + gender, \n                   data = data.income.0, weights = weights,\n                   family = binomial(\"logit\"))\nfit.income.1 <- glm(hypertension ~ smoking + age + gender, \n                   data = data.income.1, weights = weights,\n                   family = binomial(\"logit\"))\n# Robust variance calculation\nfit.nexp.adj.res1 <- summ(fit.income.1,  \n                          robust = TRUE,\n                          cluster = \"subclass\",\n                          confint = TRUE)\nfit.nexp.adj.res0 <- summ(fit.income.0, \n                          robust = TRUE,\n                          cluster = \"subclass\",\n                          confint = TRUE)\n\n\n\n\n\nTable 4.3:  Subgroup-specific treatment effect estimates (expressed in log-OR) from the hypothetical example using the stratified approach. \n \n  \n    Value of income \n    Est. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    3.66 \n    -43.26 \n    50.58 \n    0.15 \n    0.88 \n  \n  \n    1 \n    1.34 \n    0.89 \n    1.78 \n    5.91 \n    0.00 \n  \n\n\n\n\n\n\n\n\n4.3.2 Joint approach without exact matching within subgroups\nHere, entire cohort data is used to estimate the propensity scores, and the effect modifier income is considered as a covariate in the propensity score model:\n\nps.formula <- as.formula(\"smoking ~ age + gender + income\")\nmatch.obj.j <- matchit(ps.formula, data = Obs.Data,\n                      method = \"full\", \n                      distance = \"glm\",\n                      link = \"logit\")\nmatch.data.j <- match.data(match.obj.j)\n\n\nfit.joint.no.exact <- glm(hypertension ~ smoking*income + age + gender, \n                          data = match.data.j, \n                          weights = weights,\n                          family = binomial(\"logit\"))\nrequire(interactions)\nnem.nexp.adj.res <- sim_slopes(fit.joint.no.exact, \n                               pred = smoking, \n                               modx = income,\n                               robust = \"HC1\", \n                               cluster = \"subclass\",\n                               johnson_neyman = TRUE, \n                               confint = TRUE,\n                               data = match.data.j)\n\n\n\n\n\nTable 4.4:  Subgroup-specific treatment effect estimates (expressed in log-OR) from the hypothetical example using the joint approach. \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    3.77 \n    1.02 \n    1.76 \n    5.77 \n    3.68 \n    0 \n  \n  \n    1 \n    1.31 \n    0.28 \n    0.76 \n    1.86 \n    4.69 \n    0 \n  \n\n\n\n\n\n\n\n\n4.3.3 Joint approach with exact matching within subgroups\nWe specify the moderator variable’s name in the exact argument of the matchit function.\n\nps.formula.no.mod <- as.formula(\"smoking ~ age + gender\")\nmatch.obj.js <- matchit(ps.formula.no.mod, data = Obs.Data,\n                        method = \"full\", distance = \"glm\",link = \"logit\",\n                        exact = \"income\")\nmatch.data.js <- match.data(match.obj.js)\nfit.joint.exact <- glm(hypertension ~ smoking*income + age + gender, \n                       data = match.data.js, weights = weights,\n                       family = binomial(\"logit\"))\njs.nexp.adj.res <- sim_slopes(fit.joint.exact, \n                              pred = smoking, modx = income,\n                              robust = \"HC1\", cluster = \"subclass\",\n                              johnson_neyman = FALSE, confint = TRUE,\n                              data = match.data.js)\n\n\n\n\n\nTable 4.5:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using the Joint model, separate matching approach. \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    3.89 \n    1.01 \n    1.92 \n    5.87 \n    3.87 \n    0 \n  \n  \n    1 \n    1.38 \n    0.28 \n    0.84 \n    1.93 \n    4.95 \n    0 \n  \n\n\n\n\n\n\n\n\n4.3.4 Interaction approach without exact matching within subgroups\nAnalysts incorporate relevant moderator-covariate interactions into the propensity score model that align with biological plausibility. For instance, in the case study we considered an interaction between age (a covariate) and income (a moderator), but did not include other interactions terms.\n\nps.formula.with.int <- formula(\"smoking ~ age*income + gender\")\nmatch.obj.i <- matchit(ps.formula.with.int, data = Obs.Data,\n                       method = \"full\", distance = \"glm\",link = \"logit\")\nmatch.data.i <- match.data(match.obj.i)\nfit.int.no.exact <- glm(hypertension ~ smoking*income + age + gender, \n                        data = match.data.i, weights = weights,\n                        family = binomial(\"logit\"))\ni.nexp.adj.res <- sim_slopes(fit.int.no.exact, \n                             pred = smoking, modx = income,\n                             robust = \"HC1\", cluster = \"subclass\",\n                             johnson_neyman = FALSE, confint = TRUE,\n                             data = match.data.i)\n\n\n\n\n\nTable 4.6:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using the interaction approach. \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    3.87 \n    1.00 \n    1.90 \n    5.83 \n    3.86 \n    0 \n  \n  \n    1 \n    1.39 \n    0.28 \n    0.84 \n    1.94 \n    4.95 \n    0 \n  \n\n\n\n\n\n\n\n\n4.3.5 Interaction approach with exact matching within subgroups\nThis method bears resemblance to the interaction approach for propensity score estimation. However, when it comes to matching, researchers match within each moderator subgroup.\n\nmatch.obj.is <- matchit(ps.formula.with.int, data = Obs.Data,\n                      method = \"full\", distance = \"glm\",link = \"logit\",\n                      exact = \"income\")\nmatch.data.is <- match.data(match.obj.is)\nfit.int.exact <- glm(hypertension ~ smoking*income + age + gender, \n                     data = match.data.is, weights = weights,\n                     family = binomial(\"logit\"))\nis.nexp.adj.res <- sim_slopes(fit.int.exact, \n                              pred = smoking, modx = income,\n                              robust = \"HC1\", cluster = \"subclass\",\n                              johnson_neyman = FALSE, confint = TRUE,\n                              data = match.data.is)\n\n\n\n\n\nTable 4.7:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using the interaction model, separate matching approach. \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    3.86 \n    1.00 \n    1.90 \n    5.83 \n    3.85 \n    0 \n  \n  \n    1 \n    1.40 \n    0.28 \n    0.85 \n    1.95 \n    4.99 \n    0"
  },
  {
    "objectID": "chapter_07.html#propensity-score-weighting",
    "href": "chapter_07.html#propensity-score-weighting",
    "title": "4  Effect Modification Analysis within the Propensity score Framework",
    "section": "4.4 Propensity Score Weighting",
    "text": "4.4 Propensity Score Weighting\n\n4.4.1 Common model\nThis approach adds confounder-moderator interactions in the common weight model.\n\nrequire(WeightIt)\nW.out <- weightit(ps.formula.with.int, \n                  data = Obs.Data,\n                  method = \"ps\", \n                  estimand = \"ATT\")\nrequire(survey)\nd.w <- svydesign(~1, weights = W.out$weights, data = Obs.Data)\nfit2w <- svyglm(hypertension ~ smoking*income, design = d.w,\n                family = binomial(\"logit\"))\nw.nexp.adj.res <- sim_slopes(fit2w, pred = smoking, modx = income, \n                             confint = TRUE)\n\n\n\n\n\nTable 4.8:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using the weighting approach. \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    t val. \n    p \n  \n \n\n  \n    0 \n    2.66 \n    0.63 \n    1.42 \n    3.89 \n    4.23 \n    0 \n  \n  \n    1 \n    1.32 \n    0.25 \n    0.83 \n    1.82 \n    5.24 \n    0 \n  \n\n\n\n\n\n\nWe can adjust previous analysis model to adopt stabilized weights for the propensity score (stabilize = TRUE):\n\nW.out.st <- weightit(ps.formula.with.int, data = Obs.Data,\n                     method = \"ps\", \n                     estimand = \"ATT\", \n                     stabilize = TRUE)\nd.sw <- svydesign(~1, weights = W.out.st$weights, data = Obs.Data)\nfit2sw <- svyglm(hypertension ~ smoking*income + age + gender, \n                  design = d.sw,\n                  family = binomial(\"logit\"))\nws.nexp.adj.res <- sim_slopes(fit2sw, \n                              pred = smoking, modx = income, \n                              confint = TRUE)\n\n\n\n\n\n\n\n\nTable 4.9:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using stabilized propensity score weights. \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    t val. \n    p \n  \n \n\n  \n    0 \n    2.27 \n    0.73 \n    0.84 \n    3.69 \n    3.12 \n    0 \n  \n  \n    1 \n    1.32 \n    0.25 \n    0.83 \n    1.82 \n    5.23 \n    0 \n  \n\n\n\n\n\n\n\n\n4.4.2 Separate models\nPropensity score weighting approach with weights estimated separately from each subgroup:\n\nps.formula.with.no.int <- formula(\"smoking ~ age + gender\")\nW.out1 <- weightit(ps.formula.with.no.int, \n                   data = subset(Obs.Data, income == 1),\n                   method = \"ps\", \n                   estimand = \"ATT\")\ntrimmed.weight.1.percent1 <- trim(W.out1$weights, \n                                  at = 1, lower = TRUE)\n\n\n\n\n\nTable 4.10:  Weight summaries before and after truncation. \n \n  \n    Weight \n    Min. \n    1st Qu. \n    Median \n    Mean \n    3rd Qu. \n    Max. \n  \n \n\n  \n    Raw weights \n    0 \n    0.01 \n    0.11 \n    0.45 \n    1 \n    11.69 \n  \n  \n    1% truncated weights \n    0 \n    0.01 \n    0.11 \n    0.44 \n    1 \n    7.61 \n  \n\n\n\n\n\n\n\n# Outcome model for income = 1\nd.w1 <- svydesign(~1, weights = trimmed.weight.1.percent1, \n                  data = subset(Obs.Data, income == 1))\nfit2unadj1 <- svyglm(hypertension ~ smoking, design = d.w1,\n                     family = binomial(\"logit\"))\n\n# weight model for income = 0\nW.out0 <- weightit(ps.formula, data = subset(Obs.Data, income == 0),\n                  method = \"ps\", estimand = \"ATT\")\ntrimmed.weight.1.percent0 <- trim(W.out0$weights, at = 1, lower = TRUE)\n\n# Outcome model for income = 0\nd.w0 <- svydesign(~1, weights = trimmed.weight.1.percent0, \n                  data = subset(Obs.Data, income == 0))\nfit2unadj0 <- svyglm(hypertension ~ smoking, design = d.w0,\n                     family = binomial(\"logit\"))\n\nfit.exp.adj.res1 <- summ(fit2unadj1, confint = TRUE)\nfit.exp.adj.res0 <- summ(fit2unadj0, confint = TRUE)\n\n\n\n\n\nTable 4.11:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using the propensity score weighting approach (Separate weight models). \n \n  \n    Value of income \n    Est. \n    2.5% \n    97.5% \n    t val. \n    p \n  \n \n\n  \n    0 \n    2.21 \n    1.27 \n    3.15 \n    4.60 \n    0 \n  \n  \n    1 \n    1.34 \n    0.85 \n    1.83 \n    5.36 \n    0 \n  \n\n\n\n\n\n\n\n\n4.4.3 Weights from the subgroup balancing propensity scores\nSubgroup balancing propensity scores for propensity score weighting:\n\nw.out <- weightit(smoking ~ age + gender + income, \n                data = Obs.Data,\n                method = \"ps\", estimand = \"ATT\")\nw.out.sb <- sbps(w.out, moderator = \"income\")\nd.w.sb <- svydesign(~1, weights = w.out.sb$weights, data = Obs.Data)\nfit2unadj.sb <- svyglm(hypertension ~ smoking*income, design = d.w.sb,\n                       family = binomial(\"logit\"))\nsb.w.nexp.adj.res <- sim_slopes(fit2unadj.sb, \n                              pred = smoking, \n                              modx = income, \n                              confint = TRUE,\n                              johnson_neyman = FALSE,)\n\n\n\n\n\nTable 4.12:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using the subgroup balancing weighting approach. \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    t val. \n    p \n  \n \n\n  \n    0 \n    2.68 \n    0.64 \n    1.44 \n    3.92 \n    4.22 \n    0 \n  \n  \n    1 \n    1.32 \n    0.25 \n    0.82 \n    1.82 \n    5.22 \n    0"
  },
  {
    "objectID": "chapter_07.html#covariate-adjustment-for-the-propensity-score",
    "href": "chapter_07.html#covariate-adjustment-for-the-propensity-score",
    "title": "4  Effect Modification Analysis within the Propensity score Framework",
    "section": "4.5 Covariate adjustment for the propensity score",
    "text": "4.5 Covariate adjustment for the propensity score\n\n4.5.1 As continuous covariate\nAn implementation of propensity scores as a continuous covariate in the outcome model:\n\n# Separate models for each subgroup\n\n# For subgroup income = 1 \nObs.Data$ps[Obs.Data$income == 1] <- glm(ps.formula, \n                                         data = subset(Obs.Data, income == 1), \n                                         family = \"binomial\")$fitted.values\nfit2adj1 <- glm(hypertension ~ smoking + age + gender, \n                family = binomial(\"logit\"), \n                data = subset(Obs.Data, income == 1))\n\n# For subgroup income = 0\nObs.Data$ps[Obs.Data$income == 0] <- glm(ps.formula, \n                                         data = subset(Obs.Data, income == 0), \n                                         family = \"binomial\")$fitted.values\nfit2adj0 <- glm(hypertension ~ smoking + age + gender, \n                family = binomial(\"logit\"), \n                data = subset(Obs.Data, income == 0))\n\nfit.nexp.adj.res1 <- summ(fit2adj1, robust = TRUE, confint = TRUE)\nfit.nexp.adj.res0 <- summ(fit2adj0, robust = TRUE, confint = TRUE)\n\n\n\n\n\nTable 4.13:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using Propensity Score as a covariate adjustment approach (considering separate models for each subgroup). \n \n  \n    Value of income \n    Est. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    1.16 \n    0.56 \n    1.75 \n    3.83 \n    0 \n  \n  \n    1 \n    1.37 \n    0.96 \n    1.77 \n    6.61 \n    0 \n  \n\n\n\n\n\n\n\n# Common model\nObs.Data$ps <- glm(ps.formula.with.int, data = Obs.Data,\n                       family = \"binomial\")$fitted.values\n\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nfit2adjc <- glm(hypertension ~ smoking*income + age + gender + ps, \n                family = binomial(\"logit\"), \n                data = Obs.Data)\nc.nexp.adj.res <- sim_slopes(fit2adjc,\n                             pred = smoking, modx = income,\n                             confint = TRUE,\n                             data = Obs.Data)\n\n\n\n\n\nTable 4.14:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using Propensity Score as a covariate adjustment approach (considering a common model). \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    1.17 \n    0.29 \n    0.61 \n    1.74 \n    4.07 \n    0 \n  \n  \n    1 \n    1.43 \n    0.23 \n    0.98 \n    1.87 \n    6.30 \n    0 \n  \n\n\n\n\n\n\n\n\n4.5.2 As quantiles\nThe propensity scores as a categorical covariate, broken by quintiles, in the outcome model.\n\nObs.Data$ps <- glm(ps.formula.with.int, \n                   data = Obs.Data, \n                   family = \"binomial\")$fitted.values\nquintiles <- quantile(Obs.Data$ps, \n                      prob = seq(from = 0, to = 1, by = 0.2), \n                      na.rm = T)\nObs.Data$psq <- cut(Obs.Data$ps, breaks = quintiles, \n                   labels = seq(1,5), include.lowest = T)\nObs.Data$psq <- as.factor(Obs.Data$psq)\n\nfit2adjq <- glm(hypertension ~ (smoking*psq)*income, \n                family = binomial(\"logit\"),\n                data = Obs.Data)\ncq.nexp.adj.res <- sim_slopes(fit2adjq, \n                              pred = smoking, \n                              modx = income, \n                              confint = TRUE,\n                              data = Obs.Data)\n\n\n\n\n\nTable 4.15:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using Propensity Score as a covariate adjustment approach (as quintiles). \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    3.08 \n    0.63 \n    1.85 \n    4.32 \n    4.91 \n    0 \n  \n  \n    1 \n    2.60 \n    0.47 \n    1.68 \n    3.51 \n    5.56 \n    0"
  },
  {
    "objectID": "chapter_07.html#propensity-score-stratification",
    "href": "chapter_07.html#propensity-score-stratification",
    "title": "4  Effect Modification Analysis within the Propensity score Framework",
    "section": "4.6 Propensity Score Stratification",
    "text": "4.6 Propensity Score Stratification\nHere is an implementation of propensity score stratification approach by using the marginal mean weighting through stratification (MMWS):\n\nmatch.obj <- matchit(ps.formula, data = Obs.Data,\n                      method = \"subclass\", subclass = 3, \n                      estimand = \"ATT\", min.n = 10)\ndata.subclass <- match.data(match.obj)\nsubclass.fit <- glm(hypertension ~ smoking*income, family = binomial(\"logit\"),\n              data = data.subclass,\n              weights = weights)\nsubclass.nexp.adj.res <- sim_slopes(subclass.fit, \n                                    pred = smoking, \n                                    modx = income, \n                                    confint = TRUE,\n                                    robust = \"HC3\",\n                                    johnson_neyman = FALSE,\n                                    data = data.subclass)\n\n\n\n\n\nTable 4.16:  Subgroup-specific exposure effect estimates (expressed in log-OR) from the hypothetical example using propensity score stratification approach. \n \n  \n    Value of income \n    Est. \n    S.E. \n    2.5% \n    97.5% \n    z val. \n    p \n  \n \n\n  \n    0 \n    2.21 \n    0.47 \n    1.29 \n    3.13 \n    4.71 \n    0 \n  \n  \n    1 \n    1.89 \n    0.19 \n    1.51 \n    2.26 \n    9.78 \n    0"
  },
  {
    "objectID": "chapter_07.html#summary",
    "href": "chapter_07.html#summary",
    "title": "4  Effect Modification Analysis within the Propensity score Framework",
    "section": "4.7 Summary",
    "text": "4.7 Summary\nThe marginal odds ratios for smoking are summarized below"
  },
  {
    "objectID": "chapter_07.html#version-info",
    "href": "chapter_07.html#version-info",
    "title": "4  Effect Modification Analysis within the Propensity score Framework",
    "section": "Version info",
    "text": "Version info\nThis chapter was rendered using the following version of R and its packages:\n\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] scales_1.2.1       ggplot2_3.4.2      interactionR_0.1.6 simcausal_0.5.6   \n [5] xtable_1.8-4       dplyr_1.1.2        kableExtra_1.3.4   knitr_1.42        \n [9] cowplot_1.1.1      readstata13_0.10.1 Publish_2023.01.17 prodlim_2023.03.31\n[13] survey_4.2-1       survival_3.5-5     Matrix_1.5-4       broom_1.0.4       \n[17] MatchIt_4.5.4      interactions_1.1.5 jtools_2.2.1       sandwich_3.0-2    \n[21] lmtest_0.9-40      zoo_1.8-12         optmatch_0.10.6    WeightIt_0.14.2   \n[25] cobalt_4.5.1       table1_1.4.3      \n\nloaded via a namespace (and not attached):\n [1] DBI_1.1.3               rlemon_0.2.1            rlang_1.1.1            \n [4] magrittr_2.0.3          compiler_4.3.0          systemfonts_1.0.4      \n [7] vctrs_0.6.2             rvest_1.0.3             stringr_1.5.0          \n[10] httpcode_0.3.0          pkgconfig_2.0.3         crayon_1.5.2           \n[13] fastmap_1.1.1           backports_1.4.1         ellipsis_0.3.2         \n[16] labeling_0.4.2          pander_0.6.5            utf8_1.2.3             \n[19] promises_1.2.0.1        rmarkdown_2.21          ragg_1.2.5             \n[22] purrr_1.0.1             xfun_0.39               jsonlite_1.8.4         \n[25] highr_0.10              later_1.3.1             chk_0.9.0              \n[28] uuid_1.1-0              parallel_4.3.0          R6_2.5.1               \n[31] stringi_1.7.12          car_3.1-2               parallelly_1.36.0      \n[34] Rcpp_1.0.10             assertthat_0.2.1        future.apply_1.11.0    \n[37] httpuv_1.6.11           splines_4.3.0           igraph_1.4.3           \n[40] tidyselect_1.2.0        abind_1.4-5             rstudioapi_0.14        \n[43] yaml_2.3.7              codetools_0.2-19        curl_5.0.0             \n[46] listenv_0.9.0           lattice_0.21-8          tibble_3.2.1           \n[49] withr_2.5.0             shiny_1.7.4             askpass_1.1            \n[52] flextable_0.9.1         evaluate_0.21           future_1.32.0          \n[55] zip_2.3.0               xml2_1.3.4              pillar_1.9.0           \n[58] carData_3.0-5           generics_0.1.3          munsell_0.5.0          \n[61] globals_0.16.2          glue_1.6.2              gdtools_0.3.3          \n[64] tools_4.3.0             gfonts_0.2.0            data.table_1.14.8      \n[67] webshot_0.5.4           mvtnorm_1.1-3           tidyr_1.3.0            \n[70] mitools_2.4             colorspace_2.1-0        Formula_1.2-5          \n[73] cli_3.6.1               textshaping_0.3.6       officer_0.6.2          \n[76] expm_0.999-7            fontBitstreamVera_0.1.1 fansi_1.0.4            \n[79] viridisLite_0.4.2       svglite_2.1.1           lava_1.7.2.1           \n[82] gtable_0.3.3            digest_0.6.31           fontquiver_0.2.1       \n[85] msm_1.7                 crul_1.4.0              farver_2.1.1           \n[88] htmlwidgets_1.6.2       htmltools_0.5.5         lifecycle_1.0.3        \n[91] httr_1.4.6              mime_0.12               openssl_2.0.6          \n[94] fontLiberation_0.1.0"
  },
  {
    "objectID": "chapter_09.html#setup",
    "href": "chapter_09.html#setup",
    "title": "5  Dealing with missing data",
    "section": "5.1 Setup",
    "text": "5.1 Setup\n\n5.1.1 Prepare R environment\n\nlibrary(mice)\nlibrary(dplyr)\nlibrary(ggmice)\nlibrary(MatchThem)\n\n# Load relevant chapter functions\nsource(\"resources/chapter 09/functions.r\")\n\n\n\n5.1.2 Generating an observational dataset\nWe can simulate an observational dataset of \\(N = 3000\\) patients as follows:\n\ndata_noHTE <- generate_data(n = 3000, seed = 1234) \n\nThis dataset does not (yet) contain any missing values;\nThe simulated dataset contains two treatment groups with differences in baseline characteristics. For example, the figure below shows that we have baseline imbalance in age.\n\n\n\n\n\nFigure 5.1: Distribution of the EDSS score at each time point\n\n\n\n\n\n\n\n\n\n5.1.3 Generating missing values\nMissing values can be generated using the function getmissdata(), which considers the following patterns of missingness for the previous number of relapses (prerelapse_num):\n\nMAR: missingness depends on age and sex\nMART: missingness depends on age, sex and the treatment variable treatment\nMARTY: missingness depends on age, sex, treatment and the outcome variable y\nMNAR: missingness depends on age, sex and prerelapse_num\n\n\nmdata_noHTE <- getmissdata(data_noHTE, \"MART\")\n\nAfter introducing missing values, we only have complete data for \\(N=\\) 946 patients.\n\n\n\nBaseline characteristics of the incomplete dataset.\n\n\n\n\nDMF(N=2265)\nTERI(N=735)\nOverall(N=3000)\n\n\n\n\nAge (years)\n\n\n\n\n\nMean (SD)\n44.4 (10.0)\n51.3 (8.72)\n46.2 (10.1)\n\n\nMedian [Min, Max]\n45.0 [18.0, 64.0]\n53.0 [23.0, 64.0]\n47.0 [18.0, 64.0]\n\n\nMissing\n248 (10.9%)\n57 (7.8%)\n305 (10.2%)\n\n\nFemale Sex\n\n\n\n\n\nYes\n1740 (76.8%)\n526 (71.6%)\n2266 (75.5%)\n\n\nNo\n525 (23.2%)\n209 (28.4%)\n734 (24.5%)\n\n\nEfficacy of previous DMT\n\n\n\n\n\nNone\n740 (32.7%)\n325 (44.2%)\n1065 (35.5%)\n\n\nLow\n190 (8.4%)\n59 (8.0%)\n249 (8.3%)\n\n\nMedium or High\n830 (36.6%)\n246 (33.5%)\n1076 (35.9%)\n\n\nMissing\n505 (22.3%)\n105 (14.3%)\n610 (20.3%)\n\n\nPrior medical costs\n\n\n\n\n\nMean (SD)\n9970 (10700)\n25500 (35400)\n13900 (21200)\n\n\nMedian [Min, Max]\n6530 [164, 102000]\n12500 [259, 337000]\n7450 [164, 337000]\n\n\nMissing\n257 (11.3%)\n52 (7.1%)\n309 (10.3%)\n\n\nNumber of prior symptoms\n\n\n\n\n\n0\n157 (6.9%)\n58 (7.9%)\n215 (7.2%)\n\n\n1\n1169 (51.6%)\n411 (55.9%)\n1580 (52.7%)\n\n\n>=2\n435 (19.2%)\n159 (21.6%)\n594 (19.8%)\n\n\nMissing\n504 (22.3%)\n107 (14.6%)\n611 (20.4%)\n\n\nNumber of prior relapses\n\n\n\n\n\nMean (SD)\n0.453 (0.671)\n0.408 (0.646)\n0.436 (0.662)\n\n\nMedian [Min, Max]\n0 [0, 4.00]\n0 [0, 3.00]\n0 [0, 4.00]\n\n\nMissing\n1365 (60.3%)\n152 (20.7%)\n1517 (50.6%)"
  },
  {
    "objectID": "chapter_09.html#analysis-of-incomplete-data",
    "href": "chapter_09.html#analysis-of-incomplete-data",
    "title": "5  Dealing with missing data",
    "section": "5.2 Analysis of incomplete data",
    "text": "5.2 Analysis of incomplete data\n\n5.2.1 Complete Case Analysis\nBelow, we describe how to estimate the ATE using propensity score matching.\n\nimpdata <- mdata_noHTE[complete.cases(mdata_noHTE), ]\n\n# Apply Matching\nmout <- matchit(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num, \n                data = impdata,\n                family = binomial,\n                method = \"full\",\n                caliper = 0.2,\n                estimand = \"ATE\",\n                replace = FALSE) \n\nmdata <- as.data.table(match.data(mout))\nmatch_mod <- glm(\"y ~ DMF\" , offset = log(years),\n                 family = poisson(link = \"log\"),\n                 data = mdata,\n                 weights = weights)\n\n# Estimate robust variance-covariance matrix\ntx_var <- vcovCL(match_mod, cluster = ~ subclass, sandwich = TRUE) \n\nWe can extract the treatment effect estimate as follows:\n\n# Treatment effect estimate (log rate ratio)\ncoef(match_mod)[\"DMF\"]\n\n       DMF \n-0.3685717 \n\n# Standard error\nsqrt(tx_var[\"DMF\", \"DMF\"])\n\n[1] 0.1521243\n\n\n\n\n\n\n\n5.2.2 Multiple Imputation (within method)\nIn this approach, we will generate \\(m=5\\) imputed datasets and perform matching within each imputed dataset. We first need to specify how the variables prevDMTefficacy, premedicalcost, numSymptoms, prerelapse_num and age will be imputed:\n\n# We add a covariate for log(years)\nimpdata <-  mdata_noHTE %>% mutate(logyears = log(years))\n\n# Specify the conditional imputation models\nform_y <- list(prevDMTefficacy ~ age + female + logyears + premedicalcost + numSymptoms + \n                 treatment + prerelapse_num + y,\n               premedicalcost ~ age + female + logyears + prevDMTefficacy + numSymptoms + \n                 treatment + prerelapse_num + y,\n               numSymptoms ~ age + female + premedicalcost + logyears + prevDMTefficacy + \n                 prerelapse_num + treatment + y,\n               prerelapse_num ~ age + female + premedicalcost + logyears + prevDMTefficacy + \n                 numSymptoms + treatment + y,\n               age ~ prerelapse_num + female + premedicalcost + logyears + prevDMTefficacy + \n                 numSymptoms + treatment + y)\nform_y <- name.formulas(form_y)\n\n# Adopt predictive mean matching for imputing the incomplete variables\nimp0 <- mice(impdata, form = form_y, maxit = 0)\nmethod <- imp0$method\nmethod[\"numSymptoms\"] <- \"pmm\"\nmethod[\"prevDMTefficacy\"] <- \"pmm\"\n\n# Generate 5 imputed datasets\nimp <- mice(impdata, form = form_y, method = method, m = 5, maxit = 100)\n\n\n\n\nWe can now estimate the ATE using propensity score analysis in each of the imputed datasets. We here adopt full matching without replacement.\n\n# Matching based on PS model\nmout <- matchthem(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num,\n                  datasets = imp,\n                  approach = \"within\",\n                  method = \"full\",\n                  caliper = 0.2,\n                  family = binomial,\n                  estimand = \"ATE\",\n                  distance = \"glm\",\n                  link = \"logit\",\n                  replace = FALSE) \n\nThe results are then combined using Rubin’s rules. We adopt robust standard errors to account for clustering of matched individuals.\n\nmatch_mod <- summary(pool(with(mout, svyglm(y ~ DMF + offset(log(years)), \n                                            family = poisson(link = \"log\")),\n                               cluster = TRUE)), conf.int = TRUE)\n\nWe can extract the treatment effect estimate and corresponding standard error as follows:\n\n# Treatment effect estimate (log rate ratio)\n(match_mod %>% filter(term == \"DMF\"))$estimate\n\n[1] -0.1554094\n\n# Standard error\n(match_mod %>% filter(term == \"DMF\"))$std.error\n\n[1] 0.2202132\n\n\n\n\n\n\n\n5.2.3 Multiple Imputation (across method)\n\n# Matching based on PS model\nmout <- matchthem(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num,\n                  datasets = imp,\n                  approach = \"across\",\n                  method = \"full\",\n                  caliper = 0.2,\n                  family = binomial,\n                  estimand = \"ATE\",\n                  distance = \"glm\",\n                  link = \"logit\",\n                  replace = FALSE) \n\nThe results are then combined using Rubin’s rules. We adopt robust standard errors to account for clustering of matched individuals.\n\nmatch_mod <- summary(pool(with(mout, svyglm(y ~ DMF, offset = log(years), \n                                            family = poisson(link = \"log\")),\n                               cluster = TRUE)), conf.int = TRUE)\n\nWe can extract the treatment effect estimate and corresponding standard error as follows:\n\n# Treatment effect estimate (log rate ratio)\n(match_mod %>% filter(term == \"DMF\"))$estimate\n\n[1] -0.3461563\n\n# Standard error\n(match_mod %>% filter(term == \"DMF\"))$std.error\n\n[1] 0.1351187"
  },
  {
    "objectID": "chapter_09.html#convergence-checking",
    "href": "chapter_09.html#convergence-checking",
    "title": "5  Dealing with missing data",
    "section": "5.3 Convergence checking",
    "text": "5.3 Convergence checking\nWe can inspect convergence for the imputed variable prerelapse_num using a trace plot:\n\nplot_trace(imp, vrb = \"prerelapse_num\")"
  },
  {
    "objectID": "chapter_09.html#results",
    "href": "chapter_09.html#results",
    "title": "5  Dealing with missing data",
    "section": "5.4 Results",
    "text": "5.4 Results\nAnalysis methods:\n\nFull Data: The treatment effect is estimated in the original data of \\(N=3000\\) patients where no missing values are present. This estimate can be used as a benchmark to compare the missing data methods.\nComplete Case Analysis: The treatment effect is estimated using all data from \\(N=\\) 946 patients that do not have any missing values.\nMissing Indicator: The treatment effect is estimated in the incomplete dataset of \\(N=3000\\) patients. The propensity score model includes a missing indicator variable for each incomplete covariate.\nMICE (within method): A treatment effect is estimated within each imputed dataset using propensity score analysis. Using Rubin’s rule, the five treatment effects are combined into a single treatment effect.\nMICE (ITE method): The missing covariates and potential outcomes are imputed simultaneously. Treatment effect estimates are derived by taking the average of the individualized treatment effect estimates Y|DMF - Y|TERI."
  },
  {
    "objectID": "chapter_09.html#version-info",
    "href": "chapter_09.html#version-info",
    "title": "5  Dealing with missing data",
    "section": "Version info",
    "text": "Version info\nThis chapter was rendered using the following version of R and its packages:\n\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggmice_0.0.1      table1_1.4.3      kableExtra_1.3.4  ggplot2_3.4.2    \n [5] missForest_1.5    sandwich_3.0-2    PSweight_1.1.8    MatchThem_1.0.1  \n [9] mice_3.16.0       cobalt_4.5.1      WeightIt_0.14.2   MatchIt_4.5.4    \n[13] optmatch_0.10.6   truncnorm_1.0-9   MASS_7.3-58.4     survey_4.2-1     \n[17] survival_3.5-5    Matrix_1.5-4      data.table_1.14.8 tidyr_1.3.0      \n[21] dplyr_1.1.2      \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0     viridisLite_0.4.2    farver_2.1.1        \n [4] fastmap_1.1.1        digest_0.6.31        rpart_4.1.19        \n [7] lifecycle_1.0.3      magrittr_2.0.3       compiler_4.3.0      \n[10] rlang_1.1.1          rngtools_1.5.2       tools_4.3.0         \n[13] utf8_1.2.3           yaml_2.3.7           knitr_1.42          \n[16] labeling_0.4.2       doRNG_1.8.6          htmlwidgets_1.6.2   \n[19] xml2_1.3.4           SuperLearner_2.0-28  withr_2.5.0         \n[22] purrr_1.0.1          numDeriv_2016.8-1.1  itertools_0.1-3     \n[25] nnet_7.3-18          fansi_1.0.4          jomo_2.7-6          \n[28] colorspace_2.1-0     scales_1.2.1         iterators_1.0.14    \n[31] cli_3.6.1            rmarkdown_2.21       crayon_1.5.2        \n[34] generics_0.1.3       rstudioapi_0.14      httr_1.4.6          \n[37] minqa_1.2.5          DBI_1.1.3            rlemon_0.2.1        \n[40] stringr_1.5.0        splines_4.3.0        nnls_1.4            \n[43] rvest_1.0.3          parallel_4.3.0       mitools_2.4         \n[46] vctrs_0.6.2          webshot_0.5.4        boot_1.3-28.1       \n[49] glmnet_4.1-7         jsonlite_1.8.4       mitml_0.4-5         \n[52] Formula_1.2-5        systemfonts_1.0.4    foreach_1.5.2       \n[55] see_0.8.0            gam_1.22-2           glue_1.6.2          \n[58] nloptr_2.0.3         pan_1.6              chk_0.9.0           \n[61] codetools_0.2-19     stringi_1.7.12       shape_1.4.6         \n[64] gtable_0.3.3         lme4_1.1-33          munsell_0.5.0       \n[67] tibble_3.2.1         pillar_1.9.0         htmltools_0.5.5     \n[70] randomForest_4.7-1.1 gbm_2.1.8.1          R6_2.5.1            \n[73] evaluate_0.21        lattice_0.21-8       backports_1.4.1     \n[76] broom_1.0.4          Rcpp_1.0.10          svglite_2.1.1       \n[79] nlme_3.1-162         xfun_0.39            zoo_1.8-12          \n[82] pkgconfig_2.0.3"
  },
  {
    "objectID": "chapter_10.html#introduction",
    "href": "chapter_10.html#introduction",
    "title": "6  Systematic review and meta-analysis of Real-World Evidence",
    "section": "6.1 Introduction",
    "text": "6.1 Introduction\nWe first load the required packages\n\nlibrary(dplyr)\nlibrary(gemtc)\nlibrary(netmeta)"
  },
  {
    "objectID": "chapter_10.html#pairwise-meta-analysis-of-clinical-trials",
    "href": "chapter_10.html#pairwise-meta-analysis-of-clinical-trials",
    "title": "6  Systematic review and meta-analysis of Real-World Evidence",
    "section": "6.2 Pairwise meta-analysis of clinical trials",
    "text": "6.2 Pairwise meta-analysis of clinical trials\n\n6.2.1 Toculizumab for coronavirus disease 2019\nIn this example, we consider the results from a systematic literature review of clinical trials investigating any pharmacological in hosptialized patients with coronavirus disease 2019 (Selvarajan et al. 2022). A total of 23 randomized controlled trials were included and studied seven different interventions: dexamethasone, remdesivir, tocilizumab, hydroxychloroquine, combination of lopinavir/ritonavir, favipiravir and interferon-β. We here focus on the synthesis of 7 trials that comparted toculizumab (TOCI) to standard care (STD) and collected mortality data.\n\n\n\n\n\n\n\n \n  \n    studlab \n    treat1 \n    treat2 \n    event1 \n    n1 \n    event2 \n    n2 \n  \n \n\n  \n    Hermine et al \n    TOCI \n    STD \n    7 \n    63 \n    8 \n    67 \n  \n  \n    Rosas et al \n    TOCI \n    STD \n    58 \n    294 \n    28 \n    144 \n  \n  \n    Salama et al \n    TOCI \n    STD \n    26 \n    249 \n    11 \n    128 \n  \n  \n    Salvarini et al \n    TOCI \n    STD \n    2 \n    60 \n    1 \n    66 \n  \n  \n    Stone et al \n    TOCI \n    STD \n    9 \n    161 \n    3 \n    82 \n  \n  \n    Veiga et al \n    TOCI \n    STD \n    14 \n    65 \n    6 \n    64 \n  \n\n\n\n\n\nWe now conduct a pairwise meta-analysis to assess the pooled effect of tocilizumab versus standard care. For each study, the log odds ratio and corresponding standard error is derived after which the corresponding estimates are pooled using the Mantel-Haenszel method.\n\nresults.TOCI <- metabin(event1,n1,event2,n2,studlab,data=tocilizumab,\n                        sm=\"OR\",main=\"tocilizumab vs standard care\", \n                        prediction=TRUE)\nforest(results.TOCI, leftcols = \"studlab\", rightcols = \"effect.ci\")\n\n\n\n\nAltough a random effects meta-analysis was conducted, no heterogeneity was found (\\(\\tau\\)=0, with a 95% confidence interval ranging from 0 to 0.85).\n\n\n6.2.2 Remdesivir for coronavirus disease 2019\nIn aforementioned example, a total of 4 trials compared remdesivir to standard care:"
  },
  {
    "objectID": "chapter_10.html#network-meta-analysis-of-clinical-trials",
    "href": "chapter_10.html#network-meta-analysis-of-clinical-trials",
    "title": "6  Systematic review and meta-analysis of Real-World Evidence",
    "section": "6.3 Network meta-analysis of clinical trials",
    "text": "6.3 Network meta-analysis of clinical trials\nWe here use the R packages netmeta for conducting a frequentist network meta-analysis. A detailed tutorial on the use of netmeta is available from the book Doing Meta-Analysis with R: A Hands-On Guide.\n\n6.3.1 Interventions for coronavirus disease 2019\nWe here consider data from a study which aimed to assess the comparative effectiveness of remdesivir and tocilizumab for reducing mortality in hospitalised COVID-19 patients. 80 trials were identified from two published network meta-analyses (Selvarajan et al. 2022), (Siemieniuk et al. 2020), a living COVID-19 trial database (COVID-NMA Initiative) [Covid-NMA.com], and a clinical trial database [clinicaltrials.gov]. Trials were included in this study if the patient population included hospitalized COVID-19 patients, active treatment was remdesivir or tocilizumab, comparator treatment was placebo or standard care, short-term mortality data was available, and the trial was published. 21 trials were included. For included trials, a risk of bias score was extracted from the COVID-NMA Initiative.\n\n\n\n\n \n  \n    studlab \n    treat1 \n    treat2 \n    event1 \n    n1 \n    event2 \n    n2 \n  \n \n\n  \n    Ader \n    REM \n    STD \n    34 \n    414 \n    37 \n    418 \n  \n  \n    Beigel (ACTT-1) \n    REM \n    STD \n    59 \n    541 \n    77 \n    521 \n  \n  \n    Broman \n    TOCI \n    STD \n    1 \n    57 \n    0 \n    29 \n  \n  \n    Criner \n    REM \n    STD \n    4 \n    384 \n    4 \n    200 \n  \n  \n    Declerq (COV-AID) \n    TOCI \n    STD \n    10 \n    81 \n    9 \n    74 \n  \n  \n    Gordon (REMAP-CAP) \n    TOCI \n    STD \n    83 \n    353 \n    116 \n    358 \n  \n  \n    Hermine (CORIMUNO) \n    TOCI \n    STD \n    7 \n    63 \n    8 \n    67 \n  \n  \n    Horby (RECOVERY) \n    TOCI \n    STD \n    621 \n    2022 \n    729 \n    2094 \n  \n  \n    Islam \n    REM \n    STD \n    0 \n    30 \n    0 \n    30 \n  \n  \n    Mahajan \n    REM \n    STD \n    5 \n    34 \n    3 \n    36 \n  \n  \n    Pan (WHO Solidarity) \n    REM \n    STD \n    602 \n    4146 \n    643 \n    4129 \n  \n  \n    Rosas (COVACTA) \n    TOCI \n    STD \n    58 \n    294 \n    28 \n    144 \n  \n  \n    Rutgers \n    TOCI \n    STD \n    21 \n    174 \n    34 \n    180 \n  \n  \n    Salama (EMPACTA) \n    TOCI \n    STD \n    26 \n    249 \n    11 \n    128 \n  \n  \n    Salvarani \n    TOCI \n    STD \n    2 \n    60 \n    1 \n    63 \n  \n  \n    Soin (COVINTOC) \n    TOCI \n    STD \n    11 \n    92 \n    15 \n    88 \n  \n  \n    Spinner \n    REM \n    STD \n    5 \n    384 \n    4 \n    200 \n  \n  \n    Stone (BACC-BAY) \n    TOCI \n    STD \n    9 \n    161 \n    4 \n    82 \n  \n  \n    Talaschian \n    TOCI \n    STD \n    5 \n    17 \n    4 \n    19 \n  \n  \n    Veiga (TOCIBRAS) \n    TOCI \n    STD \n    14 \n    65 \n    6 \n    64 \n  \n  \n    Wang \n    REM \n    STD \n    22 \n    158 \n    10 \n    78 \n  \n\n\n\n\n\nThe corresponding network is displayed below:\n\n\n\n\n\nEvidence network of the 21 coronavirus-19 trials\n\n\n\n\nWe use the following command to calculate the log odds ratios and corresponding standard errors for each study:\n\ncovid <- pairwise(treat = treat, event = event, n = n, studlab = studlab, sm = \"OR\")\nhead(covid)\n\n\n\n\n\n \n  \n    TE \n    seTE \n    studlab \n    treat1 \n    treat2 \n    event1 \n    n1 \n    event2 \n    n2 \n    incr \n    allstudies \n  \n \n\n  \n    -0.0819293 \n    0.2483849 \n    Ader \n    REM \n    STD \n    34 \n    414 \n    37 \n    418 \n    0.0 \n    FALSE \n  \n  \n    -0.3483875 \n    0.1851030 \n    Beigel (ACTT-1) \n    REM \n    STD \n    59 \n    541 \n    77 \n    521 \n    0.0 \n    FALSE \n  \n  \n    0.4487619 \n    1.6487159 \n    Broman \n    TOCI \n    STD \n    1 \n    57 \n    0 \n    29 \n    0.5 \n    FALSE \n  \n  \n    -0.6620566 \n    0.7125543 \n    Criner \n    REM \n    STD \n    4 \n    384 \n    4 \n    200 \n    0.0 \n    FALSE \n  \n  \n    0.0170679 \n    0.4904898 \n    Declerq (COV-AID) \n    TOCI \n    STD \n    10 \n    81 \n    9 \n    74 \n    0.0 \n    FALSE \n  \n  \n    -0.4442338 \n    0.1688337 \n    Gordon (REMAP-CAP) \n    TOCI \n    STD \n    83 \n    353 \n    116 \n    358 \n    0.0 \n    FALSE \n  \n\n\n\n\n\nBelow, we conduct a random effects network meta-analysis where we consider standard care (STD) as the control treatment. Note that we have one study where zero cell counts occur, this study will not contribute to the NMA as the log odds ratio and its standard error cannot be determined.\n\nNMA.covid <- netmeta(TE = TE, seTE = seTE, treat1 = treat1, treat2 = treat2,\n                     studlab = studlab, data = covid, sm = \"OR\", ref = \"STD\",\n                     comb.random = TRUE, common = FALSE, warn = FALSE)\nNMA.covid \n\nNumber of studies: k = 20\nNumber of pairwise comparisons: m = 20\nNumber of treatments: n = 3\nNumber of designs: d = 2\n\nRandom effects model\n\nTreatment estimate (sm = 'OR', comparison: other treatments vs 'STD'):\n         OR           95%-CI     z p-value\nREM  0.8999 [0.8067; 1.0039] -1.89  0.0588\nSTD       .                .     .       .\nTOCI 0.8301 [0.7434; 0.9268] -3.31  0.0009\n\nQuantifying heterogeneity / inconsistency:\ntau^2 = 0; tau = 0; I^2 = 0% [0.0%; 48.9%]\n\nTests of heterogeneity (within designs) and inconsistency (between designs):\n                    Q d.f. p-value\nTotal           16.38   18  0.5663\nWithin designs  16.38   18  0.5663\nBetween designs  0.00    0      --\n\n\nA league table of the treatment effect estimates is given below:\n\nnetleague(NMA.covid)\n\nLeague table (random effects model):\n                                                                        \n                     REM 0.8999 [0.8067; 1.0039]                       .\n 0.8999 [0.8067; 1.0039]                     STD 1.2047 [1.0789; 1.3451]\n 1.0842 [0.9282; 1.2663] 1.2047 [1.0789; 1.3451]                    TOCI\n\n\nWe can also present the results in a forest plot:\n\n\n\n\n\nThe figure below shows the percentage of direct and indirect evidence used for each estimated comparison.\n\n\n\n\n\nWe now consider a Bayesian random effects network meta-analysis that analyzes the observed event counts using a binomial link function.\n\nbdata <- data.frame(study = studlab,\n                    treatment = treat,\n                    responders = event,\n                    sampleSize = n)\n\nnetwork <- mtc.network(data.ab  = bdata)\n\nmodel <- mtc.model(network,\n                   likelihood = \"binom\",\n                   link = \"log\",\n                   linearModel = \"random\",\n                   n.chain = 3)\n\n\n# Adaptation\nmcmc1 <- mtc.run(model, n.adapt = 1000, n.iter = 1000, thin = 10)\n\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 42\n   Unobserved stochastic nodes: 45\n   Total graph size: 930\n\nInitializing model\n\n# Sampling\nmcmc2 <- mtc.run(model, n.adapt = 10000, n.iter = 100000, thin = 10)\n\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 42\n   Unobserved stochastic nodes: 45\n   Total graph size: 930\n\nInitializing model\n\n\nWe can extract the pooled treatment effect estimates from the posterior distribution. When using STD as control group, we have:\n\nsummary(relative.effect(mcmc2, t1 = \"STD\"))\n\n\nResults on the Log Risk Ratio scale\n\nIterations = 10010:110000\nThinning interval = 10 \nNumber of chains = 3 \nSample size per chain = 10000 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n              Mean      SD  Naive SE Time-series SE\nd.STD.REM  -0.1086 0.09535 0.0005505      0.0008668\nd.STD.TOCI -0.1122 0.08231 0.0004752      0.0008885\nsd.d        0.1096 0.08677 0.0005010      0.0018468\n\n2. Quantiles for each variable:\n\n                2.5%      25%      50%      75%   97.5%\nd.STD.REM  -0.312017 -0.15983 -0.10475 -0.05362 0.07679\nd.STD.TOCI -0.258578 -0.16246 -0.11918 -0.07044 0.07730\nsd.d        0.003304  0.04183  0.09148  0.15683 0.32020\n\n\nThe corresponding odds ratios are as follows:\n\n\n\n\n \n  \n    Comparison \n    95% CrI \n  \n \n\n  \n    REM vs. STD \n    0.9 (0.73; 1.08) \n  \n  \n    TOCI vs. STD \n    0.89 (0.77; 1.08) \n  \n  \n    REM vs. TOCI \n    1.02 (0.75; 1.26) \n  \n\n\n\n\n\nFinally, we expand the COVID-19 network with trials investigating the effectiveness of hydroxychloroquine (HCQ), lopinavir/ritonavir (LOPI), dexamethasone (DEXA) or interferon-\\(\\beta\\) (INTB) (Selvarajan et al. 2022). The corresponding network is displayed below:\n\n\n\n\n\nEvidence network of the 33 coronavirus-19 trials\n\n\n\n\nWe conducted a random effects network meta-analysis, results are depicted below:\n\n\nNumber of studies: k = 33\nNumber of pairwise comparisons: m = 33\nNumber of treatments: n = 7\nNumber of designs: d = 6\n\nRandom effects model\n\nTreatment estimate (sm = 'OR', comparison: other treatments vs 'STD'):\n         OR           95%-CI     z p-value            95%-PI\nDEXA 0.8557 [0.7558; 0.9688] -2.46  0.0139  [0.7463; 0.9812]\nHCQ  1.1809 [0.8934; 1.5610]  1.17  0.2428  [0.8786; 1.5872]\nINTB 1.1606 [0.9732; 1.3841]  1.66  0.0973  [0.9604; 1.4026]\nLOPI 1.0072 [0.8906; 1.1392]  0.11  0.9085  [0.8794; 1.1537]\nREM  0.8983 [0.8014; 1.0070] -1.84  0.0658  [0.7913; 1.0199]\nSTD       .                .     .       .                 .\nTOCI 0.8304 [0.7410; 0.9306] -3.20  0.0014  [0.7316; 0.9426]\n\nQuantifying heterogeneity / inconsistency:\ntau^2 = 0.0004; tau = 0.0205; I^2 = 0.6% [0.0%; 42.3%]\n\nTests of heterogeneity (within designs) and inconsistency (between designs):\n                    Q d.f. p-value\nTotal           27.18   27  0.4543\nWithin designs  27.18   27  0.4543\nBetween designs  0.00    0      --\n\n\nWe can calculate the P score for each treatment as follows:\n\nnetrank(NMA.covidf)\n\n     P-score\nTOCI  0.9070\nDEXA  0.8357\nREM   0.7143\nSTD   0.4027\nLOPI  0.3899\nHCQ   0.1336\nINTB  0.1166\n\n\n\n\n6.3.2 Pharmacologic treatments for chronic obstructive pulmonary disease\nIn this example, we consider the resuls from a systematic review of randomized controlled trials on pharmacologic treatments for chronic obstructive pulmonary disease (Baker, Baker, and Coleman 2009). The primary outcome, occurrence of one or more episodes of COPD exacerbation, is binary (yes / no). For this outcome, five drug treatments (fluticasone, budesonide, salmeterol, formoterol, tiotropium) and two combinations (fluticasone + salmeterol, budesonide + formoterol) were compared to placebo. The authors considered the two combinations as separate treatments instead of evaluating the individual components.\n\ndata(Baker2009)\n\n\n\n\n\n \n  \n    study \n    year \n    id \n    treatment \n    exac \n    total \n  \n \n\n  \n    Llewellyn-Jones 1996 \n    1996 \n    1 \n    Fluticasone \n    0 \n    8 \n  \n  \n    Llewellyn-Jones 1996 \n    1996 \n    1 \n    Placebo \n    3 \n    8 \n  \n  \n    Boyd 1997 \n    1997 \n    2 \n    Salmeterol \n    47 \n    229 \n  \n  \n    Boyd 1997 \n    1997 \n    2 \n    Placebo \n    59 \n    227 \n  \n  \n    Paggiaro 1998 \n    1998 \n    3 \n    Fluticasone \n    45 \n    142 \n  \n  \n    Paggiaro 1998 \n    1998 \n    3 \n    Placebo \n    51 \n    139 \n  \n\n\n\n\n\n\nBaker <- pairwise(treat = treatment,\n                  event = exac,\n                  n = total,\n                  studlab = id,\n                  sm = \"OR\",\n                  data = Baker2009)\n\nNMA.COPD <- netmeta(TE = TE, seTE = seTE, treat1 = treat1, treat2 = treat2,\n                    studlab = studlab, data = Baker, sm=\"OR\", ref = \"Placebo\",\n                    comb.random = TRUE)\n\nWarning: Comparisons with missing TE / seTE or zero seTE not considered in\nnetwork meta-analysis.\n\n\nComparisons not considered in network meta-analysis:\n studlab                 treat1     treat2 TE seTE\n      39 Fluticasone+Salmeterol    Placebo NA   NA\n      39 Fluticasone+Salmeterol Salmeterol NA   NA\n      39             Salmeterol    Placebo NA   NA\n\nnetgraph(NMA.COPD)\n\n\n\n\n\n\n6.3.3 Advanced Therapies for Ulcerative Colitis\nIn this example, we consider a systematic literature review of Phase 3 randomized controlled trials investigating the following advanced therapies: infliximab, adalimumab, vedolizumab, golimumab, tofacitinib, ustekinumab, filgotinib, ozanimod, and upadacitinib (Panaccione et al. 2023). This review included 48 RCTs, from which 23 were found eligible for inclusion in a network meta-analysis. The included RCT populations were largely comparable in their baseline characteristics, though some heterogeneity was noted in weight, disease duration, extent of disease, and concomitant medications. A risk of bias assessment showed a low risk of bias for all included RCTs, which were all industry sponsored.\nWe here focus on the synthesis of 18 trials that contributed efficacy data for induction in bio-naive populations. The following FDA- and/or EMA-approved biologic or SMD doses were investigated:\n\nAdalimumab subcutaneous 160 mg at week 0, 80 mg at week 2, and 40 mg at week 4 (ADA160/80)\nInfliximab intravenous 5 mg/kg (INF5) at weeks 0, 2, and 6 then every 8 weeks\nInfliximab intravenous 10 mg/kg (INF10) at weeks 0, 2, and 6 then every 8 weeks\nFilgotinib oral 100 mg once daily (FIL100)\nFilgotinib oral 200 mg once daily (FIL200)\nGolimumab subcutaneous 200 mg at week 0 and 100 mg at week 2 (GOL200/100)\nOzanimod oral 0.23 mg once daily for 4 days, 0.46 mg once daily for 3 days, then 0.92 mg once daily (OZA0.92)\nTofacitinib oral 10 mg twice daily for 8 weeks (TOF10)\nUpadacitinib oral 45 mg once daily for 8 weeks (UPA45)\nUstekinumab intravenous 6 mg/kg at week 0 (UST6)\nVedolizumab intravenous 300 mg at weeks 0, 2, and 6 (VED300)\n\nThe reference treatment is placebo (PBO).\n\n\n\nEfficacy outcomes (i.e., clinical remission) data of induction bio-naïve populations\n \n  \n    studlab \n    treat1 \n    treat2 \n    event1 \n    n1 \n    event2 \n    n2 \n  \n \n\n  \n    ACT-1 \n    INF10 \n    INF5 \n    39 \n    122 \n    47 \n    121 \n  \n  \n    ACT-1 \n    INF10 \n    PBO \n    39 \n    122 \n    18 \n    121 \n  \n  \n    ACT-1 \n    INF5 \n    PBO \n    47 \n    121 \n    18 \n    121 \n  \n  \n    ACT-2 \n    INF10 \n    INF5 \n    33 \n    120 \n    41 \n    121 \n  \n  \n    ACT-2 \n    INF10 \n    PBO \n    33 \n    120 \n    7 \n    123 \n  \n  \n    ACT-2 \n    INF5 \n    PBO \n    41 \n    121 \n    7 \n    123 \n  \n  \n    GEMINI 1 \n    VED300 \n    PBO \n    30 \n    130 \n    5 \n    76 \n  \n  \n    Japic CTI-060298 \n    INF5 \n    PBO \n    21 \n    104 \n    11 \n    104 \n  \n  \n    Jiang 2015 \n    INF5 \n    PBO \n    22 \n    41 \n    9 \n    41 \n  \n  \n    M10-447 \n    ADA160/80 \n    PBO \n    9 \n    90 \n    11 \n    96 \n  \n  \n    NCT01551290 \n    INF5 \n    PBO \n    11 \n    50 \n    5 \n    49 \n  \n  \n    NCT02039505 \n    VED300 \n    PBO \n    22 \n    79 \n    6 \n    41 \n  \n  \n    OCTAVE 1 \n    TOF10 \n    PBO \n    56 \n    222 \n    9 \n    57 \n  \n  \n    OCTAVE 2 \n    TOF10 \n    PBO \n    43 \n    195 \n    4 \n    47 \n  \n  \n    PURSUIT-SC \n    GOL200/100 \n    PBO \n    45 \n    253 \n    16 \n    251 \n  \n  \n    SELECTION \n    FIL100 \n    FIL200 \n    47 \n    277 \n    60 \n    245 \n  \n  \n    SELECTION \n    FIL100 \n    PBO \n    47 \n    277 \n    17 \n    137 \n  \n  \n    SELECTION \n    FIL200 \n    PBO \n    60 \n    245 \n    17 \n    137 \n  \n  \n    TRUE NORTH \n    OZA0.92 \n    PBO \n    66 \n    299 \n    10 \n    151 \n  \n  \n    U-ACCOMPLISH \n    UPA45 \n    PBO \n    54 \n    166 \n    3 \n    81 \n  \n  \n    U-ACHIEVE Study 2 \n    UPA45 \n    PBO \n    41 \n    145 \n    4 \n    72 \n  \n  \n    ULTRA-1 \n    ADA160/80 \n    PBO \n    24 \n    130 \n    12 \n    130 \n  \n  \n    ULTRA-2 \n    ADA160/80 \n    PBO \n    32 \n    150 \n    16 \n    145 \n  \n  \n    UNIFI \n    UST6 \n    PBO \n    27 \n    147 \n    15 \n    151 \n  \n\n\n\n\n\nThe corresponding network is displayed below:\n\n\n\n\n\nEvidence network of 18 trials that contributed efficacy data for induction in bio-naive populations\n\n\n\n\nBelow, we conduct a random effects network meta-analysis of the reported study effects (expressed as odds ratio) and consider placebo (treat = \"PBO\") as the control treatment.\n\nNMA.uc <- netmeta(TE = TE, seTE = seTE, treat1 = treat1, treat2 = treat2,\n                  studlab = studlab, data = UlcerativeColitis, sm = \"OR\", \n                  ref = \"PBO\", common = FALSE, comb.random = TRUE)\nNMA.uc\n\nAll treatments except FIL100 and UST6 are significantly more efficacious than PBO at inducing clinical remission. We can now estimate the probabilities of each treatment being at each possible rank and the SUCRAs (Surface Under the Cumulative RAnking curve):\n\nsucra.uc <- rankogram(NMA.uc, nsim = 100, random = TRUE, common = FALSE, \n                      small.values = \"undesirable\")\n\n# Exctract the SUCRA values\nsucra.uc$ranking.random\n\n ADA160/80     FIL100     FIL200 GOL200/100      INF10       INF5    OZA0.92 \n0.27454545 0.19818182 0.41818182 0.63636364 0.59727273 0.74909091 0.77000000 \n       PBO      TOF10      UPA45       UST6     VED300 \n0.01727273 0.35727273 0.99181818 0.34545455 0.64454545 \n\n\nThese results indicate that 99.2% of the evaluated treatments are worse than UPA45."
  },
  {
    "objectID": "chapter_10.html#version-info",
    "href": "chapter_10.html#version-info",
    "title": "6  Systematic review and meta-analysis of Real-World Evidence",
    "section": "Version info",
    "text": "Version info\nThis chapter was rendered using the following version of R and its packages:\n\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dmetar_0.0.9000  netmeta_2.8-2    meta_6.5-0       gemtc_1.0-1     \n[5] coda_0.19-4      dplyr_1.1.2      kableExtra_1.3.4\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0    viridisLite_0.4.2   rjags_4-14         \n [4] fastmap_1.1.1       CompQuadForm_1.4.3  mathjaxr_1.6-0     \n [7] digest_0.6.31       lifecycle_1.0.3     cluster_2.1.4      \n[10] magrittr_2.0.3      kernlab_0.9-32      compiler_4.3.0     \n[13] rlang_1.1.1         tools_4.3.0         igraph_1.4.3       \n[16] utf8_1.2.3          yaml_2.3.7          knitr_1.43         \n[19] htmlwidgets_1.6.2   mclust_6.0.0        plyr_1.8.8         \n[22] xml2_1.3.4          abind_1.4-5         withr_2.5.0        \n[25] numDeriv_2016.8-1.1 nnet_7.3-19         grid_4.3.0         \n[28] stats4_4.3.0        fansi_1.0.4         colorspace_2.1-0   \n[31] ggplot2_3.4.2       scales_1.2.1        fpc_2.2-10         \n[34] MASS_7.3-60         prabclus_2.3-2      mvtnorm_1.2-2      \n[37] cli_3.6.1           rmarkdown_2.22      metafor_4.2-0      \n[40] generics_0.1.3      rstudioapi_0.14     robustbase_0.95-1  \n[43] httr_1.4.6          magic_1.6-1         minqa_1.2.5        \n[46] stringr_1.5.0       modeltools_0.2-23   splines_4.3.0      \n[49] rvest_1.0.3         metadat_1.2-0       parallel_4.3.0     \n[52] vctrs_0.6.2         boot_1.3-28.1       webshot_0.5.4      \n[55] Matrix_1.5-4.1      jsonlite_1.8.5      ggrepel_0.9.3      \n[58] systemfonts_1.0.4   diptest_0.76-0      glue_1.6.2         \n[61] nloptr_2.0.3        DEoptimR_1.0-14     codetools_0.2-19   \n[64] stringi_1.7.12      gtable_0.3.3        lme4_1.1-33        \n[67] munsell_0.5.0       tibble_3.2.1        pillar_1.9.0       \n[70] htmltools_0.5.5     R6_2.5.1            poibin_1.5         \n[73] evaluate_0.21       lattice_0.21-8      highr_0.10         \n[76] class_7.3-22        Rcpp_1.0.10         flexmix_2.3-19     \n[79] svglite_2.1.1       gridExtra_2.3       nlme_3.1-162       \n[82] MuMIn_1.47.5        xfun_0.39           pkgconfig_2.0.3"
  },
  {
    "objectID": "chapter_10.html#references",
    "href": "chapter_10.html#references",
    "title": "6  Systematic review and meta-analysis of Real-World Evidence",
    "section": "References",
    "text": "References\n\n\n\n\nBaker, William L, Erica L Baker, and Craig I Coleman. 2009. “Pharmacologic Treatments for Chronic Obstructive Pulmonary Disease: A Mixed-Treatment Comparison Meta-Analysis.” Pharmacotherapy 29 (8): 891–905. https://doi.org/10.1592/phco.29.8.891.\n\n\nPanaccione, Remo, Eric B Collins, Gil Y Melmed, Severine Vermeire, Silvio Danese, Peter D R Higgins, Christina S Kwon, et al. 2023. “Efficacy and Safety of Advanced Therapies for Moderately to Severely Active Ulcerative Colitis at Induction and Maintenance: An Indirect Treatment Comparison Using Bayesian Network Meta-Analysis.” Crohn’s & Colitis 360 5 (2). https://doi.org/10.1093/crocol/otad009.\n\n\nSelvarajan, Sandhiya, Annuja Anandaradje, Santhosh Shivabasappa, Deepthy Melepurakkal Sadanandan, N. Sreekumaran Nair, and Melvin George. 2022. “Efficacy of Pharmacological Interventions in COVID-19: A Network Meta-Analysis.” British Journal of Clinical Pharmacology 88 (9): 4080–91. https://doi.org/10.1111/bcp.15338.\n\n\nSiemieniuk, Reed AC, Jessica J Bartoszko, Dena Zeraatkar, Elena Kum, Anila Qasim, Juan Pablo Dı́az Martinez, Ariel Izcovich, et al. 2020. “Drug Treatments for Covid-19: Living Systematic Review and Network Meta-Analysis.” BMJ, July, m2980. https://doi.org/10.1136/bmj.m2980."
  },
  {
    "objectID": "chapter_12.html#introduction",
    "href": "chapter_12.html#introduction",
    "title": "7  Dealing with irregular and informative visits",
    "section": "7.1 Introduction",
    "text": "7.1 Introduction\nWe first load the required packages\n\nlibrary(dplyr)\nlibrary(broom)\nlibrary(ggplot2)\nlibrary(mice)\n\nSubsequently, we load the relevant R scripts:\n\nsource(\"resources/chapter12_sim.r\")\nsource(\"resources/chapter12_fig_functions.r\")\nsource(\"resources/chapter12_mlmi.r\")"
  },
  {
    "objectID": "chapter_12.html#example-dataset",
    "href": "chapter_12.html#example-dataset",
    "title": "7  Dealing with irregular and informative visits",
    "section": "7.2 Example dataset",
    "text": "7.2 Example dataset\nBelow, we generate an example dataset that contains information on the treatment allocation x and three baseline covariates age, sex and edss (EDSS at treatment start). The discrete outcome y represents the Expanded Disability Status Scale (EDSS) score after time months of treatment exposure. Briefly, the EDSS is a semi-continuous measure that varies from 0 (no disability) to 10 (death).\n\nset.seed(9843626)\n\ndataset  <- sim_data_EDSS(npatients = 500,\n                          ncenters = 10,\n                          follow_up = 12*5, # Total follow-up (number of months)\n                          sd_a_t = 0.5,   # DGM - Within-visit variation in EDSS scores\n                          baseline_EDSS = 1.3295,    # DGM - Mean baseline EDDS score\n                          sd_alpha_ij = 1.46,    # DGM - Between-subject variation in baseline EDSS\n                          sd_beta1_j = 0.20,    # DGM - Between-site variation in baseline EDSS\n                          mean_age = 42.41,\n                          sd_age = 10.53,\n                          min_age = 18,\n                          beta_age = 0.05, # DGM - prognostic effect of age\n                          beta_t = 0.014,  # DGM - prognostic effect of time\n                          beta_t2 = 0,    # DGM - prognostic effect of time squared\n                          delta_xt = 0, # DGM - interaction treatment time\n                          delta_xt2 = 0, # 0.0005    # DGM - interaction treatment time2\n                          p_female = 0.75, \n                          beta_female = -0.2 ,  ## DGM - prognostic effect of male sex\n                          delta_xf = 0,      ## DGM - interaction sex treatment       \n                          rho = 0.8,             # DGM - autocorrelation of between alpha_tij\n                          corFUN = corAR1,       # DGM - correlation structure of the latent EDSS scores\n                          tx_alloc_FUN = treatment_alloc_confounding_v2 ) ## or treatment_alloc_randomized\n\n\n\n\n\n\nDistribution of the EDSS score at each time point\n\n\n\n\nWe remove the outcome y according to the informative visit process that depends on the received treatment, gender, and age.\n\ndataset_visit <- censor_visits_a5(dataset, seed = 12345) %>% \n  dplyr::select(-y) %>%\n  mutate(time_x = time*x)\n\n\n\n\nIn the censored data, a total of 17 out of 5000 patients have a visit at time=60."
  },
  {
    "objectID": "chapter_12.html#estimation-of-treatment-effect",
    "href": "chapter_12.html#estimation-of-treatment-effect",
    "title": "7  Dealing with irregular and informative visits",
    "section": "7.3 Estimation of treatment effect",
    "text": "7.3 Estimation of treatment effect\nWe will estimate the marginal treatment effect at time time=60.\n\n7.3.1 Original data\n\norigdat60 <- dataset %>% filter(time == 60)\n\n# Predict probability of treatment allocation\nfitps <- glm(x ~ age + sex + edss, family = 'binomial', \n             data = origdat60)\n\n# Derive the propensity score\norigdat60 <- origdat60 %>% mutate(ipt = ifelse(x == 1, 1/predict(fitps, type = 'response'),\n                                               1/(1-predict(fitps, type = 'response'))))\n\n# Estimate \nfit_ref_m <- tidy(lm(y ~ x, weight = ipt, data = origdat60), conf.int = TRUE) \n\n\n\n\n\n\n7.3.2 Doubly-weighted marginal treatment effect\n\nobsdat60 <- dataset_visit %>% mutate(visit = ifelse(is.na(y_obs),0,1)) %>% filter(time == 60)\n\ngamma <- glm(visit ~ x + sex + age + edss, family = 'binomial', data = obsdat60)$coef   \n\nobsdat60 <- obsdat60 %>% mutate(rho_i = 1/exp(gamma[\"(Intercept)\"] +\n                                                          gamma[\"x\"]*x +\n                                                          gamma[\"sex\"]*sex +\n                                                          gamma[\"age\"]*age))\n\n# Predict probability of treatment allocation\nfitps <- glm(x ~ age + sex + edss, family='binomial', data = obsdat60)\n\n# Derive the propensity score\nobsdat60 <- obsdat60 %>% mutate(ipt = ifelse(x==1, 1/predict(fitps, type='response'),\n                                            1/(1-predict(fitps, type='response'))))\n\n\nfit_w <- tidy(lm(y_obs ~ x, weights = ipt*rho_i, data = obsdat60), conf.int = TRUE)\n\n\n\n\n\n\n7.3.3 Multilevel multiple imputation\nWe adopt the imputation approach proposed by Debray et al. (2023). Briefly, we impute the entire vector of y_obs for all 61 potential visits and generate 10 imputed datasets. Note: mlmi currently does not support imputation of treatment-covariate interaction terms.\n\nimp <- impute_y_mice_3l(dataset_visit, seed = 12345)\n\n\n\n\nWe can now estimate the treatment effect in each imputed dataset\n\n# Predict probability of treatment allocation\nfitps <- glm(x ~ age + sex + edss, family='binomial', data = dataset_visit)\n  \n# Derive the propensity score\ndataset_visit <- dataset_visit %>% mutate(ipt = ifelse(x==1, 1/predict(fitps, type='response'),\n                                                       1/(1-predict(fitps, type='response'))))\n  \nQ <- U <- rep(NA, 10) # Error variances\n\nfor (i in seq(10)) {\n  dati <- cbind(dataset_visit[,c(\"x\",\"ipt\",\"time\")], y_imp = imp[,i]) %>% filter(time == 60)\n  \n  # Estimate \n  fit <- tidy(lm(y_imp ~ x, weight = ipt, data = dati), conf.int = TRUE) \n  \n  Q[i] <- fit %>% filter(term == \"x\") %>% pull(estimate)\n  U[i] <- (fit %>% filter(term == \"x\") %>% pull(std.error))**2\n}\n\nfit_mlmi <- pool.scalar(Q = Q, U = U)"
  },
  {
    "objectID": "chapter_12.html#reproduce-the-results-using-all-data-to-compute-the-marginal-effect-with-iiv-weighted",
    "href": "chapter_12.html#reproduce-the-results-using-all-data-to-compute-the-marginal-effect-with-iiv-weighted",
    "title": "7  Dealing with irregular and informative visits",
    "section": "7.4 Reproduce the results using all data to compute the marginal effect with IIV-weighted",
    "text": "7.4 Reproduce the results using all data to compute the marginal effect with IIV-weighted\n\n7.4.1 Doubly -weighted marginal treatment effect total\n\nobsdatall <- dataset_visit %>% mutate(visit = ifelse(is.na(y_obs),0,1))  \ngamma <- glm(visit ~ x + sex + age + edss, family = 'binomial', data = obsdatall)$coef   \nobsdatall <- obsdatall %>% mutate(rho_i = 1/exp(gamma[\"(Intercept)\"] +\n                                                gamma[\"x\"]*x +\n                                                gamma[\"sex\"]*sex +\n                                                gamma[\"age\"]*age))\n# Predict probability of treatment allocation\nfitps <- glm(x ~ age + sex + edss, family='binomial', data = obsdatall)\n# Derive the propensity score\nobsdatall <- obsdatall %>% mutate(ipt = ifelse(x==1, 1/predict(fitps, type='response'),\n                                             1/(1-predict(fitps, type='response'))))\nfit_w <- tidy(lm(y_obs ~ x, weights = ipt*rho_i, data = obsdatall), conf.int = TRUE)"
  },
  {
    "objectID": "chapter_12.html#results",
    "href": "chapter_12.html#results",
    "title": "7  Dealing with irregular and informative visits",
    "section": "7.5 Results",
    "text": "7.5 Results"
  },
  {
    "objectID": "chapter_12.html#version-info",
    "href": "chapter_12.html#version-info",
    "title": "7  Dealing with irregular and informative visits",
    "section": "Version info",
    "text": "Version info\nThis chapter was rendered using the following version of R and its packages:\n\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] broom_1.0.5     mice_3.16.0     ggplot2_3.4.2   dplyr_1.1.2    \n[5] truncnorm_1.0-9 MASS_7.3-60     nlme_3.1-162   \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3        generics_0.1.3    tidyr_1.3.0       shape_1.4.6      \n [5] lattice_0.21-8    lme4_1.1-33       digest_0.6.31     magrittr_2.0.3   \n [9] mitml_0.4-5       evaluate_0.21     grid_4.3.0        iterators_1.0.14 \n[13] fastmap_1.1.1     foreach_1.5.2     jomo_2.7-6        jsonlite_1.8.5   \n[17] glmnet_4.1-7      Matrix_1.5-4.1    nnet_7.3-19       backports_1.4.1  \n[21] survival_3.5-5    purrr_1.0.1       fansi_1.0.4       scales_1.2.1     \n[25] codetools_0.2-19  cli_3.6.1         rlang_1.1.1       munsell_0.5.0    \n[29] splines_4.3.0     withr_2.5.0       yaml_2.3.7        pan_1.6          \n[33] tools_4.3.0       nloptr_2.0.3      minqa_1.2.5       colorspace_2.1-0 \n[37] boot_1.3-28.1     rpart_4.1.19      vctrs_0.6.2       R6_2.5.1         \n[41] lifecycle_1.0.3   htmlwidgets_1.6.2 pkgconfig_2.0.3   pillar_1.9.0     \n[45] gtable_0.3.3      glue_1.6.2        Rcpp_1.0.10       xfun_0.39        \n[49] tibble_3.2.1      tidyselect_1.2.0  rstudioapi_0.14   knitr_1.43       \n[53] htmltools_0.5.5   rmarkdown_2.22    compiler_4.3.0"
  },
  {
    "objectID": "chapter_12.html#references",
    "href": "chapter_12.html#references",
    "title": "7  Dealing with irregular and informative visits",
    "section": "References",
    "text": "References\n\n\n\n\nDebray, Thomas PA, Gabrielle Simoneau, Massimiliano Copetti, Robert W Platt, Changyu Shen, Fabio Pellegrini, and Carl de Moor. 2023. “Methods for Comparative Effectiveness Based on Time to Confirmed Disability Progression with Irregular Observations in Multiple Sclerosis.” Statistical Methods in Medical Research, June, 096228022311720. https://doi.org/10.1177/09622802231172032."
  },
  {
    "objectID": "chapter_16.html#estimating-heterogeneous-treatment-effects-in-pairwise-meta-analysis",
    "href": "chapter_16.html#estimating-heterogeneous-treatment-effects-in-pairwise-meta-analysis",
    "title": "8  Prediction of individual treatment effect using data from multiple studies",
    "section": "8.1 Estimating heterogeneous treatment effects in pairwise meta-analysis",
    "text": "8.1 Estimating heterogeneous treatment effects in pairwise meta-analysis\n\n\n\nWe hereby provide code for estimating patient-level treatment effects for the case when we have patient-level data from multiple randomized trials.\n\n8.1.1 Example of a continuous outcome\n\n8.1.1.1 Setup\nWe start by simulating an artificial dataset using the R package bipd:\n\nlibrary(bipd)\nds <- generate_ipdma_example(type = \"continuous\")\n\nLet us have a look at the dataset:\n\nhead(ds)\n\n  studyid treat         z1         z2  y\n1       1     1  1.1642912 -0.9486568  9\n2       1     1  1.5232465  1.3111442 11\n3       1     1 -0.1795332  0.2887046 11\n4       1     1  0.9617067  0.8512416 11\n5       1     1 -1.2003287 -0.4772992 11\n6       1     1 -2.2557623  0.5075769 13\n\n\nThe simulated dataset contains information on the following variables:\n\nthe trial indicator studyid\nthe treatment indicator treat, which takes the values 0 for control and 1 for active treatment\ntwo prognostic variables z1 and z2\nthe continuous outcome y\n\n\n\n\n\nTable 8.1:  The simulated dataset with a continuous outcome \n\n\n\n0(N=276)\n1(N=324)\nOverall(N=600)\n\n\n\n\nz1\n\n\n\n\n\nMean (SD)\n-0.0173 (0.990)\n0.000773 (1.02)\n-0.00754 (1.01)\n\n\nMedian [Min, Max]\n-0.0848 [-2.62, 2.65]\n0.0310 [-2.62, 3.27]\n-0.0307 [-2.62, 3.27]\n\n\nz2\n\n\n\n\n\nMean (SD)\n0.0411 (0.966)\n-0.0661 (1.01)\n-0.0168 (0.989)\n\n\nMedian [Min, Max]\n0.0688 [-2.39, 2.43]\n-0.0784 [-3.23, 2.16]\n-0.0135 [-3.23, 2.43]\n\n\nstudyid\n\n\n\n\n\n1\n38 (13.8%)\n62 (19.1%)\n100 (16.7%)\n\n\n2\n42 (15.2%)\n58 (17.9%)\n100 (16.7%)\n\n\n3\n55 (19.9%)\n45 (13.9%)\n100 (16.7%)\n\n\n4\n46 (16.7%)\n54 (16.7%)\n100 (16.7%)\n\n\n5\n47 (17.0%)\n53 (16.4%)\n100 (16.7%)\n\n\n6\n48 (17.4%)\n52 (16.0%)\n100 (16.7%)\n\n\n\n\n\n\n\n\n\n8.1.1.2 Model fitting\nWe synthesize the evidence using a Bayesian random effects meta-analysis model. The model is given in Equation 16.7 of the book. First we need set up the data and create the model:\n\nipd <- with(ds, ipdma.model.onestage(y = y, study = studyid, treat = treat,\n                                     X = cbind(z1, z2), \n                                     response = \"normal\", \n                                     shrinkage = \"none\"), \n                                     type=\"random\")\n\nThe JAGS model can be accessed as follows:\n\nipd$model.JAGS\n\nfunction () \n{\n    for (i in 1:Np) {\n        y[i] ~ dnorm(mu[i], sigma)\n        mu[i] <- alpha[studyid[i]] + inprod(beta[], X[i, ]) + \n            (1 - equals(treat[i], 1)) * inprod(gamma[], X[i, \n                ]) + d[studyid[i], treat[i]]\n    }\n    sigma ~ dgamma(0.001, 0.001)\n    for (j in 1:Nstudies) {\n        d[j, 1] <- 0\n        d[j, 2] ~ dnorm(delta[2], tau)\n    }\n    sd ~ dnorm(0, 1)\n    T(0, )\n    tau <- pow(sd, -2)\n    delta[1] <- 0\n    delta[2] ~ dnorm(0, 0.001)\n    for (j in 1:Nstudies) {\n        alpha[j] ~ dnorm(0, 0.001)\n    }\n    for (k in 1:Ncovariate) {\n        beta[k] ~ dnorm(0, 0.001)\n    }\n    for (k in 1:Ncovariate) {\n        gamma[k] ~ dnorm(0, 0.001)\n    }\n}\n<environment: 0x12c15a200>\n\n\nWe can fit the treatment effect model as follows:\n\nsamples <- ipd.run(ipd, n.chains = 2, n.iter = 20,\n                   pars.save = c(\"alpha\", \"beta\", \"delta\", \"sd\", \"gamma\"))\n\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 600\n   Unobserved stochastic nodes: 19\n   Total graph size: 6034\n\nInitializing model\n\n\nHere are the estimated model parameters:\n\nsummary(samples)\n\n\nIterations = 2001:2020\nThinning interval = 1 \nNumber of chains = 2 \nSample size per chain = 20 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n            Mean      SD Naive SE Time-series SE\nalpha[1] 10.9450 0.06515 0.010301       0.012105\nalpha[2]  8.0115 0.05190 0.008205       0.010651\nalpha[3] 10.5409 0.03813 0.006029       0.005467\nalpha[4]  9.5558 0.04643 0.007341       0.010109\nalpha[5] 12.9465 0.04911 0.007765       0.010510\nalpha[6] 15.7185 0.06176 0.009765       0.020890\nbeta[1]   0.2210 0.01766 0.002792       0.005891\nbeta[2]   0.3416 0.01939 0.003066       0.003671\ndelta[1]  0.0000 0.00000 0.000000       0.000000\ndelta[2] -1.1052 0.58455 0.092425       0.074177\ngamma[1] -0.5339 0.02473 0.003910       0.007384\ngamma[2]  0.5262 0.02200 0.003478       0.004608\nsd        1.4177 0.43872 0.069368       0.092464\n\n2. Quantiles for each variable:\n\n            2.5%     25%     50%     75%    97.5%\nalpha[1] 10.8511 10.8994 10.9346 10.9825 11.07249\nalpha[2]  7.9268  7.9740  8.0175  8.0444  8.09694\nalpha[3] 10.4746 10.5093 10.5406 10.5671 10.61459\nalpha[4]  9.4813  9.5181  9.5485  9.5883  9.63088\nalpha[5] 12.8731 12.9143 12.9423 12.9757 13.02449\nalpha[6] 15.6024 15.6768 15.7389 15.7642 15.80692\nbeta[1]   0.1884  0.2141  0.2201  0.2302  0.25448\nbeta[2]   0.3136  0.3266  0.3389  0.3560  0.37256\ndelta[1]  0.0000  0.0000  0.0000  0.0000  0.00000\ndelta[2] -2.3152 -1.4236 -1.0833 -0.7642 -0.09753\ngamma[1] -0.5784 -0.5417 -0.5325 -0.5206 -0.48444\ngamma[2]  0.4891  0.5124  0.5264  0.5415  0.56855\nsd        0.9002  1.1291  1.3094  1.5591  2.42119\n\n\n\n\n8.1.1.3 Prection\nWe can now predict the individualized treatment effect for a new patient with covariate values z1=1 and z2=0.5.\n\nround(treatment.effect(ipd, samples, newpatient = c(z1 = 1, z2 = 0.5)), 2)\n\n0.025   0.5 0.975 \n-2.58 -1.34 -0.40 \n\n\nWe can also predict treatment benefit for all patients in the sample, and look at the distribution of predicted benefit.\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\nds <- ds %>% mutate(benefit = NA)\n\nfor (i in seq(nrow(ds))) {\n  newpat <- as.matrix(ds[i, c(\"z1\", \"z2\")])\n  ds$benefit[i] <- treatment.effect(ipd, samples, newpatient = newpat)[\"0.5\"]\n}\n\nggplot(ds, aes(x = benefit)) + geom_histogram() + facet_wrap(~studyid) + \n  xlab(\"Predicted treatment benefit\")\n\n\n\n\nFigure 8.1: Distribution of predicted treatment benefit in each trial\n\n\n\n\n\n\n8.1.1.4 Penalization\nLet us repeat the analysis, but this time while penalizing the treatment-covariate coefficients using a Bayesian LASSO prior.\n\nipd <- with(ds, ipdma.model.onestage(y = y, study = studyid, \n                                     treat = treat,\n                                     X = cbind(z1, z2), \n                                     response = \"normal\", \n                                     shrinkage = \"laplace\"), \n            type = \"random\")\n\nsamples <- ipd.run(ipd, n.chains = 2, n.iter = 20, \n                   pars.save = c(\"alpha\", \"beta\", \"delta\", \"sd\", \"gamma\"))\n\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 600\n   Unobserved stochastic nodes: 20\n   Total graph size: 6039\n\nInitializing model\n\nround(treatment.effect(ipd, samples, newpatient = c(1,0.5)), 2)\n\n0.025   0.5 0.975 \n-2.64 -1.35 -0.34 \n\n\n\n\n\n8.1.2 Example of a binary outcome\n\n8.1.2.1 Setup\nWe now present the case of a binary outcome. We first generate a dataset as before, using the bipd package.\n\nds2 <- generate_ipdma_example(type = \"binary\")\nhead(ds2)\n\n  studyid treat         w1         w2 y\n1       1     1  1.2348841 -0.1098057 0\n2       1     0 -0.2114534 -0.7159289 1\n3       1     1  0.5393805  0.7514385 0\n4       1     0 -0.1961923  0.8575632 1\n5       1     1 -1.2056298  0.1189175 0\n6       1     0 -0.7712074 -0.6583824 1\n\n\nThe simulated dataset contains information on the following variables:\n\nthe trial indicator studyid\nthe treatment indicator treat, which takes the values 0 for control and 1 for active treatment\ntwo prognostic variables w1 and w2\nthe binary outcome y\n\n\n\n\n\nTable 8.2:  The simulated dataset with a binary outcome \n\n\n\n0(N=320)\n1(N=280)\nOverall(N=600)\n\n\n\n\nw1\n\n\n\n\n\nMean (SD)\n0.0748 (1.04)\n0.0109 (0.940)\n0.0450 (0.995)\n\n\nMedian [Min, Max]\n0.0710 [-3.43, 3.18]\n0.0279 [-3.38, 2.37]\n0.0522 [-3.43, 3.18]\n\n\nw2\n\n\n\n\n\nMean (SD)\n-0.0147 (0.975)\n-0.155 (0.963)\n-0.0802 (0.971)\n\n\nMedian [Min, Max]\n-0.0275 [-3.08, 2.98]\n-0.111 [-3.15, 2.46]\n-0.0728 [-3.15, 2.98]\n\n\nstudyid\n\n\n\n\n\n1\n52 (16.3%)\n48 (17.1%)\n100 (16.7%)\n\n\n2\n53 (16.6%)\n47 (16.8%)\n100 (16.7%)\n\n\n3\n56 (17.5%)\n44 (15.7%)\n100 (16.7%)\n\n\n4\n55 (17.2%)\n45 (16.1%)\n100 (16.7%)\n\n\n5\n50 (15.6%)\n50 (17.9%)\n100 (16.7%)\n\n\n6\n54 (16.9%)\n46 (16.4%)\n100 (16.7%)\n\n\n\n\n\n\n\n\n\n8.1.2.2 Model fitting\nWe use a Bayesian random effects model with binomial likelihood. This is similar to the model 16.7 of the book, but with a Binomial likelihood, i.e. \n\\[\ny_{ij}\\sim Binomial(\\pi_{ij}) \\\\\n\\] \\[\nlogit(\\pi_{ij})==a_j+\\delta_j t_{ij}+ \\sum_{l=1}^{L}\\beta_l x_{ij}+ \\sum_{l=1}^{L}\\gamma_l x_{ij} t_{ij}\n\\] The remaining of the model is as in the book. We can penalize the estimated parameters for effect modification (\\(\\gamma\\)’s), using a Bayesian LASSO. We can do this using again the bipd package:\n\nipd2 <- with(ds2, ipdma.model.onestage(y = y, study = studyid, treat = treat,\n                                       X = cbind(w1, w2), \n                                       response = \"binomial\", \n                                       shrinkage = \"laplace\"), \n             type=\"random\", hy.prior = list(\"dunif\", 0, 1))\n\nipd2$model.JAGS\n\nfunction () \n{\n    for (i in 1:Np) {\n        y[i] ~ dbern(p[i])\n        logit(p[i]) <- alpha[studyid[i]] + inprod(beta[], X[i, \n            ]) + (1 - equals(treat[i], 1)) * inprod(gamma[], \n            X[i, ]) + d[studyid[i], treat[i]]\n    }\n    for (j in 1:Nstudies) {\n        d[j, 1] <- 0\n        d[j, 2] ~ dnorm(delta[2], tau)\n    }\n    sd ~ dnorm(0, 1)\n    T(0, )\n    tau <- pow(sd, -2)\n    delta[1] <- 0\n    delta[2] ~ dnorm(0, 0.001)\n    for (j in 1:Nstudies) {\n        alpha[j] ~ dnorm(0, 0.001)\n    }\n    for (k in 1:Ncovariate) {\n        beta[k] ~ dnorm(0, 0.001)\n    }\n    tt <- lambda\n    lambda <- pow(lambda.inv, -1)\n    lambda.inv ~ dunif(0, 5)\n    for (k in 1:Ncovariate) {\n        gamma[k] ~ ddexp(0, tt)\n    }\n}\n<environment: 0x138435660>\n\nsamples <- ipd.run(ipd2, n.chains = 2, n.iter = 20, \n                   pars.save = c(\"alpha\", \"beta\", \"delta\", \"sd\", \"gamma\"))\n\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 600\n   Unobserved stochastic nodes: 19\n   Total graph size: 6637\n\nInitializing model\n\nsummary(samples)\n\n\nIterations = 2001:2020\nThinning interval = 1 \nNumber of chains = 2 \nSample size per chain = 20 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n              Mean     SD Naive SE Time-series SE\nalpha[1] -0.088323 0.2837  0.04486        0.06200\nalpha[2] -0.235260 0.1954  0.03089        0.02872\nalpha[3] -0.271482 0.2750  0.04348        0.03813\nalpha[4] -0.434424 0.1714  0.02710        0.04101\nalpha[5] -0.345732 0.3062  0.04842        0.12429\nalpha[6] -0.165075 0.2268  0.03586        0.04867\nbeta[1]   0.004152 0.1170  0.01850        0.02934\nbeta[2]   0.089936 0.1001  0.01583        0.01598\ndelta[1]  0.000000 0.0000  0.00000        0.00000\ndelta[2] -0.437342 0.2357  0.03727        0.06780\ngamma[1] -0.148123 0.1868  0.02953        0.04920\ngamma[2]  0.081341 0.1205  0.01905        0.03054\nsd        0.476797 0.2766  0.04373        0.08804\n\n2. Quantiles for each variable:\n\n             2.5%       25%      50%      75%    97.5%\nalpha[1] -0.57711 -0.297283 -0.17222  0.09748  0.50827\nalpha[2] -0.59140 -0.345855 -0.23250 -0.10252  0.05752\nalpha[3] -0.76124 -0.480497 -0.26928 -0.09432  0.17662\nalpha[4] -0.73306 -0.545207 -0.44454 -0.33338 -0.13886\nalpha[5] -0.82528 -0.592503 -0.35199 -0.14350  0.19296\nalpha[6] -0.55350 -0.278866 -0.18640 -0.06058  0.26372\nbeta[1]  -0.28850 -0.019802  0.01892  0.05921  0.18731\nbeta[2]  -0.12251  0.050119  0.09590  0.15407  0.25121\ndelta[1]  0.00000  0.000000  0.00000  0.00000  0.00000\ndelta[2] -0.80549 -0.641899 -0.41840 -0.29628 -0.03238\ngamma[1] -0.44217 -0.264725 -0.14568 -0.04572  0.22144\ngamma[2] -0.13483 -0.001354  0.08661  0.15723  0.26767\nsd        0.05541  0.297080  0.49851  0.60922  1.12323\n\nround(treatment.effect(ipd2, samples, newpatient = c(w1= 1.6, w2 = 1.3)), 2)\n\n0.025   0.5 0.975 \n 0.29  0.55  1.44"
  },
  {
    "objectID": "chapter_16.html#estimating-heterogeous-treatment-effects-in-network-meta-analysis",
    "href": "chapter_16.html#estimating-heterogeous-treatment-effects-in-network-meta-analysis",
    "title": "8  Prediction of individual treatment effect using data from multiple studies",
    "section": "8.2 Estimating heterogeous treatment effects in network meta-analysis",
    "text": "8.2 Estimating heterogeous treatment effects in network meta-analysis\n\n8.2.1 Example of a continuous outcome\n\n8.2.1.1 Setup\nWe use again the bipd package to simulate a dataset:\n\nds3 <- generate_ipdnma_example(type = \"continuous\")\nhead(ds3)\n\n  studyid treat         z1         z2  y\n1       1     1  0.7159763  0.5096912 11\n2       1     2  2.2092414  0.5843095  7\n3       1     2 -1.7926747  0.7969746 10\n4       1     1 -0.1484322 -0.1705168 11\n5       1     1 -1.8861304  1.0248395 11\n6       1     2  0.3296809 -1.5176093  6\n\n\nLet us look into the data a bit in more detail:\n\n\n\n\nTable 8.3:  The simulated dataset with a continuous outcome \n\n\n\n1(N=336)\n2(N=366)\n3(N=298)\nOverall(N=1000)\n\n\n\n\nz1\n\n\n\n\n\n\nMean (SD)\n-0.0638 (1.03)\n-0.0358 (0.950)\n-0.0537 (0.998)\n-0.0505 (0.993)\n\n\nMedian [Min, Max]\n-0.104 [-3.74, 3.97]\n-0.0297 [-2.82, 2.50]\n-0.0235 [-2.42, 2.81]\n-0.0526 [-3.74, 3.97]\n\n\nz2\n\n\n\n\n\n\nMean (SD)\n0.00405 (1.02)\n-0.0178 (1.04)\n0.0875 (1.00)\n0.0209 (1.02)\n\n\nMedian [Min, Max]\n-0.0341 [-3.51, 2.78]\n0.0213 [-2.94, 2.35]\n0.143 [-2.60, 2.96]\n0.0325 [-3.51, 2.96]\n\n\nstudyid\n\n\n\n\n\n\n1\n47 (14.0%)\n53 (14.5%)\n0 (0%)\n100 (10.0%)\n\n\n2\n48 (14.3%)\n52 (14.2%)\n0 (0%)\n100 (10.0%)\n\n\n3\n48 (14.3%)\n52 (14.2%)\n0 (0%)\n100 (10.0%)\n\n\n4\n49 (14.6%)\n0 (0%)\n51 (17.1%)\n100 (10.0%)\n\n\n5\n55 (16.4%)\n0 (0%)\n45 (15.1%)\n100 (10.0%)\n\n\n6\n0 (0%)\n56 (15.3%)\n44 (14.8%)\n100 (10.0%)\n\n\n7\n0 (0%)\n52 (14.2%)\n48 (16.1%)\n100 (10.0%)\n\n\n8\n27 (8.0%)\n41 (11.2%)\n32 (10.7%)\n100 (10.0%)\n\n\n9\n30 (8.9%)\n34 (9.3%)\n36 (12.1%)\n100 (10.0%)\n\n\n10\n32 (9.5%)\n26 (7.1%)\n42 (14.1%)\n100 (10.0%)\n\n\n\n\n\n\n\n\n\n8.2.1.2 Model fitting\nWe will use the model shown in Equation 16.8 in the book. In addition, we will use Bayesian LASSO to penalize the treatment-covariate interactions.\n\nipd3 <- with(ds3, ipdnma.model.onestage(y = y, study = studyid, treat = treat, \n                                        X = cbind(z1, z2), \n                                        response = \"normal\", \n                                        shrinkage = \"laplace\", \n                                        type = \"random\"))\nipd3$model.JAGS\n\nfunction () \n{\n    for (i in 1:Np) {\n        y[i] ~ dnorm(mu[i], sigma)\n        mu[i] <- alpha[studyid[i]] + inprod(beta[], X[i, ]) + \n            inprod(gamma[treat[i], ], X[i, ]) + d[studyid[i], \n            treatment.arm[i]]\n    }\n    sigma ~ dgamma(0.001, 0.001)\n    for (i in 1:Nstudies) {\n        w[i, 1] <- 0\n        d[i, 1] <- 0\n        for (k in 2:na[i]) {\n            d[i, k] ~ dnorm(mdelta[i, k], taudelta[i, k])\n            mdelta[i, k] <- delta[t[i, k]] - delta[t[i, 1]] + \n                sw[i, k]\n            taudelta[i, k] <- tau * 2 * (k - 1)/k\n            w[i, k] <- d[i, k] - delta[t[i, k]] + delta[t[i, \n                1]]\n            sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)\n        }\n    }\n    sd ~ dnorm(0, 1)\n    T(0, )\n    tau <- pow(sd, -2)\n    delta[1] <- 0\n    for (k in 2:Ntreat) {\n        delta[k] ~ dnorm(0, 0.001)\n    }\n    for (j in 1:Nstudies) {\n        alpha[j] ~ dnorm(0, 0.001)\n    }\n    for (k in 1:Ncovariate) {\n        beta[k] ~ dnorm(0, 0.001)\n    }\n    lambda[1] <- 0\n    lambda.inv[1] <- 0\n    for (m in 2:Ntreat) {\n        tt[m] <- lambda[m] * sigma\n        lambda[m] <- pow(lambda.inv[m], -1)\n        lambda.inv[m] ~ dunif(0, 5)\n    }\n    for (k in 1:Ncovariate) {\n        gamma[1, k] <- 0\n        for (m in 2:Ntreat) {\n            gamma[m, k] ~ ddexp(0, tt[m])\n        }\n    }\n}\n<environment: 0x12ed8f8a8>\n\nsamples <- ipd.run(ipd3, n.chains = 2, n.iter = 20, \n                   pars.save = c(\"alpha\", \"beta\", \"delta\", \"sd\", \"gamma\"))\n\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 1000\n   Unobserved stochastic nodes: 35\n   Total graph size: 10141\n\nInitializing model\n\nsummary(samples)\n\n\nIterations = 2001:2020\nThinning interval = 1 \nNumber of chains = 2 \nSample size per chain = 20 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n              Mean      SD Naive SE Time-series SE\nalpha[1]   11.0297 0.04192 0.006628       0.004903\nalpha[2]    8.0406 0.04583 0.007247       0.009451\nalpha[3]   10.5530 0.05798 0.009167       0.014950\nalpha[4]    9.6149 0.04081 0.006453       0.005413\nalpha[5]   12.9261 0.04784 0.007564       0.006455\nalpha[6]   13.2328 0.03679 0.005817       0.005876\nalpha[7]    7.4520 0.05143 0.008132       0.011206\nalpha[8]   11.1859 0.07083 0.011200       0.029635\nalpha[9]   10.2376 0.04777 0.007553       0.012233\nalpha[10]   9.1901 0.05956 0.009418       0.015423\nbeta[1]     0.1981 0.01357 0.002146       0.002323\nbeta[2]     0.3204 0.01843 0.002914       0.003937\ndelta[1]    0.0000 0.00000 0.000000       0.000000\ndelta[2]   -2.9844 0.08497 0.013435       0.016051\ndelta[3]   -1.1616 0.08584 0.013573       0.017027\ngamma[1,1]  0.0000 0.00000 0.000000       0.000000\ngamma[2,1] -0.5819 0.02252 0.003560       0.002695\ngamma[3,1] -0.2976 0.02300 0.003637       0.003229\ngamma[1,2]  0.0000 0.00000 0.000000       0.000000\ngamma[2,2]  0.5585 0.02688 0.004250       0.006797\ngamma[3,2]  0.4497 0.02388 0.003776       0.004744\nsd          0.1876 0.04873 0.007705       0.014859\n\n2. Quantiles for each variable:\n\n              2.5%     25%     50%     75%   97.5%\nalpha[1]   10.9410 11.0019 11.0324 11.0641 11.0929\nalpha[2]    7.9363  8.0223  8.0443  8.0714  8.1116\nalpha[3]   10.4576 10.5047 10.5568 10.6022 10.6655\nalpha[4]    9.5441  9.5934  9.6103  9.6443  9.6779\nalpha[5]   12.8475 12.8961 12.9235 12.9569 13.0428\nalpha[6]   13.1642 13.2169 13.2385 13.2531 13.2790\nalpha[7]    7.3679  7.4149  7.4447  7.4898  7.5383\nalpha[8]   11.0797 11.1284 11.1757 11.2311 11.3211\nalpha[9]   10.1613 10.1952 10.2392 10.2799 10.3155\nalpha[10]   9.0736  9.1437  9.1959  9.2260  9.2949\nbeta[1]     0.1789  0.1890  0.1950  0.2077  0.2204\nbeta[2]     0.2913  0.3103  0.3200  0.3305  0.3582\ndelta[1]    0.0000  0.0000  0.0000  0.0000  0.0000\ndelta[2]   -3.1527 -3.0213 -2.9826 -2.9300 -2.8526\ndelta[3]   -1.3250 -1.2109 -1.1763 -1.1016 -1.0028\ngamma[1,1]  0.0000  0.0000  0.0000  0.0000  0.0000\ngamma[2,1] -0.6209 -0.6001 -0.5752 -0.5663 -0.5465\ngamma[3,1] -0.3416 -0.3130 -0.2980 -0.2851 -0.2514\ngamma[1,2]  0.0000  0.0000  0.0000  0.0000  0.0000\ngamma[2,2]  0.4977  0.5426  0.5599  0.5717  0.6053\ngamma[3,2]  0.4159  0.4324  0.4511  0.4648  0.4891\nsd          0.1274  0.1557  0.1749  0.2166  0.2892\n\n\nAs before, we can use the treatment.effect() function of bipd to estimate relative effects for new patients.\n\ntreatment.effect(ipd3, samples, newpatient= c(1,2))\n\n$`treatment 2`\n    0.025       0.5     0.975 \n-2.737535 -2.514689 -2.291430 \n\n$`treatment 3`\n     0.025        0.5      0.975 \n-0.7439460 -0.6249194 -0.4192449 \n\n\nThis gives us the relative effects for all treatments versus the reference. To obtain relative effects between active treatments we need some more coding:\n\nsamples.all=data.frame(rbind(samples[[1]], samples[[2]]))\nnewpatient= c(1,2)\nnewpatient <- (newpatient - ipd3$scale_mean)/ipd3$scale_sd\n\nmedian(\n  samples.all$delta.2.+samples.all$gamma.2.1.*\n    newpatient[1]+samples.all$gamma.2.2.*newpatient[2]\n-\n  (samples.all$delta.3.+samples.all$gamma.3.1.*newpatient[1]+\n     samples.all$gamma.3.2.*newpatient[2])\n)\n\n[1] -1.895285\n\nquantile(samples.all$delta.2.+samples.all$gamma.2.1.*\n           newpatient[1]+samples.all$gamma.2.2.*newpatient[2]\n         -(samples.all$delta.3.+samples.all$gamma.3.1.*newpatient[1]+\n             samples.all$gamma.3.2.*newpatient[2])\n         , probs = 0.025)\n\n     2.5% \n-2.141048 \n\nquantile(samples.all$delta.2.+samples.all$gamma.2.1.*\n           newpatient[1]+samples.all$gamma.2.2.*newpatient[2]\n         -(samples.all$delta.3.+samples.all$gamma.3.1.*newpatient[1]+\n             samples.all$gamma.3.2.*newpatient[2])\n         , probs = 0.975)\n\n    97.5% \n-1.730013 \n\n\n\n\n\n8.2.2 Modeling patient-level relative effects using randomized and observational evidence for a network of treatments\nWe will now follow Chapter 16.3.5 from the book. In this analysis we will not use penalization, and we will assume fixed effects. For an example with penalization and random effects, see part 2 of this vignettte.\n\n8.2.2.1 Setup\nWe generate a very simple dataset of three studies comparing three treatments. We will assume 2 RCTs and 1 non-randomized trial:\n\nds4 <- generate_ipdnma_example(type = \"continuous\")\nds4 <- ds4 %>% filter(studyid %in% c(1,4,10)) %>%\n  mutate(studyid = factor(studyid) %>%\n           recode_factor(\n             \"1\" = \"1\",\n             \"4\" = \"2\",\n             \"10\" = \"3\"),\n         design = ifelse(studyid == \"3\", \"nrs\", \"rct\"))\n\nThe sample size is as follows:\n\n\n          \n           s1 s2 s3\n  treat A: 52 52 39\n  treat B: 48  0 25\n  treat C:  0 48 36\n\n\n\n\n8.2.2.2 Model fitting\nWe will use the design-adjusted model, equation 16.9 in the book. We will fit a two-stage fixed effects meta-analysis and we will use a variance inflation factor. The code below is used to specify the analysis of each individual study. Briefly, in each study we adjust the treatment effect for the prognostic factors z1 and z2, as well as their interaction with treat.\n\nlibrary(rjags)\n\nLoading required package: coda\n\n\nLinked to JAGS 4.3.2\n\n\nLoaded modules: basemod,bugs\n\nfirst.stage <- \"\nmodel{\n\nfor (i in 1:N){\n    y[i] ~ dnorm(mu[i], tau)  \n    mu[i] <- a + inprod(b[], X[i,]) + inprod(c[,treat[i]], X[i,]) + d[treat[i]] \n}\nsigma ~ dunif(0, 5)\ntau <- pow(sigma, -2)\n\na ~ dnorm(0, 0.001)\n\nfor(k in 1:Ncovariate){\n    b[k] ~ dnorm(0,0.001)\n}\n\nfor(k in 1:Ncovariate){\n    c[k,1] <- 0\n}\n\ntauGamma <- pow(sdGamma,-1)\nsdGamma ~ dunif(0, 5)\n\nfor(k in 1:Ncovariate){\n    for(t in 2:Ntreat){\n        c[k,t] ~ ddexp(0, tauGamma)\n    }\n}\n\nd[1] <- 0\nfor(t in 2:Ntreat){\n    d[t] ~ dnorm(0, 0.001)\n}\n}\"\n\nSubsequently, we estimate the relative treatment effects in the first (randomized) study comparing treatments A and B:\n\n\n\n\nmodel1.spec <- textConnection(first.stage) \ndata1 <- with(ds4 %>% filter(studyid == 1), \n              list(y = y,\n                   N = length(y), \n                   X = cbind(z1,z2),  \n                   treat = treat,\n                   Ncovariate = 2, \n                   Ntreat = 2))\njags.m <- jags.model(model1.spec, data = data1, n.chains = 2, n.adapt = 500,\n                     quiet =  TRUE)\nparams <- c(\"d\", \"c\") \nsamps4.1 <- coda.samples(jags.m, params, n.iter = 50)\nsamps.all.s1 <- data.frame(as.matrix(samps4.1))\n\nsamps.all.s1 <- samps.all.s1[, c(\"c.1.2.\", \"c.2.2.\", \"d.2.\")]\ndelta.1 <- colMeans(samps.all.s1)\ncov.1 <- var(samps.all.s1)\n\n\n\n\nWe repeat the analysis for the second (randomized) study comparing treatments A and C:\n\nmodel1.spec <- textConnection(first.stage) \ndata2 <- with(ds4 %>% filter(studyid == 2), \n              list(y = y,\n                   N = length(y), \n                   X = cbind(z1,z2),  \n                   treat = ifelse(treat == 3, 2, treat),\n                   Ncovariate = 2, \n                   Ntreat = 2))\njags.m <- jags.model(model1.spec, data = data2, n.chains = 2, n.adapt = 100,\n                     quiet =  TRUE)\nparams <- c(\"d\", \"c\") \nsamps4.2 <- coda.samples(jags.m, params, n.iter = 50)\nsamps.all.s2 <- data.frame(as.matrix(samps4.2))\nsamps.all.s2 <- samps.all.s2[, c(\"c.1.2.\", \"c.2.2.\", \"d.2.\")]\ndelta.2 <- colMeans(samps.all.s2)\ncov.2 <- var(samps.all.s2)\n\n\n\n\nFinally, we analyze the third (non-randomized) study comparing treatments A, B, and C:\n\nmodel1.spec <- textConnection(first.stage) \ndata3 <- with(ds4 %>% filter(studyid == 3), \n              list(y = y,\n                   N = length(y), \n                   X = cbind(z1,z2),  \n                   treat = treat,\n                   Ncovariate = 2, \n                   Ntreat = 3))\njags.m <- jags.model(model1.spec, data = data3, n.chains = 2, n.adapt = 100,\n                     quiet = TRUE)\nparams <- c(\"d\", \"c\") \nsamps4.3 <- coda.samples(jags.m, params, n.iter = 50)\nsamps.all.s3 <- data.frame(as.matrix(samps4.3))\n\nsamps.all.s3 <- samps.all.s3[, c(\"c.1.2.\", \"c.2.2.\", \"d.2.\", \"c.1.3.\", \n                                 \"c.2.3.\", \"d.3.\")]\ndelta.3 <- colMeans(samps.all.s3)\ncov.3 <- var(samps.all.s3)\n\n\n\n\nThe corresponding treatment effect estimates are depicted below:\n\n\n\n\nTable 8.4:  Treatment effect estimates. \n \n  \n    study \n    B versus A \n    C versus A \n  \n \n\n  \n    study 1 \n    -2.949 (SE =  0.043 ) \n     \n  \n  \n    study 2 \n     \n    -1.151 (SE =  0.065 ) \n  \n  \n    study 3 \n    -2.897 (SE =  0.078 ) \n    -1.046 (SE =  0.071 ) \n  \n\n\n\n\n\n\nWe can now fit the second stage of the network meta-analysis. The corresponding JAGS model is specified below:\n\nsecond.stage <-\n\"model{\n  \n  #likelihood\n  y1 ~ dmnorm(Mu1, Omega1)\n  y2 ~ dmnorm(Mu2, Omega2)\n  y3 ~ dmnorm(Mu3, Omega3*W)\n\n  \n  Omega1 <- inverse(cov.1)\n  Omega2 <- inverse(cov.2)\n  Omega3 <- inverse(cov.3)\n\n  Mu1 <- c(gamma[,1], delta[2])\n  Mu2 <- c(gamma[,2], delta[3])  \n  Mu3 <- c(gamma[,1], delta[2],gamma[,2], delta[3])\n  \n  #parameters\n  for(i in 1:2){\n    gamma[i,1] ~ dnorm(0, 0.001)\n    gamma[i,2] ~ dnorm(0, 0.001)\n  }\n  \n  delta[1] <- 0\n  delta[2] ~ dnorm(0, 0.001)\n  delta[3] ~ dnorm(0, 0.001)\n  \n}\n\"\n\nWe can fit as follows:\n\nmodel1.spec <- textConnection(second.stage) \ndata3 <- list(y1 = delta.1, y2 = delta.2, y3 = delta.3, \n              cov.1 = cov.1, cov.2 = cov.2, cov.3 = cov.3, W = 0.5)\n\njags.m <- jags.model(model1.spec, data = data3, n.chains = 2, n.adapt = 50,\n                     quiet = TRUE)\nparams <- c(\"delta\", \"gamma\") \nsamps4.3 <- coda.samples(jags.m, params, n.iter = 50)\n\n\nsummary(samps4.3)\n\n\nIterations = 1:50\nThinning interval = 1 \nNumber of chains = 2 \nSample size per chain = 50 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n              Mean      SD Naive SE Time-series SE\ndelta[1]    0.0000 0.00000 0.000000       0.000000\ndelta[2]   -2.9408 0.04863 0.004863       0.004556\ndelta[3]   -1.1386 0.04998 0.004998       0.005887\ngamma[1,1] -0.8482 0.06473 0.006473       0.006504\ngamma[2,1]  0.8167 0.04278 0.004278       0.004284\ngamma[1,2] -0.5300 0.06349 0.006349       0.007315\ngamma[2,2]  0.3326 0.04360 0.004360       0.005005\n\n2. Quantiles for each variable:\n\n              2.5%     25%     50%     75%   97.5%\ndelta[1]    0.0000  0.0000  0.0000  0.0000  0.0000\ndelta[2]   -3.0207 -2.9748 -2.9418 -2.9169 -2.8545\ndelta[3]   -1.2342 -1.1687 -1.1433 -1.1105 -1.0414\ngamma[1,1] -0.9396 -0.8738 -0.8394 -0.8130 -0.7658\ngamma[2,1]  0.7474  0.7996  0.8233  0.8421  0.8755\ngamma[1,2] -0.6568 -0.5665 -0.5256 -0.4893 -0.4263\ngamma[2,2]  0.2319  0.3033  0.3355  0.3625  0.3993\n\n# calculate  treatment effects\nsamples.all=data.frame(rbind(samps4.3[[1]], samps4.3[[2]]))\nnewpatient= c(1,2)\n\nmedian(\n  samples.all$delta.2.+samples.all$gamma.1.1.*newpatient[1]+\n    samples.all$gamma.2.1.*newpatient[2]\n)\n\n[1] -2.152624\n\nquantile(samples.all$delta.2.+samples.all$gamma.1.1.*newpatient[1]+\n           samples.all$gamma.2.1.*newpatient[2]\n         , probs = 0.025)\n\n     2.5% \n-2.338588 \n\nquantile(samples.all$delta.2.+samples.all$gamma.1.1.*newpatient[1]+\n           samples.all$gamma.2.1.*newpatient[2]\n         , probs = 0.975)\n\n   97.5% \n-1.97997"
  },
  {
    "objectID": "chapter_16.html#version-info",
    "href": "chapter_16.html#version-info",
    "title": "8  Prediction of individual treatment effect using data from multiple studies",
    "section": "Version info",
    "text": "Version info\nThis chapter was rendered using the following version of R and its packages:\n\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] rjags_4-14       coda_0.19-4      ggplot2_3.4.2    bipd_0.3        \n[5] kableExtra_1.3.4 dplyr_1.1.2      table1_1.4.3    \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3        generics_0.1.3    xml2_1.3.4        stringi_1.7.12   \n [5] lattice_0.21-8    digest_0.6.31     magrittr_2.0.3    evaluate_0.21    \n [9] grid_4.3.0        mvtnorm_1.2-2     fastmap_1.1.1     jsonlite_1.8.5   \n[13] Formula_1.2-5     httr_1.4.6        rvest_1.0.3       fansi_1.0.4      \n[17] viridisLite_0.4.2 scales_1.2.1      codetools_0.2-19  cli_3.6.1        \n[21] rlang_1.1.1       munsell_0.5.0     withr_2.5.0       yaml_2.3.7       \n[25] tools_4.3.0       colorspace_2.1-0  webshot_0.5.4     vctrs_0.6.2      \n[29] R6_2.5.1          lifecycle_1.0.3   stringr_1.5.0     htmlwidgets_1.6.2\n[33] pkgconfig_2.0.3   pillar_1.9.0      gtable_0.3.3      glue_1.6.2       \n[37] systemfonts_1.0.4 highr_0.10        xfun_0.39         tibble_3.2.1     \n[41] tidyselect_1.2.0  rstudioapi_0.14   knitr_1.43        farver_2.1.1     \n[45] htmltools_0.5.5   rmarkdown_2.22    svglite_2.1.1     labeling_0.4.2   \n[49] compiler_4.3.0"
  },
  {
    "objectID": "chapter_16.html#references",
    "href": "chapter_16.html#references",
    "title": "8  Prediction of individual treatment effect using data from multiple studies",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "chapter_18.html#introduction",
    "href": "chapter_18.html#introduction",
    "title": "9  Visualization and interpretation of individualized treatment rule results",
    "section": "9.1 Introduction",
    "text": "9.1 Introduction\nWe first load all relevant functions for this chapter.\n\nsource(\"resources/chapter 18/functions.r\")\n\nSubsequently, we use the function simcountdata() to generate an example dataset with a sample size of N=2000. In this example, we have two disease modifying therapies (DMT1 and DMT0) and the outcome is the number of post-treatment multiple sclerosis relapses during follow-up.\n\n# Randomization seed\nbase.seed <- 999\n\nset.seed(base.seed)\ndf.ori <- simcountdata(n = 2000,\n                       seed = 63,\n                       beta = c(log(0.4), log(0.5), log(1), log(1.1), log(1.2)),\n                       beta.x = c(-1.54, -0.01, 0.06, 0.25, 0.5, 0.13, 0.0000003)\n)$data\n\nThe dataset looks as follows:\n\nhead(df.ori)\n\n  trt ageatindex_centered female prerelapse_num prevDMTefficacy premedicalcost\n1   0                   2      0              2    Low efficacy        4606.04\n2   1                  10      1              1    Low efficacy       17065.19\n3   1                  12      1              2            None        6308.39\n4   1                 -12      0              0    Low efficacy       16633.97\n5   1                  13      1              0    Low efficacy         642.96\n6   1                  14      1              0    Low efficacy        2989.89\n  numSymptoms postrelapse_num finalpostdayscount     group     score Iscore\n1           0               1                305 Simulated 0.7129792      1\n2           1               0                367 Simulated 0.7404238      2\n3           0               0                325 Simulated 0.7564233      3\n4           0               0                321 Simulated 0.7215764      1\n5           0               0                 24 Simulated 0.7457823      2\n6           0               0                 59 Simulated 0.7441632      2\n\n\nBelow is a summary table of the baseline characteristics by treatment group.\n\n\n\nBaseline characteristics of the case study data\n\n\n\n\n0(N=506)\n1(N=1494)\nOverall(N=2000)\n\n\n\n\nAge (years)\n\n\n\n\n\nMean (SD)\n45.2 (9.82)\n45.8 (9.73)\n45.7 (9.75)\n\n\nMedian [Min, Max]\n46.0 [20.0, 64.0]\n46.0 [19.0, 64.0]\n46.0 [19.0, 64.0]\n\n\nGender\n\n\n\n\n\nfemale\n375 (74.1%)\n1123 (75.2%)\n1498 (74.9%)\n\n\nmale\n131 (25.9%)\n371 (24.8%)\n502 (25.1%)\n\n\nPrevious number of relapses\n\n\n\n\n\n0\n319 (63.0%)\n973 (65.1%)\n1292 (64.6%)\n\n\n1\n150 (29.6%)\n427 (28.6%)\n577 (28.9%)\n\n\n2\n31 (6.1%)\n76 (5.1%)\n107 (5.4%)\n\n\n3\n5 (1.0%)\n17 (1.1%)\n22 (1.1%)\n\n\n4\n1 (0.2%)\n1 (0.1%)\n2 (0.1%)\n\n\nEfficacy of previous disease modifying therapy\n\n\n\n\n\nLow efficacy\n216 (42.7%)\n609 (40.8%)\n825 (41.3%)\n\n\nMedium and high efficacy\n53 (10.5%)\n179 (12.0%)\n232 (11.6%)\n\n\nNone\n237 (46.8%)\n706 (47.3%)\n943 (47.2%)\n\n\nPrevious medical cost (\\$)\n\n\n\n\n\nMean (SD)\n13700 (20400)\n14400 (24500)\n14300 (23600)\n\n\nMedian [Min, Max]\n7320 [343, 264000]\n7560 [110, 556000]\n7470 [110, 556000]\n\n\nPrevious number of symptoms\n\n\n\n\n\n0\n348 (68.8%)\n995 (66.6%)\n1343 (67.2%)\n\n\n1\n119 (23.5%)\n388 (26.0%)\n507 (25.4%)\n\n\n>=2\n39 (7.7%)\n111 (7.4%)\n150 (7.5%)\n\n\n\n\n\n\nWe now define key constants for the case study.\n\n# Baseline characteristics\ncovars <- c(\"age.z\", \"female\", \"prevtrtB\", \"prevtrtC\", \"prevnumsymp1\", \n            \"prevnumsymp2p\", \"previous_cost.z\", \"previous_number_relapses\")\n\n# Precision medicine methods to be used\npm.methods <- c(\"all1\", \"all0\", \"poisson\", \"dWOLS\", \"listDTR2\", \n                \"contrastReg\")\n\n# Precision medicine method labels\nmethod.vec <- c(\"All 0\", \"All 1\", \"Poisson\", \"dWOLS\", \n                \"Contrast\\n Regression\", \"List DTR\\n (2 branches)\")\n\n# Number of folds in each CV iteration\nn.fold <- 5\n\n# Number of CV iterations\nn.cv <- 10\n\n# Sample size of the large independent test set to get true value\nbig.n <- 100000\n\n# Define formula for the CATE model\ncate.formula <- as.formula(paste0(\"y ~\", paste0(covars, collapse = \"+\"), \n                                  \"+ offset(log(years))\"))\n\n# Define formula for the propensity score model\nps.formula <- trt ~ age.z + prevtrtB + prevtrtC\n\n# Color\nmyblue <- rgb(37, 15, 186, maxColorValue = 255)\nmygreen <- rgb(109, 173, 70, maxColorValue = 255)\nmygrey <- rgb(124, 135, 142, maxColorValue = 255)\n\nThe data need to be preprocessed to be more analyzable. We recategorized treatment, previous treatment, and number of symptoms; scaled medical cost and age; and standardized the data.\n\ndf <- df.ori %>%\n  rename(previous_treatment = prevDMTefficacy,\n         age = ageatindex_centered,\n         y = postrelapse_num,\n         previous_number_relapses = prerelapse_num,\n         previous_number_symptoms = numSymptoms,\n         previous_cost = premedicalcost) %>%\n  mutate(previous_treatment = factor(previous_treatment, \n                                     levels = c(\"None\", \"Low efficacy\", \"Medium and high efficacy\"), \n                                     labels = c(\"drugA\", \"drugB\", \"drugC\")),\n         previous_number_symptoms = factor(previous_number_symptoms, \n                                           levels = c(\"0\", \"1\", \">=2\"), \n                                           labels = c(\"0\", \"1\", \">=2\")),\n         trt = factor(trt, levels = c(0, 1), labels = c(\"drug0\", \"drug1\")),\n         previous_cost.z = scale(log(previous_cost), scale = TRUE), # log-transformed due to skewness\n         age.z = age + 48,\n         age.z = scale(age.z, scale = TRUE),\n         years = finalpostdayscount / 365.25,\n         mlogarr0001 = -log(y / years + 0.001),\n         drug1 = as.numeric(trt == \"drug1\"),\n         prevtrtB = as.numeric(previous_treatment == \"drugB\"),\n         prevtrtC = as.numeric(previous_treatment == \"drugC\"),\n         prevnumsymp1 = as.numeric(previous_number_symptoms == \"1\"),\n         prevnumsymp2p = as.numeric(previous_number_symptoms == \">=2\")) %>%\n  dplyr::select(age.z, female, contains(\"prevtrt\"), previous_cost.z, contains(\"prevnumsymp\"), \n                previous_number_relapses, trt, drug1, y, mlogarr0001, years, Iscore)\n\n# Standardize data\ndf.s <- df\ndf.s[, setdiff(covars, c(\"age.z\", \"previous_cost.z\"))] <- df[, setdiff(covars, c(\"age.z\", \"previous_cost.z\"))]"
  },
  {
    "objectID": "chapter_18.html#estmition-of-individualized-treatment-rules",
    "href": "chapter_18.html#estmition-of-individualized-treatment-rules",
    "title": "9  Visualization and interpretation of individualized treatment rule results",
    "section": "9.2 Estmition of individualized treatment rules",
    "text": "9.2 Estmition of individualized treatment rules\nThe following code provides details of how to implement the precision medicine methods in the example data. Please feel free to jump to the next section if you want to focus on the results. The model results are available online for you to load and save time.\nWe used the function listdtr() in the listdtr package to estimate individualized treatment rules (ITRs) based on the listDTR method. We used the function catefit() in the precmed package to estimate ITRs based on the Poisson and contrast regression method. These were the methods used in Section 3 of the book where we talked about directly visualizing the ITR before bringing in the outcomes. The methods are discussed in further detail by Zhao et al. (2013) and Yadlowsky et al. (2020).\n\nlibrary(listdtr)\n\n# Estimated ITR based on the listDTR method with 2 branches\nmodlist2 <- listdtr(y = df$mlogarr, # larger is more favorable\n                   a = df$drug1,\n                   x = df[, c(\"age.z\", \"female\", \"prevtrtB\", \"prevtrtC\", \"previous_cost.z\",\n                              \"prevnumsymp1\", \"prevnumsymp2p\", \"previous_number_relapses\")],\n                   stage.x = rep(1, 8), maxlen = 2L) # somewhat slow\n\n# Estimated ITR based on the listDTR method with 3 branches\nmodlist3 <- listdtr(y = df$mlogarr,\n                    a = df$drug1,\n                    x = df[, c(\"age.z\", \"female\", \"prevtrtB\", \"prevtrtC\", \"previous_cost.z\",\n                               \"prevnumsymp1\", \"prevnumsymp2p\", \"previous_number_relapses\")],\n                    stage.x = rep(1, 8), maxlen = 3L) # somewhat slow\n\n# Estimated CATE score based on the Poisson and contrast regression \nmodpm <- catefit(response = \"count\",\n            cate.model = cate.formula,\n            ps.model = ps.formula,\n            data = df,\n            higher.y = FALSE,\n            score.method = c(\"poisson\", \"contrastReg\"),\n            initial.predictor.method = \"poisson\",\n            seed = 999)\n\n# Estimated CATE score based on the Poisson and contrast regression \n# (based on the scaled data so the coefficients are easier to compare)\nmodpm.s <- catefit(response = \"count\",\n              cate.model = cate.formula,\n              ps.model = ps.formula,\n              data = df.s,\n              higher.y = FALSE,\n              score.method = c(\"poisson\", \"contrastReg\"),\n              initial.predictor.method = \"poisson\",\n              seed = 999)\n\nFor results in Sections 4 and 5, we applied cross validation to mitigate over-fitting. For this chapter, we created our own customized function cvvalue() to estimate the ITR and calculate the estimated value function via cross validation for all methods, including the fixed method. The results were all saved under the prefix cvmod. The precmed package has a built-in cross validation procedure for CATE estimation so we used the function catefit().\n\n# Run cross validation for each method (used for Sections 4 & 5)\n  \n## Estimated CATE scores based on the Poisson and contrast regression with cross-validation\nmodcv <- catecv(response = \"count\",\n                cate.model = cate.formula,\n                ps.model = ps.formula,\n                data = df,\n                higher.y = FALSE,\n                score.method = c(\"poisson\", \"contrastReg\"),\n                initial.predictor.method = \"poisson\",\n                cv.n = n.cv,\n                plot.gbmperf = FALSE,\n                seed = 999) # somewhat slow\n\n## Estimated value function for each method\ncvmodall0 <- cvvalue(data = df, xvar = covars,\n                     method = \"all0\", n.fold = n.fold, n.cv = n.cv, \n                     seed = base.seed)\n\ncvmodall1 <- cvvalue(data = df, xvar = covars,\n                     method = \"all1\", n.fold = n.fold, n.cv = n.cv, \n                     seed = base.seed)\n\ncvmoddwols <- cvvalue(data = df, xvar = covars,\n                      method = \"dWOLS\", n.fold = n.fold, n.cv = n.cv, \n                      seed = base.seed)\n\ncvmodpois <- cvvalue(data = df, xvar = covars,\n                     method = \"poisson\", n.fold = n.fold, n.cv = n.cv, \n                     seed = base.seed)\n\ncvmodlist2 <- cvvalue(data = df, xvar = covars,\n                      method = \"listDTR2\", n.fold = n.fold, n.cv = n.cv, \n                      seed = base.seed) # very slow\n\ncvmodcontrastreg <- cvvalue(data = df, xvar = covars,\n                            method = \"contrastReg\", n.fold = n.fold, \n                            n.cv = n.cv, \n                            seed = base.seed) # very slow\n\n\n\n\nAs a next step, we need to combine all estimated ITRs and value functions:\n\n# Combine CV results\n# Read in each CV result in a loop\nvhats.dhat <- dhats <- NULL\nmod_names <- c(\"cvmodall1\", \"cvmodall0\", \"cvmoddwols\", \"cvmodpois\", \"cvmodcontrastreg\", \"cvmodlist2\")\nfor (mod in mod_names){\n  thismod <- get(mod)\n  for (name in names(thismod)) {\n    # Get estimated values, vhat.dhat\n    vhats.dhat <- rbind(vhats.dhat,\n                        thismod[[name]] %>%\n                          map_df(~bind_rows(names(.x) %>% str_detect(\"vhat.dhat\") %>% keep(.x, .)), .id = \"fold\") %>%\n                          mutate(method = mod, cv.i = name))\n    # Get estimated rule from CV test fold, dhat\n    dhats  <- rbind(dhats,\n                    thismod[[name]] %>%\n                      map_df(~bind_rows(names(.x) %>% str_detect(\"^dhat$\") %>% keep(.x, .)), .id = \"fold\") %>%\n                      mutate(method = mod, cv.i = name))\n\n  }\n}\n\n# One time run to get true optimal and worst value\n# Simulated data only\ntrueV <- getTrueOptimalValue(n = big.n, seed = base.seed)\ntrueWorstV <- getTrueWorstValue(n = big.n, seed = base.seed)\n\n# Preprocess\nvhats.dhat %<>%\n  mutate(V = U/W,\n         VR = (U/W - trueWorstV) / (trueV - trueWorstV)) %>%\n  group_by(method) %>%\n  summarize(n.batches = n(),\n            n.nonnaU = sum(!is.na(U)),\n            n.nonnaW = sum(!is.na(W)),\n            meanV = mean(V, na.rm = T),\n            sdV = sd(V, na.rm = T),\n            meanVR = mean(VR, na.rm = T),\n            sdVR = sd(VR, na.rm = T),\n            .groups = \"keep\") %>%\n  ungroup %>%\n  arrange(desc(meanV)) %>%\n  mutate(method = case_when(\n    method == \"cvmodcontrastreg\" ~ \"Contrast\\n Regression\",\n    method == \"cvmodall0\" ~ \"All 0\",\n    method == \"cvmodall1\" ~ \"All 1\",\n    method == \"cvmodlist2\" ~ \"List DTR\\n (2 branches)\",\n    method == \"cvmoddwols\" ~ \"dWOLS\",\n    method == \"cvmodpois\" ~ \"Poisson\"),\n    method = factor(method,\n                    levels = method.vec,\n                    labels = method.vec)\n  )\n\ndhats %<>%\n  mutate(method = case_when(\n    method == \"cvmodcontrastreg\" ~ \"Contrast\\n Regression\",\n    method == \"cvmodall0\" ~ \"All 0\",\n    method == \"cvmodall1\" ~ \"All 1\",\n    method == \"cvmodlist2\" ~ \"List DTR\\n (2 branches)\",\n    method == \"cvmoddwols\" ~ \"dWOLS\",\n    method == \"cvmodpois\" ~ \"Poisson\"),\n    method = factor(method,\n                    levels = method.vec,\n                    labels = method.vec)\n  )"
  },
  {
    "objectID": "chapter_18.html#visualization-of-individualized-treatment-rules",
    "href": "chapter_18.html#visualization-of-individualized-treatment-rules",
    "title": "9  Visualization and interpretation of individualized treatment rule results",
    "section": "9.3 Visualization of individualized treatment rules",
    "text": "9.3 Visualization of individualized treatment rules\n\n9.3.1 Direct visualization\n\n9.3.1.1 listDTR\nIf the PM method already has built-in visualization (especially for tree-based methods), we can visualize the ITR directly. For example, we can simply use the function plot() to visualize the estimated ITR with the listDTR method.\n\n#modlist3 %>% plot()\n\nWe can also create our own visualization like Figure 1A in the chapter.\n\ndf.list3 <- df %>%\n  mutate(d.list = ifelse(age.z > 0.599 | prevtrtB > 0.5, \"Recommend 1\", \"Recommend 0\"), # based on modlist3\n         Rule = factor(as.character(d.list), levels = c(\"Recommend 0\", \"Recommend 1\")),\n         prevtrtB = ifelse(prevtrtB == 1, \"Previous treatment is drug B\", \"Previous treatment is not drug B\")\n  )\n\n## Figure 1A\ndf.list3 %>%\n  ggplot(aes(x = age.z, fill = Rule))+\n  geom_histogram(position = position_dodge2(preserve = 'single'), binwidth = 0.1)+\n  facet_wrap(~ prevtrtB, nrow = 2) +\n  scale_fill_brewer(palette = \"Set1\") +\n  labs(x = \"Standardized age\", y = \"Count\") +\n  theme_classic() +\n  theme(legend.position = 'top', text = element_text(size = 20))\n\n\n\n\nThe subgroup-level annualized relapse rate (ARR) can be calculated based on the listDTR ITR:\n\ndf.list3 %>%\n  group_by(trt, d.list) %>%\n  summarise(ARR = round(sum(y) / sum(years), 2),\n            n = n(),\n            `prop%` = round(n / nrow(df), 2)*100, .groups = \"drop\") %>%\n  rename(\"listDTR ITR\" = d.list,\n         \"Observed treatment\" = trt) %>%\n  kable() %>%\n  kable_styling(full_width = F)\n\n\n\n \n  \n    Observed treatment \n    listDTR ITR \n    ARR \n    n \n    prop% \n  \n \n\n  \n    drug0 \n    Recommend 0 \n    0.32 \n    197 \n    10 \n  \n  \n    drug0 \n    Recommend 1 \n    0.31 \n    309 \n    15 \n  \n  \n    drug1 \n    Recommend 0 \n    0.39 \n    615 \n    31 \n  \n  \n    drug1 \n    Recommend 1 \n    0.16 \n    879 \n    44 \n  \n\n\n\n\n\nPatients who received drug 0 and were recommended drug 0 by listDTR had a similar ARR on average than those who received drug 0 but were recommended drug 1 (0.32 vs 0.31). Patients who received drug 1 and were recommended drug 1 by listDTR had a much lower ARR on average than those who received drug 1 but were recommended drug 0 (0.16 vs 0.39).\n\n\n9.3.1.2 Score-based method\nAlthough some PM methods do not have built-in visualization or not as “white-box” as some more interpretable methods, there still might be ways to visualize the ITR. For example, score-based methods (such as Poisson and contrast regression) produce an estimate of the CATE score for each patient, and a classification tree can be fitted on these scores and visualized. Below is a histogram-density plot of the CATE scores estimated from the Poisson regression and the fitted classification tree using the estimated CATE scores. We pruned the tree so it only had three nodes for simplicity. The rpart.plot package has a built-in visualization function of the rpart model, rpart.plot(), which is how Figure 1B in the chapter was generated.\n\ndf[\"score.poisson\"] <- modpm$score.poisson\n\nggplot(df, aes(x = score.poisson)) + \n  geom_histogram(aes(y = ..density..), colour = \"black\", fill = \"lightblue\") +\n  geom_density(alpha = .2, fill = \"white\") +\n  labs(x = \"Estimated CATE score from the Poisson regression\", y = \"Density\") + \n  theme_classic()\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nmodtree <- rpart(as.formula(paste0(\"score.poisson ~\", paste0(covars, collapse = \"+\"))),\n                 method = \"anova\", data = df, control = rpart.control(minsplit = 100, cp = 0.01)) # Fit Poisson CATE scores on a classification tree\n\nmodtree.pr <- prune(modtree, cp = 0.09) # I ended up choosing a higher cp value to have only 3 subgroups\n\n# print(rpart.rules(modtree.pr, cover = TRUE))\n\n## Figure 1B\nrpart.plot(modtree.pr, box.palette = \"RdBu\", type = 5, under = TRUE, tweak = 1.2, compress = TRUE)\n\n\n\n\nThe CATE scores are now simplified as a tree classifier. Previous treatment of drug B and age seemed to be important in determining the CATE score values, which also showed up in the estimated from the listDTR method. Patients with previous treatment of drug B had the lowest CATE score on average (-0.76) and took up 41% of the samples (dark orange). Patients whose previous treatment was not drug B and age was >= -0.22 standard deviation of the mean also had a negative CATE score on average (-0.23) and took up 36% of the samples (light orange), but not as low as the dark orange group. Negative CATE scores mean that the number of relapses was expected to be lower for those recommended drug 1 than those recommended drug 0, so drug 1 was favored for them. For the blue group, the average CATE score was 0.13, taking up 23% of the samples, and they were expected to benefit from drug 0 based on the Poisson CATE scores.\n\n\n\n9.3.2 ITR accuracy\nThe accuracy of ITR is the proportion of patients whose estimated ITR is the same as the true optimal ITR. The estimated ITRs have been obtained from the PM methods but we need to calculate the true optimal ITR. This is only possible for simulated data where the decision boundary is known. Based on the data generating mechanism in simcountdata(), Iscore is a score generated from a linear combination of baseline covariates where lower scores represented that drug 1 was better and higher scores represented that drug 0 was better. We then classified patients in 5 equal-size subgroups based on the Iscore, where groups 1 and 2 have drug 1 as their true optimal ITR and groups 3 and 4 have drug 0 as their true optimal ITR. Group 3 is considered the neutral group, where patients are indifferent to either drug so we assign the true optimal ITR to be their observed treatment. Thus, we identify the true optimal ITR for every patient based on this subgrouping, which was derived from their true score Iscore. Since we used cross validation in estimating the ITR, we need to apply the exact same cross validation to the true optimal ITR. This is achieved by specifying the same randomization seed in the cross validation loop (see seed).\n\n## Create new columns\ndhats$d <- rep(NA, nrow(dhats)) # true d\n\n# Identify the true optimal treatment\n# See simcountdata() in the function script to learn more about Iscore\nsim <- df %>%\n  mutate(trueT = ifelse(as.numeric(Iscore) < 3, 1, 0),\n         trueT = ifelse(Iscore == 3, drug1, trueT)) # neutral group\n\n# Format data\ninput <- data.frame(y = sim$y, trt = sim$drug1, time = log(sim$years), sim[covars])\n\n# Cross validation loop\nfor(i in unique(dhats$cv.i)) {\n  seed <- base.seed*100 + as.numeric(str_extract(i, \"[0-9]+\"))\n  set.seed(seed)\n\n  # Create CV folds\n  folds <- createFolds(input$trt, k = n.fold, list = TRUE) # Stratified CV, follow the same as the simmain.R where folds were created on input$trt instead of sim$trt\n\n  for (fold.i in 1:n.fold){\n    testdata <- sim[folds[[fold.i]],]\n    # number of methods which succeeded for the given fold/batch. The \"is.na(dhat) == FALSE\" is to remove methods that didn't produce results for that fold/batch\n    nr <- nrow(dhats %>% filter(fold == paste0(\"fold\", fold.i), cv.i == i, is.na(dhat) == FALSE))\n    dhats$d[which(dhats$fold == paste0(\"fold\", fold.i) & dhats$cv.i == i & is.na(dhats$dhat) == FALSE)] <- rep(testdata$trueT, nr/nrow(testdata))\n    stopifnot(nr %% nrow(testdata) == 0)\n  }\n} # end of all cv iterations\n\nOnce we identified the true optimal ITR (\\(d^{opt}\\)), we can calculate the accuracy in each validation fold for each PM method (\\(\\hat{d}_{pm}\\)). Mathematically, accuracy can be expressed as \\[Accuracy_{pm}(\\boldsymbol{x}^{val}) = \\frac{1}{n^{val}}\\sum_{i = 1}^{n^{val}} I\\big(\\hat{d}_{pm}(\\boldsymbol{x}_i^{val}) == d^{opt}(\\boldsymbol{x}_i^{val})\\big),\\] where \\(n^{val}\\) is the sample size in the validation fold, \\(\\boldsymbol{x}_i^{val}\\) is the baseline characteristics of the \\(i\\)th patient in the validation fold, and \\(pm\\) stands for one PM method.\nBelow is how Figure 2 in the chapter was generated. It summarized the accuracy across all validation folds as a box plot so we can also learn the variability of accuracy across folds.\n\n##### Accuracy #####\n## Calculate % accuracy for each iteration & summary statistics\ndhats.accuracy <- dhats %>%\n  group_by(method, cv.i, fold) %>%\n  summarise(accuracy = sum(dhat == d)/n(), .groups = \"drop\") %>%\n  ungroup\n\n## Make the accuracy plot, Figure 2\ndhats.accuracy %>%\n  ggplot(aes(x = method, y = accuracy)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 1, linetype = 2, linewidth = 1, color = \"gray\") +\n  geom_hline(yintercept = 0.5, linetype = 2, linewidth = 1, color = \"gray\") +\n  theme_classic() +\n  labs(x = \"Method\", y = \"Accuracy\") +\n  theme(axis.text = element_text(size = 15),\n        axis.title.y = element_text(size = 15),\n        axis.title.x = element_text(size = 15),\n        axis.text.x = element_text(angle = 0, size = 15),\n        strip.text.x = element_text(size = 15))\n\n\n\n\n\n\n9.3.3 ITR agreement\nWhen we do not know the true data generating mechanism, e.g., real-world data, we cannot compare the estimated ITR with the true optimal ITR. However, we can compare the estimated ITR with another estimated ITR, and this is called agreement. Agreement is the proportion of patients whose estimated ITR of a method is the same as the estimated ITR of another method. Thus, agreement is between two methods. Mathematically, \\[Agreement_{1, 2}(\\boldsymbol{x}^{val}) = \\frac{1}{n^{val}} \\sum_{i = 1}^{n^{val}} I\\big( \\hat{d}_{1}(\\boldsymbol{x}^{val}) == \\hat{d}_{2} (\\boldsymbol{x}^{val}) \\big), \\] where \\(n^{val}\\) is the sample size in the validation fold, \\(\\boldsymbol{x}_i^{val}\\) is the baseline characteristics of the \\(i\\)th patient in the validation fold, and \\(1, 2\\) stands for method 1 and method 2.\n\n##### Agreement #####\ndhats.concat <- dhats %>%\n  arrange(cv.i, fold, method) %>%\n  mutate(iteration.fold = (as.numeric(str_extract(cv.i, \"[0-9]+\")) - 1) * 10 + as.numeric(str_extract(fold, \"[0-9]+\"))) %>% \n  dplyr::select(method, iteration.fold, dhat) %>%\n  group_by(method, iteration.fold) %>%\n  mutate(i = 1:n()) %>%  \n  ungroup\n\nm <- length(method.vec)\ndhats.agreement <- matrix(nrow = m, ncol = m)\ncolnames(dhats.agreement) <- method.vec\nrownames(dhats.agreement) <- method.vec\n\nfor(k in seq_len(m)){\n  for(j in seq(k, m)){\n    data.k <- dhats.concat %>% filter(method == method.vec[k])\n    data.j <- dhats.concat %>% filter(method == method.vec[j])\n    data.jk <- data.k %>% full_join(data.j, by = c(\"iteration.fold\", \"i\"))\n    dhats.agreement[k, j] <- dhats.agreement[j, k] <- sum(data.jk$dhat.x == data.jk$dhat.y, na.rm = T) / sum(is.na(data.jk$dhat.x) == FALSE & is.na(data.jk$dhat.y) == FALSE)\n  }\n}\n\n# Make the agreement plot, Figure 3\ncorrplot(dhats.agreement, method = \"color\",  type = \"lower\",\n         addCoef.col = \"orange\", number.cex = 1.5,\n         tl.cex = 1.2, cl.cex = 1.2, tl.col = \"black\", tl.srt = 0, tl.offset = 1.5)\n\n\n\n\nWe used the corrplot package to generate Figure 3 in the chapter but agreement can be visualized in other creative ways that you prefer."
  },
  {
    "objectID": "chapter_18.html#patient-well-being",
    "href": "chapter_18.html#patient-well-being",
    "title": "9  Visualization and interpretation of individualized treatment rule results",
    "section": "9.4 Patient well-being",
    "text": "9.4 Patient well-being\nPatient well-being is evaluated via the value function, which is defined as the expected outcome had they followed the specified ITR. Like a fortune teller’s crystal ball, this metric tells us how well the patients would do on average under each ITR. We can then compare across different ITRs and identify an optimal ITR. Cross validation is necessary here to mitigate over-fitting, and we visualized the value function results as error bar plots. The mean and standard deviation of the value functions have been preprocessed previously. We use ggplot() to generate the error bar plots. Figure 4A is the original value function estimates, and Figure 4B is the standardized value ratio estimates, which convert value functions to a ratio where 1 is always more desirable.\n\n##### Errorbar plot #####\n# Figure 4A\np4a <- vhats.dhat %>%\n  ggplot(aes(x = method, y = meanV)) +\n  geom_point(size = 8, shape = 16, color = \"navy\") +\n  geom_errorbar(aes(ymin = meanV - sdV, ymax = meanV + sdV), width = 0.3, size = 2, position = position_dodge(0.9), color = \"navy\") +\n  theme_classic() + xlab(\"\") + ylab(\"Cross-validated value (mean +- SD)\") +\n  theme(axis.text = element_text(size = 15), axis.title.y = element_text(size = 15)) +\n  geom_hline(yintercept = vhats.dhat$meanV[which(vhats.dhat$method == \"All 1\")], linetype = 2, size = 1.5, color = \"gray\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n##### Value ratio #####\n# Figure 4B\np4b <- vhats.dhat %>%\n  dplyr::select(method, contains(\"VR\"), n.nonnaU) %>%\n  ggplot(aes(x = method, y = meanVR)) +\n  geom_point(size = 8, color = \"navy\") +\n  geom_errorbar(aes(ymin = meanVR - sdVR, ymax = meanVR + sdVR), width = 0.3, size = 2, position = position_dodge(0.9), color = \"navy\") +\n  geom_hline(yintercept = 1, color = \"gray\", linetype = 2, size = 1) +\n  geom_hline(yintercept = 0, color = \"gray\", linetype = 2, size = 1) +\n  scale_y_continuous(breaks = seq(0, 1, length = 6)) +\n  theme_classic() +\n  labs(x = \"\", y = \"Value ratio of cross-validated estimated decision rule (mean +- SD)\") +\n  theme(axis.text = element_text(size = 13),\n        axis.title.y = element_text(size = 15),\n        axis.title.x = element_text(size = 15),\n        axis.text.x = element_text(size = 15),\n        strip.text.x = element_text(size = 12))\n\n# Figure 4\nggarrange(p4a, p4b, ncol = 2, nrow = 1, labels = c(\"A\", \"B\"))"
  },
  {
    "objectID": "chapter_18.html#responder-diagnostics",
    "href": "chapter_18.html#responder-diagnostics",
    "title": "9  Visualization and interpretation of individualized treatment rule results",
    "section": "9.5 Responder diagnostics",
    "text": "9.5 Responder diagnostics\n\n9.5.1 Validation\nThe package we used for the two score-based methods (Poisson and contrast regression), PrecMed, has built-in visualization tools to diagnose the results: validation box plots boxplot(), validation curves plot(), and area between curves (ABC) statistics abc().\n\n##### Validation of ITR scores #####\n# Figure 5A\np5a <- boxplot(modcv, ylab = \"Rate ratio between T=1 and T=0 in each subgroup\")\n# Figure 5B\np5b <- plot(modcv, ylab = \"Rate ratio between T=1 and T=0 in each subgroup\")\n\n# Figure 5\nggarrange(p5a, p5b, ncol = 1, nrow = 2, labels = c(\"A\", \"B\"))\n\n\n\n\nThe PrecMed package has more PM methods implemented other than Poisson and contrast regression that you can try, such as negative binomial and two regressions. See its documentation for more details.\n\n\n9.5.2 Univariate comparision of patient characteristics\nThe 60/40 cutoff was used in the chapter to split patients into “high responders” and “standard responders”. The function CreateTableOne() in the tableone package was used to generate a table comparing side-by-side the baseline characteristics between the two responder groups.\n\n##### Side-by-side baseline characteristic comparison between responder subgroups #####\ncutoff <- quantile(modpm$score.poisson, 0.6) # 60/40 high vs standard responder split\ndf[\"responder to T=1\"] <- ifelse(modpm$score.poisson < cutoff, \"High\", \"Standard\")\ndf[\"age.z\"] <- as.numeric(df$age.z)\ndf[\"previous_cost.z\"] <- as.numeric(df$previous_cost.z)\n\nlabs <- list(\"age.z\" = \"Standardized baseline age\", \"female\" = \"Female\",\n             \"prevtrtB\" = \"Previous treatment drug B\", \"prevtrtC\" = \"Previous treatment drug C\",\n             \"prevnumsymp1\" = \"Previous number of symptoms == 1\",\n             \"prevnumsymp2p\" = \"Previuos number of symptoms >= 2\",\n             \"previous_cost.z\" = \"Standardized previous medical cost\\n(excluding medication)\",\n             \"previos_number_relapses\" = \"Previous number of relapses\")\n\ntab <- CreateTableOne(vars = covars, strata = \"responder to T=1\", data = df, test = F) %>% print(smd = T)\n\n                                      Stratified by responder to T=1\n                                       High         Standard     SMD   \n  n                                     1200          800              \n  age.z (mean (SD))                     0.29 (0.94) -0.44 (0.92)  0.789\n  female (mean (SD))                    0.69 (0.46)  0.84 (0.36)  0.384\n  prevtrtB (mean (SD))                  0.67 (0.47)  0.02 (0.15)  1.867\n  prevtrtC (mean (SD))                  0.02 (0.13)  0.26 (0.44)  0.750\n  prevnumsymp1 (mean (SD))              0.33 (0.47)  0.15 (0.35)  0.431\n  prevnumsymp2p (mean (SD))             0.05 (0.22)  0.11 (0.31)  0.208\n  previous_cost.z (mean (SD))          -0.08 (1.00)  0.12 (0.99)  0.203\n  previous_number_relapses (mean (SD))  0.41 (0.64)  0.47 (0.68)  0.104\n\n\nWe can directly present the table or visualize the comparison with errorbar plots, which is what the chapter presented (Figure 6A). Here we show both. Tables are helpful if specific numbers are important but readers would have to perform mental comparison to understand which value is higher, whereas plots are helpful if you want people to quickly identify the larger differences and not focus on the specific values of certain results.\n\nsmd <- as_tibble(tab, rownames = \"var\") %>%\n  rowwise() %>%\n  mutate(variable = as.factor(str_extract(var, \".*(?= \\\\(mean \\\\(SD\\\\)\\\\))\"))) %>%\n  filter(!is.na(variable)) %>%\n  arrange(desc(SMD)) %>%\n  mutate(smd = paste0(\"SMD =\", SMD),\n         variable = labs[[variable]]) %>%\n  dplyr::select(variable, smd) %>%\n  mutate(ID = 1)\n\nlevels <- unique(smd$variable)\n\np6a <- df %>%\n  mutate(ID = 1:n()) %>%\n  dplyr::select(all_of(covars), ID, contains(\"responder\")) %>%\n  melt(id = c(\"ID\", \"responder to T=1\")) %>%\n  rowwise() %>%\n  mutate(variable = labs[[variable]]) %>%\n  left_join(smd, by = c(\"variable\", \"ID\")) %>%\n  mutate(variable2 = factor(variable, levels = levels)) %>%\n  ggplot(aes(x = reorder(variable2, desc(variable2)), color = `responder to T=1`, y = value, group = `responder to T=1`)) +\n  stat_summary(fun = mean, geom = \"point\", size = 4, position = position_dodge(width = 0.5)) +\n  stat_summary(fun.data = mean_sdl, geom = \"errorbar\", position = position_dodge(width = 0.5), width= 0.3, size = 1.2) +\n  geom_hline(yintercept = 0, color = \"gray\", linetype = \"dashed\") +\n  geom_text(aes(label = smd), hjust = -0.5, y = -1.5, color = \"darkgray\", size = 3.5) +\n  # facet_wrap(~ variable2, nrow = 4) +\n  labs(x = \"Baseline patient characteristic\",\n       y = \"Mean +- SD\") +\n  coord_flip() +\n  scale_color_brewer(palette = \"Set2\")  +\n  theme_classic() +\n  theme(legend.position = \"top\",\n        axis.text = element_text(size = 13),\n        axis.title.y = element_text(size = 15),\n        axis.title.x = element_text(size = 15),\n        axis.text.x = element_text(size = 15),\n        strip.text.x = element_text(size = 12))\n\n# Figure 6A\nggarrange(p6a, nrow = 1, labels = c(\"A\"))\n\n\n\n\nWe can also show the density of ITR scores obtained from the score-based methods. The results can be found in modpm and we used histogram to visualize (Figure 6B).\n\n##### Density of ITR score #####\ndataplot <- data.frame(score = factor(rep(c(\"Naive Poisson\", \"Contrast Regression\"),\n                                          each = length(modpm$score.poisson))),\n                       value = c(modpm$score.poisson, modpm$score.contrastReg))\n\np6b <- dataplot %>%\n  ggplot(aes(x = value, fill = score)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\"dodgerblue\", \"gray30\")) +\n  geom_vline(xintercept = 0, color = \"darkgray\", linetype = \"dashed\", size = 1) +\n  labs(x = \"Estimated CATE score\", y = \"Density\", fill = \"Method\") +\n  theme_classic() +\n  theme(legend.position = c(0.2, 0.8),\n        axis.text = element_text(size = 13),\n        axis.title.y = element_text(size = 15),\n        axis.title.x = element_text(size = 15),\n        axis.text.x = element_text(size = 15),\n        strip.text.x = element_text(size = 12))\n\nThe ITR scores are essentially a linear combination of the baseline characteristics, thus it might be also of interest for one to know the corresponding coefficients (or weights) which shows how much each baseline variable contributed to the ITR score. To make it comparable across different scales of the baseline variables, we used the scaled data and the model result modpm.s was used to extract the coefficients and visualize as a bar plot. The coefficients can be presented in a table as well.\n\n# Coefficients\ncoef <- modpm.s$coefficients\n\np6c <- coef %>%\n  as_tibble(rownames = \"varname\") %>%\n  melt(id.vars = \"varname\") %>%\n  filter(variable == \"poisson\", varname != \"(Intercept)\") %>%\n  mutate(absval = abs(value),\n         sign = ifelse(value > 0, \"+\", \"-\")) %>%\n  arrange(absval) %>%\n  mutate(varname = factor(varname, levels = unique(varname))) %>%\n  ggplot(aes(x = varname, y = absval, fill = sign)) +\n  geom_bar(stat = \"identity\", width = 0.5) +\n  scale_fill_brewer(palette = \"Set1\") +\n  scale_x_discrete(labels = labs) +\n  coord_flip() +\n  labs(y = \"Absolute value of the estimated coefficient of CATE scores\\nbased on Poisson regression\", x = \"Baseline patient characteristic\") +\n  theme_minimal() +\n  theme(legend.position = c(0.8, 0.2),\n        axis.text = element_text(size = 13),\n        axis.title.y = element_text(size = 15),\n        axis.title.x = element_text(size = 15),\n        axis.text.x = element_text(size = 15),\n        strip.text.x = element_text(size = 12))\n\n# Figure 6B, 6C\nggarrange(p6b, p6c, nrow = 2, labels = c(\"B\", \"C\"))\n\n\n\n# Coefficients presented as a table\ncoef %>% round(2) %>% kable() %>% kable_styling(full_width = F)\n\n\n\n \n  \n      \n    poisson \n    contrastReg \n    SE_contrastReg \n  \n \n\n  \n    (Intercept) \n    -0.30 \n    -0.25 \n    0.46 \n  \n  \n    age.z \n    -0.21 \n    -0.23 \n    0.17 \n  \n  \n    female \n    0.20 \n    0.29 \n    0.43 \n  \n  \n    prevtrtB \n    -0.63 \n    -0.86 \n    0.36 \n  \n  \n    prevtrtC \n    0.19 \n    0.21 \n    0.54 \n  \n  \n    prevnumsymp1 \n    -0.14 \n    -0.42 \n    0.39 \n  \n  \n    prevnumsymp2p \n    0.20 \n    1.05 \n    0.58 \n  \n  \n    previous_cost.z \n    0.06 \n    0.13 \n    0.18 \n  \n  \n    previous_number_relapses \n    0.08 \n    0.26 \n    0.23"
  },
  {
    "objectID": "chapter_18.html#version-info",
    "href": "chapter_18.html#version-info",
    "title": "9  Visualization and interpretation of individualized treatment rule results",
    "section": "Version info",
    "text": "Version info\nThis chapter was rendered using the following version of R and its packages:\n\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] table1_1.4.3      fastDummies_1.6.3 reshape2_1.4.4    truncnorm_1.0-9  \n [5] kableExtra_1.3.4  knitr_1.42        ggpubr_0.6.0      MASS_7.3-58.4    \n [9] corrplot_0.92     caret_6.0-94      lattice_0.21-8    gbm_2.1.8.1      \n[13] tableone_0.13.2   qwraps2_0.5.2     rpart.plot_3.1.1  rpart_4.1.19     \n[17] precmed_1.0.0     DTRreg_1.7        magrittr_2.0.3    lubridate_1.9.2  \n[21] forcats_1.0.0     stringr_1.5.0     dplyr_1.1.2       purrr_1.0.1      \n[25] readr_2.1.4       tidyr_1.3.0       tibble_3.2.1      ggplot2_3.4.2    \n[29] tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3    geeM_0.10.1           rstudioapi_0.14      \n  [4] jsonlite_1.8.4        shape_1.4.6           MESS_0.5.9           \n  [7] ggstance_0.3.6        farver_2.1.1          rmarkdown_2.21       \n [10] geepack_1.3.9         vctrs_0.6.2           rstatix_0.7.2        \n [13] webshot_0.5.4         htmltools_0.5.5       haven_2.5.2          \n [16] survey_4.2-1          broom_1.0.4           Formula_1.2-5        \n [19] pROC_1.18.2           parallelly_1.36.0     htmlwidgets_1.6.2    \n [22] plyr_1.8.8            gam_1.22-2            lifecycle_1.0.3      \n [25] iterators_1.0.14      pkgconfig_2.0.3       Matrix_1.5-4         \n [28] R6_2.5.1              fastmap_1.1.1         future_1.32.0        \n [31] digest_0.6.31         colorspace_2.1-0      fansi_1.0.4          \n [34] timechange_0.2.0      httr_1.4.6            polyclip_1.10-4      \n [37] abind_1.4-5           compiler_4.3.0        withr_2.5.0          \n [40] backports_1.4.1       carData_3.0-5         DBI_1.1.3            \n [43] ggforce_0.4.1         ggsignif_0.6.4        lava_1.7.2.1         \n [46] ModelMetrics_1.2.2.2  tools_4.3.0           future.apply_1.11.0  \n [49] nnet_7.3-18           glue_1.6.2            DiagrammeR_1.0.10    \n [52] nlme_3.1-162          grid_4.3.0            ggformula_0.10.4     \n [55] generics_0.1.3        recipes_1.0.6         gtable_0.3.3         \n [58] labelled_2.11.0       tzdb_0.4.0            class_7.3-21         \n [61] data.table_1.14.8     hms_1.1.3             xml2_1.3.4           \n [64] car_3.1-2             utf8_1.2.3            foreach_1.5.2        \n [67] pillar_1.9.0          mitools_2.4           splines_4.3.0        \n [70] tweenr_2.0.2          survival_3.5-5        tidyselect_1.2.0     \n [73] svglite_2.1.1         stats4_4.3.0          xfun_0.39            \n [76] hardhat_1.3.0         mosaicCore_0.9.2.1    timeDate_4022.108    \n [79] visNetwork_2.1.2      stringi_1.7.12        yaml_2.3.7           \n [82] evaluate_0.21         codetools_0.2-19      data.tree_1.0.0      \n [85] cli_3.6.1             randomForestSRC_3.2.2 systemfonts_1.0.4    \n [88] munsell_0.5.0         Rcpp_1.0.10           globals_0.16.2       \n [91] parallel_4.3.0        gower_1.0.1           listenv_0.9.0        \n [94] glmnet_4.1-7          viridisLite_0.4.2     ipred_0.9-14         \n [97] scales_1.2.1          prodlim_2023.03.31    ggridges_0.5.4       \n[100] rlang_1.1.1           rvest_1.0.3"
  },
  {
    "objectID": "chapter_18.html#references",
    "href": "chapter_18.html#references",
    "title": "9  Visualization and interpretation of individualized treatment rule results",
    "section": "References",
    "text": "References\n\n\n\n\nYadlowsky, Steve, Fabio Pellegrini, Federica Lionetto, Stefan Braune, and Lu Tian. 2020. “Estimation and Validation of Ratio-Based Conditional Average Treatment Effects Using Observational Data.” Journal of the American Statistical Association 116 (533): 335–52. https://doi.org/10.1080/01621459.2020.1772080.\n\n\nZhao, Lihui, Lu Tian, Tianxi Cai, Brian Claggett, and L. J. Wei. 2013. “Effectively Selecting a Target Population for a Future Comparative Study.” Journal of the American Statistical Association 108 (502): 527–39. https://doi.org/10.1080/01621459.2013.770705."
  }
]