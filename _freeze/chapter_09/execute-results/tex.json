{
  "hash": "14d64131f5545088b37716fda3bc68d7",
  "result": {
    "markdown": "---\ntitle: \"Dealing with missing data\"\nauthors:   \n  - name: Johanna Munoz\n    affiliations:\n      - ref: julius\n  - name: Thomas Debray\n    orcid: 0000-0002-1790-2719\n    affiliations:\n      - ref: smartdas\naffiliations:\n  - id: smartdas\n    name: Smart Data Analysis and Statistics B.V.\n    city: Utrecht\n  - id: julius\n    name: Julius Center for Health Sciences and Primary Care\n    city: Utrecht\nformat:\n  html:\n    toc: true\n    number-sections: true\nexecute:\n  cache: true\n---\n\n\n\n\n\nIn this example, we consider the estimation of comparative treatment effects in the absence of treatment-effect heterogeneity.\n\n## Setup\n\n### Prepare R environment\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-2_dcd5bb49bee71abd3b89c2db249cb813'}\n\n```{.r .cell-code}\nlibrary(mice)\nlibrary(dplyr)\nlibrary(ggmice)\nlibrary(MatchThem)\n```\n:::\n\n\n\n### Generating an observational dataset\n\nWe can simulate an observational dataset of $N = 3000$ patients as follows:\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-3_e33730690e76465943d5cf2719c90c64'}\n\n```{.r .cell-code}\ndata_noHTE <- generate_data(n = 3000, seed = 1234) \n```\n:::\n\n\n\nThis dataset does not (yet) contain any missing values;\n\nThe simulated dataset contains two treatment groups with differences in baseline characteristics. For example, the figure below shows that we have baseline imbalance in age.\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/fig-dist-confounders_e84213db2980f435f5878e628dca2e0a'}\n::: {.cell-output-display}\n![Distribution of the EDSS score at each time point](chapter_09_files/figure-pdf/fig-dist-confounders-1.pdf){#fig-dist-confounders}\n:::\n:::\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-5_37f09aaa13662ff7a196d7f49c5e0fdf'}\n\n:::\n\n\n\n### Generating missing values\n\nMissing values can be generated using the function `getmissdata()`, which considers the following patterns of missingness for the previous number of relapses (`prerelapse_num`):\n\n1.  MAR: missingness depends on `age` and `sex`\n2.  MART: missingness depends on `age`, `sex` and the treatment variable `treatment`\n3.  MARTY: missingness depends on `age`, `sex`, `treatment` and the outcome variable `y`\n4.  MNAR: missingness depends on `age`, `sex` and `prerelapse_num`\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-6_171e88456247e188c3abb1804f2dd47b'}\n\n```{.r .cell-code}\nmdata_noHTE <- getmissdata(data_noHTE, \"MART\")\n```\n:::\n\n\n\nAfter introducing missing values, we only have complete data for $N=$ 946 patients.\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-7_e122077d53335e7d507cb61b2ef9f727'}\n::: {.cell-output-display}\n\\begin{table}\n\n\\caption{\\label{tab:unnamed-chunk-7}Baseline characteristics of the incomplete dataset.}\n\\centering\n\\begin{tabular}[t]{llll}\n\\toprule\nÂ  & DMF & TERI & Overall\\\\\n\\midrule\n & (N=2265) & (N=735) & (N=3000)\\\\\n\\addlinespace[0.3em]\n\\multicolumn{4}{l}{\\textbf{Age (years)}}\\\\\n\\hspace{1em}Mean (SD) & 44.4 (10.0) & 51.3 (8.72) & 46.2 (10.1)\\\\\n\\hspace{1em}Median [Min, Max] & 45.0 [18.0, 64.0] & 53.0 [23.0, 64.0] & 47.0 [18.0, 64.0]\\\\\n\\hspace{1em}Missing & 248 (10.9\\%) & 57 (7.8\\%) & 305 (10.2\\%)\\\\\n\\addlinespace[0.3em]\n\\multicolumn{4}{l}{\\textbf{Female Sex}}\\\\\n\\hspace{1em}Yes & 1740 (76.8\\%) & 526 (71.6\\%) & 2266 (75.5\\%)\\\\\n\\hspace{1em}No & 525 (23.2\\%) & 209 (28.4\\%) & 734 (24.5\\%)\\\\\n\\addlinespace[0.3em]\n\\multicolumn{4}{l}{\\textbf{Efficacy of previous DMT}}\\\\\n\\hspace{1em}None & 740 (32.7\\%) & 325 (44.2\\%) & 1065 (35.5\\%)\\\\\n\\hspace{1em}Low & 190 (8.4\\%) & 59 (8.0\\%) & 249 (8.3\\%)\\\\\n\\hspace{1em}Medium or High & 830 (36.6\\%) & 246 (33.5\\%) & 1076 (35.9\\%)\\\\\n\\hspace{1em}Missing & 505 (22.3\\%) & 105 (14.3\\%) & 610 (20.3\\%)\\\\\n\\addlinespace[0.3em]\n\\multicolumn{4}{l}{\\textbf{Prior medical costs}}\\\\\n\\hspace{1em}Mean (SD) & 9970 (10700) & 25500 (35400) & 13900 (21200)\\\\\n\\hspace{1em}Median [Min, Max] & 6530 [164, 102000] & 12500 [259, 337000] & 7450 [164, 337000]\\\\\n\\hspace{1em}Missing & 257 (11.3\\%) & 52 (7.1\\%) & 309 (10.3\\%)\\\\\n\\addlinespace[0.3em]\n\\multicolumn{4}{l}{\\textbf{Number of prior symptoms}}\\\\\n\\hspace{1em}0 & 157 (6.9\\%) & 58 (7.9\\%) & 215 (7.2\\%)\\\\\n\\hspace{1em}1 & 1169 (51.6\\%) & 411 (55.9\\%) & 1580 (52.7\\%)\\\\\n\\hspace{1em}>=2 & 435 (19.2\\%) & 159 (21.6\\%) & 594 (19.8\\%)\\\\\n\\hspace{1em}Missing & 504 (22.3\\%) & 107 (14.6\\%) & 611 (20.4\\%)\\\\\n\\addlinespace[0.3em]\n\\multicolumn{4}{l}{\\textbf{Number of prior relapses}}\\\\\n\\hspace{1em}Mean (SD) & 0.453 (0.671) & 0.408 (0.646) & 0.436 (0.662)\\\\\n\\hspace{1em}Median [Min, Max] & 0 [0, 4.00] & 0 [0, 3.00] & 0 [0, 4.00]\\\\\n\\hspace{1em}Missing & 1365 (60.3\\%) & 152 (20.7\\%) & 1517 (50.6\\%)\\\\\n\\bottomrule\n\\end{tabular}\n\\end{table}\n:::\n:::\n\n\n\n## Analysis of incomplete data\n\n### Complete Case Analysis\n\nBelow, we describe how to estimate the ATE using propensity score matching.\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-8_3ca0003d80e900d766f345d3360f816a'}\n\n```{.r .cell-code}\nimpdata <- mdata_noHTE[complete.cases(mdata_noHTE), ]\n\n# Apply Matching\nmout <- matchit(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num, \n                data = impdata,\n                family = binomial,\n                method = \"full\",\n                caliper = 0.2,\n                estimand = \"ATE\",\n                replace = FALSE) \n\nmdata <- as.data.table(match.data(mout))\nmatch_mod <- glm(\"y ~ DMF + offset(log(years))\",\n                 family = poisson(link = \"log\"),\n                 data = mdata,\n                 weights = weights)\n\n# Estimate robust variance-covariance matrix\ntx_var <- vcovCL(match_mod, cluster = ~ subclass, sandwich = TRUE) \n```\n:::\n\n\n\nWe can extract the treatment effect estimate as follows:\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-9_cc073171570a3bb5dd90499d4e83f0e2'}\n\n```{.r .cell-code}\n# Treatment effect estimate (log rate ratio)\ncoef(match_mod)[\"DMF\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       DMF \n-0.3685717 \n```\n:::\n\n```{.r .cell-code}\n# Standard error\nsqrt(tx_var[\"DMF\", \"DMF\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1521243\n```\n:::\n:::\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-10_264106a44ec8abf40982d821bb06453c'}\n\n:::\n\n\n\n### Multiple Imputation (within method)\n\nIn this approach, we will generate $m=5$ imputed datasets and perform matching within each imputed dataset. We first need to specify how the variables `prevDMTefficacy`, `premedicalcost`, `numSymptoms`, `prerelapse_num` and `age` will be imputed:\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-11_3e8e7cb88f2c37b3e3af3b1cccdba070'}\n\n```{.r .cell-code}\n# We add a covariate for log(years)\nimpdata <-  mdata_noHTE %>% mutate(logyears = log(years))\n\n# Specify the conditional imputation models\nform_y <- list(prevDMTefficacy ~ age + female + logyears + premedicalcost + numSymptoms + \n                 treatment + prerelapse_num + y,\n               premedicalcost ~ age + female + logyears + prevDMTefficacy + numSymptoms + \n                 treatment + prerelapse_num + y,\n               numSymptoms ~ age + female + premedicalcost + logyears + prevDMTefficacy + \n                 prerelapse_num + treatment + y,\n               prerelapse_num ~ age + female + premedicalcost + logyears + prevDMTefficacy + \n                 numSymptoms + treatment + y,\n               age ~ prerelapse_num + female + premedicalcost + logyears + prevDMTefficacy + \n                 numSymptoms + treatment + y)\nform_y <- name.formulas(form_y)\n\n# Adopt predictive mean matching for imputing the incomplete variables\nimp0 <- mice(impdata, form = form_y, maxit = 0)\nmethod <- imp0$method\nmethod[\"numSymptoms\"] <- \"pmm\"\nmethod[\"prevDMTefficacy\"] <- \"pmm\"\n\n# Generate 5 imputed datasets\nimp <- mice(impdata, form = form_y, method = method, m = 5, maxit = 100)\n```\n:::\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-12_42eb6dc71008cf16e821a6192e15da56'}\n\n:::\n\n\n\nWe can now estimate the ATE using propensity score analysis in each of the imputed datasets. We here adopt full matching without replacement.\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-13_ce860e4298d0d13d192fdfaea4c5912a'}\n\n```{.r .cell-code}\n# Matching based on PS model\nmout <- matchthem(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num,\n                  datasets = imp,\n                  approach = \"within\",\n                  method = \"full\",\n                  caliper = 0.2,\n                  family = binomial,\n                  estimand = \"ATE\",\n                  distance = \"glm\",\n                  link = \"logit\",\n                  replace = FALSE) \n```\n:::\n\n\n\nThe results are then combined using Rubin's rules. We adopt robust standard errors to account for clustering of matched individuals.\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-14_6cd263535358ebf1c22a0e7f7b778a55'}\n\n```{.r .cell-code}\nmatch_mod <- summary(pool(with(mout, svyglm(y ~ DMF + offset(log(years)), \n                                            family = poisson(link = \"log\")),\n                               cluster = TRUE)), conf.int = TRUE)\n```\n:::\n\n\n\nWe can extract the treatment effect estimate and corresponding standard error as follows:\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-15_b3ca906850f2c20cb40c57f966fa4748'}\n\n```{.r .cell-code}\n# Treatment effect estimate (log rate ratio)\n(match_mod %>% filter(term == \"DMF\"))$estimate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.1554094\n```\n:::\n\n```{.r .cell-code}\n# Standard error\n(match_mod %>% filter(term == \"DMF\"))$std.error\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2202132\n```\n:::\n:::\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-16_9c67772858e3e3f957c9e0555bdd95fc'}\n\n:::\n\n\n\n### Multiple Imputation (across method)\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-17_07b350b166e7b721b295792973f78967'}\n\n```{.r .cell-code}\n# Matching based on PS model\nmout <- matchthem(DMF ~ age + female + prevDMTefficacy + premedicalcost + prerelapse_num,\n                  datasets = imp,\n                  approach = \"across\",\n                  method = \"full\",\n                  caliper = 0.2,\n                  family = binomial,\n                  estimand = \"ATE\",\n                  distance = \"glm\",\n                  link = \"logit\",\n                  replace = FALSE) \n```\n:::\n\n\n\nThe results are then combined using Rubin's rules. We adopt robust standard errors to account for clustering of matched individuals.\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-18_fdde36afae07d4da47aeb185a2aa08f3'}\n\n```{.r .cell-code}\nmatch_mod <- summary(pool(with(mout, svyglm(y ~ DMF + offset(log(years)), \n                                            family = poisson(link = \"log\")),\n                               cluster = TRUE)), conf.int = TRUE)\n```\n:::\n\n\n\nWe can extract the treatment effect estimate and corresponding standard error as follows:\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-19_7a9260eb5cce5811e9e38f2b7f69fbf7'}\n\n```{.r .cell-code}\n# Treatment effect estimate (log rate ratio)\n(match_mod %>% filter(term == \"DMF\"))$estimate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.3461563\n```\n:::\n\n```{.r .cell-code}\n# Standard error\n(match_mod %>% filter(term == \"DMF\"))$std.error\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1351187\n```\n:::\n:::\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-20_5d9e929480d93bfd66ba6f693429b44c'}\n\n:::\n\n\n\n## Convergence checking\n\nWe can inspect convergence for the imputed variable `prerelapse_num` using a trace plot:\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-21_e0e093080acad959ae86cad645435200'}\n\n```{.r .cell-code}\nplot_trace(imp, vrb = \"prerelapse_num\")\n```\n\n::: {.cell-output-display}\n![](chapter_09_files/figure-pdf/unnamed-chunk-21-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Results\n\nAnalysis methods:\n\n-   **Full Data**: The treatment effect is estimated in the original data of $N=3000$ patients where no missing values are present. This estimate can be used as a benchmark to compare the missing data methods.\n-   **Complete Case Analysis**: The treatment effect is estimated using all data from $N=$ 946 patients that do not have any missing values.\n-   **Missing Indicator**: The treatment effect is estimated in the incomplete dataset of $N=3000$ patients. The propensity score model includes a missing indicator variable for each incomplete covariate.\n-   **MICE (within method)**: A treatment effect is estimated within each imputed dataset using propensity score analysis. Using Rubin's rule, the five treatment effects are combined into a single treatment effect.\n-   **MICE (ITE method)**: The missing covariates and potential outcomes are imputed simultaneously. Treatment effect estimates are derived by taking the average of the individualized treatment effect estimates Y\\|DMF - Y\\|TERI.\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-22_262f12a96e4511837f46b9d73ba63f43'}\n::: {.cell-output-display}\n![](chapter_09_files/figure-pdf/unnamed-chunk-22-1.pdf)\n:::\n:::\n\n\n\n## Version info {.unnumbered}\nThis chapter was rendered using the following version of R and its packages:\n\n\n\n::: {.cell hash='chapter_09_cache/pdf/unnamed-chunk-23_f0ccec1911dc0d9b0e0cc5342caa7329'}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19044)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=Dutch_Netherlands.utf8  LC_CTYPE=Dutch_Netherlands.utf8   \n[3] LC_MONETARY=Dutch_Netherlands.utf8 LC_NUMERIC=C                      \n[5] LC_TIME=Dutch_Netherlands.utf8    \n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggmice_0.0.1      table1_1.4.3      kableExtra_1.3.4  ggplot2_3.4.2    \n [5] missForest_1.5    sandwich_3.0-2    PSweight_1.1.8    MatchThem_1.0.1  \n [9] mice_3.15.0       cobalt_4.5.1      WeightIt_0.14.1   MatchIt_4.5.3    \n[13] optmatch_0.10.6   truncnorm_1.0-9   MASS_7.3-58.3     survey_4.2-1     \n[17] survival_3.5-5    Matrix_1.5-4      data.table_1.14.8 tidyr_1.3.0      \n[21] dplyr_1.1.1      \n\nloaded via a namespace (and not attached):\n [1] nlme_3.1-162         webshot_0.5.4        RColorBrewer_1.1-3  \n [4] httr_1.4.6           numDeriv_2016.8-1.1  tools_4.2.3         \n [7] backports_1.4.1      doRNG_1.8.6          utf8_1.2.3          \n[10] R6_2.5.1             DBI_1.1.3            colorspace_2.1-0    \n[13] nnet_7.3-19          withr_2.5.0          gbm_2.1.8.1         \n[16] tidyselect_1.2.0     compiler_4.2.3       cli_3.6.1           \n[19] rvest_1.0.3          see_0.7.5            xml2_1.3.3          \n[22] labeling_0.4.2       scales_1.2.1         nnls_1.4            \n[25] randomForest_4.7-1.1 systemfonts_1.0.4    stringr_1.5.0       \n[28] digest_0.6.31        minqa_1.2.5          rmarkdown_2.21      \n[31] svglite_2.1.1        pkgconfig_2.0.3      htmltools_0.5.5     \n[34] lme4_1.1-32          fastmap_1.1.1        itertools_0.1-3     \n[37] rlang_1.1.0          rstudioapi_0.14      generics_0.1.3      \n[40] farver_2.1.1         zoo_1.8-12           jsonlite_1.8.4      \n[43] magrittr_2.0.3       Formula_1.2-5        Rcpp_1.0.10         \n[46] munsell_0.5.0        fansi_1.0.4          lifecycle_1.0.3     \n[49] stringi_1.7.12       chk_0.8.1            yaml_2.3.7          \n[52] parallel_4.2.3       crayon_1.5.2         lattice_0.21-8      \n[55] splines_4.2.3        knitr_1.42           pillar_1.9.0        \n[58] boot_1.3-28.1        rngtools_1.5.2       codetools_0.2-19    \n[61] glue_1.6.2           evaluate_0.21        mitools_2.4         \n[64] vctrs_0.6.1          nloptr_2.0.3         foreach_1.5.2       \n[67] gtable_0.3.3         purrr_1.0.1          xfun_0.39           \n[70] SuperLearner_2.0-28  broom_1.0.4          viridisLite_0.4.2   \n[73] tibble_3.2.1         iterators_1.0.14     gam_1.22-2          \n[76] rlemon_0.2.1        \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}