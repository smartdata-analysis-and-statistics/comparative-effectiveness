{
  "hash": "288f1cbf59093c11297a5f6038af75bc",
  "result": {
    "markdown": "---\ntitle: \"Prediction of individual treatment effect using data from multiple studies\"\nauthors:   \n  - name: Orestis Efthimiou\n    orcid: 0000-0002-0955-7572\n    affiliations:\n      - ref: ubern\naffiliations:\n  - id: smartdas\n    name: Smart Data Analysis and Statistics B.V.\n    city: Utrecht\n  - id: ubern\n    name: Institute of Social and Preventive Medicine (ISPM)\n    city: Bern, Switzerland\nformat:\n  html:\n    toc: true\n    number-sections: true\nexecute:\n  cache: true\nbibliography: 'https://api.citedrive.com/bib/0d25b38b-db8f-43c4-b934-f4e2f3bd655a/references.bib?x=eyJpZCI6ICIwZDI1YjM4Yi1kYjhmLTQzYzQtYjkzNC1mNGUyZjNiZDY1NWEiLCAidXNlciI6ICIyNTA2IiwgInNpZ25hdHVyZSI6ICI0MGFkYjZhMzYyYWE5Y2U0MjQ2NWE2ZTQzNjlhMWY3NTk5MzhhNzUxZDNjYWIxNDlmYjM4NDgwOTYzMzY5YzFlIn0=/bibliography.bib'\n---\n\n\nIn this chapter, we discuss statistical methods for developing models to predict patient-level treatment effects using data from multiple randomized and non-randomized studies. We will first present prediction models that assume a constant treatment effect and discuss how to address heterogeneity in baseline risk. Subsequently, we will discuss approaches that allow for treatment effect modification by adopting two different approaches in an IPD-MA context, namely the risk modelling and the effect modelling approach. For both approaches, we will first discuss how to combine IPD from RCTs comparing the same two treatments. We will then discuss how these methods can be extended to include randomized data from multiple treatments, real-world data, and published aggregate data. We will discuss statistical software to implement these approaches and provide example code as supporting information. Real examples will be used throughout to illustrate the main methods.\n\n## Estimating heterogeneous treatment effects in pairwise meta-analysis\n\n\n::: {.cell hash='chapter_16_cache/html/unnamed-chunk-1_3c243efc9292b7df30addaa04fb321ee'}\n\n:::\n\n\nWe hereby provide code for estimating patient-level treatment effects for the case when we have patient-level data from multiple randomized trials.\n\n### Example of a continuous outcome\n\n#### Setup\nWe  start by simulating an artificial dataset using the R package **bipd**: \n\n\n::: {.cell hash='chapter_16_cache/html/ds_1bdc458905c46ccdf3a0d82c6a653e84'}\n\n```{.r .cell-code}\nlibrary(bipd)\nds <- generate_ipdma_example(type = \"continuous\")\n```\n:::\n\n\nLet us have a look at the dataset:\n\n::: {.cell hash='chapter_16_cache/html/ds2_5e1e23c5b1fa898e5ed89dd80ea1683d'}\n\n```{.r .cell-code}\nhead(ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studyid treat         z1         z2  y\n1       1     0 -1.4080333  0.4976585 11\n2       1     1 -0.2808028  0.7054476 10\n3       1     1  0.1434411 -0.6242589  8\n4       1     0 -0.5011206  1.0614987 11\n5       1     1 -0.6102570  0.1756299  9\n6       1     0 -0.7205885  1.9777567 11\n```\n:::\n:::\n\n\nThe simulated dataset contains information on the following variables:\n\n- the treatment indicator `treat`, which takes the values 0 for control and 1 for active treatment\n- two prognostic variables `z1` and `z2`\n- the continuous outcome `y`\n- a trial indicator `studyid`\n\n\n::: {#tbl-summary-continuous_outcome-data .cell tbl-cap='The simulated dataset with a continuous outcome' hash='chapter_16_cache/html/tbl-summary-continuous_outcome-data_cf83afa9e1cc9a4d65e698b32ad2abd8'}\n::: {.cell-output-display}\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>0<br><span class='stratn'>(N=300)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>1<br><span class='stratn'>(N=300)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=600)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>z1</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>-0.0375 (0.952)</td>\n<td>0.0952 (0.986)</td>\n<td>0.0288 (0.971)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Median [Min, Max]</td>\n<td class='lastrow'>-0.0861 [-2.88, 2.88]</td>\n<td class='lastrow'>0.0943 [-2.99, 3.25]</td>\n<td class='lastrow'>0.00957 [-2.99, 3.25]</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>z2</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>-0.0839 (1.01)</td>\n<td>-0.122 (1.07)</td>\n<td>-0.103 (1.04)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Median [Min, Max]</td>\n<td class='lastrow'>-0.0329 [-2.96, 2.81]</td>\n<td class='lastrow'>-0.145 [-3.11, 2.66]</td>\n<td class='lastrow'>-0.0843 [-3.11, 2.81]</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>studyid</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>1</td>\n<td>44 (14.7%)</td>\n<td>56 (18.7%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2</td>\n<td>48 (16.0%)</td>\n<td>52 (17.3%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>3</td>\n<td>47 (15.7%)</td>\n<td>53 (17.7%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>4</td>\n<td>59 (19.7%)</td>\n<td>41 (13.7%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>5</td>\n<td>55 (18.3%)</td>\n<td>45 (15.0%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>6</td>\n<td class='lastrow'>47 (15.7%)</td>\n<td class='lastrow'>53 (17.7%)</td>\n<td class='lastrow'>100 (16.7%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Model fitting\nWe synthesize the evidence using a Bayesian random effects meta-analysis model. The model is given in Equation 16.7 of the book. First we need set up the data and create the model:\n\n::: {.cell hash='chapter_16_cache/html/MAcont1_200bd49993dfb87dbbef5e38db5e5b2c'}\n\n```{.r .cell-code}\nipd <- with(ds, ipdma.model.onestage(y = y, study = studyid, treat = treat,\n                                     X = cbind(z1, z2), \n                                     response = \"normal\", \n                                     shrinkage = \"none\"), \n                                     type=\"random\")\n```\n:::\n\n\nThe JAGS model can be accessed as follows:\n\n\n::: {.cell hash='chapter_16_cache/html/MAcont2_2d035deb92effc2a2c45c21fd6436947'}\n\n```{.r .cell-code}\nipd$model.JAGS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction () \n{\n    for (i in 1:Np) {\n        y[i] ~ dnorm(mu[i], sigma)\n        mu[i] <- alpha[studyid[i]] + inprod(beta[], X[i, ]) + \n            (1 - equals(treat[i], 1)) * inprod(gamma[], X[i, \n                ]) + d[studyid[i], treat[i]]\n    }\n    sigma ~ dgamma(0.001, 0.001)\n    for (j in 1:Nstudies) {\n        d[j, 1] <- 0\n        d[j, 2] ~ dnorm(delta[2], tau)\n    }\n    sd ~ dnorm(0, 1)\n    T(0, )\n    tau <- pow(sd, -2)\n    delta[1] <- 0\n    delta[2] ~ dnorm(0, 0.001)\n    for (j in 1:Nstudies) {\n        alpha[j] ~ dnorm(0, 0.001)\n    }\n    for (k in 1:Ncovariate) {\n        beta[k] ~ dnorm(0, 0.001)\n    }\n    for (k in 1:Ncovariate) {\n        gamma[k] ~ dnorm(0, 0.001)\n    }\n}\n<environment: 0x0000022fbe8d6760>\n```\n:::\n:::\n\nWe can fit the treatment effect model as follows:\n\n\n::: {.cell hash='chapter_16_cache/html/MAcont3_fca9fd1eadfa82658538018f55ed1ec1'}\n\n```{.r .cell-code}\nsamples <- ipd.run(ipd, n.chains = 2, n.iter = 20,\n                   pars.save = c(\"alpha\", \"beta\", \"delta\", \"sd\", \"gamma\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 600\n   Unobserved stochastic nodes: 19\n   Total graph size: 6034\n\nInitializing model\n```\n:::\n:::\n\n\nHere are the estimated model parameters:\n\n\n::: {.cell hash='chapter_16_cache/html/MAcont4_f798eaad52f863d52ea174faf64c3f18'}\n\n```{.r .cell-code}\nsummary(samples)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nIterations = 2001:2020\nThinning interval = 1 \nNumber of chains = 2 \nSample size per chain = 20 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n            Mean      SD Naive SE Time-series SE\nalpha[1] 10.9224 0.04098 0.006479       0.009113\nalpha[2]  8.0255 0.04179 0.006607       0.006480\nalpha[3] 10.5387 0.05196 0.008216       0.011734\nalpha[4]  9.6712 0.03866 0.006113       0.011441\nalpha[5] 12.8963 0.04898 0.007744       0.009898\nalpha[6] 15.7597 0.06275 0.009921       0.015179\nbeta[1]   0.2009 0.01911 0.003022       0.004567\nbeta[2]   0.3261 0.02122 0.003356       0.005746\ndelta[1]  0.0000 0.00000 0.000000       0.000000\ndelta[2] -2.7797 0.88557 0.140020       0.117590\ngamma[1] -0.5375 0.02670 0.004221       0.009076\ngamma[2]  0.6140 0.02409 0.003809       0.004835\nsd        1.7917 0.38948 0.061582       0.081172\n\n2. Quantiles for each variable:\n\n            2.5%     25%     50%     75%   97.5%\nalpha[1] 10.8510 10.8987 10.9274 10.9525 10.9942\nalpha[2]  7.9603  7.9938  8.0195  8.0531  8.1029\nalpha[3] 10.4438 10.5105 10.5449 10.5766 10.6315\nalpha[4]  9.6069  9.6431  9.6675  9.6957  9.7395\nalpha[5] 12.8111 12.8646 12.8933 12.9260 13.0080\nalpha[6] 15.6232 15.7180 15.7610 15.8010 15.8648\nbeta[1]   0.1632  0.1856  0.2051  0.2136  0.2336\nbeta[2]   0.2900  0.3083  0.3284  0.3421  0.3572\ndelta[1]  0.0000  0.0000  0.0000  0.0000  0.0000\ndelta[2] -3.9673 -3.3691 -2.9707 -2.2861 -1.0929\ngamma[1] -0.5778 -0.5567 -0.5395 -0.5165 -0.4902\ngamma[2]  0.5652  0.5958  0.6204  0.6287  0.6471\nsd        1.1539  1.5357  1.7541  2.0721  2.6058\n```\n:::\n:::\n\n\n#### Prection\nWe can now predict the individualized treatment effect for a new patient with covariate values `z1=1` and `z2=0.5`.\n\n\n::: {.cell hash='chapter_16_cache/html/MAcont5_f5c021d3c8b6ba249920fa24c47c7fd9'}\n\n```{.r .cell-code}\nround(treatment.effect(ipd, samples, newpatient = c(z1 = 1, z2 = 0.5)), 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.025   0.5 0.975 \n-4.36 -2.88 -1.63 \n```\n:::\n:::\n\n\nWe can also predict treatment benefit for all patients in the sample, and look at the distribution of predicted benefit.\n\n\n::: {.cell hash='chapter_16_cache/html/fig-predben_continuous_outcome_3271c9b30c0ce72df10422a3c4d06730'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\n\nds <- ds %>% mutate(benefit = NA)\n\nfor (i in seq(nrow(ds))) {\n  newpat <- as.matrix(ds[i, c(\"z1\", \"z2\")])\n  ds$benefit[i] <- treatment.effect(ipd, samples, newpatient = newpat)[\"0.5\"]\n}\n\nggplot(ds, aes(x = benefit)) + geom_histogram() + facet_wrap(~studyid) + \n  xlab(\"Predicted treatment benefit\")\n```\n\n::: {.cell-output-display}\n![Distribution of predicted treatment benefit in each trial](chapter_16_files/figure-html/fig-predben_continuous_outcome-1.png){#fig-predben_continuous_outcome width=672}\n:::\n:::\n\n\n#### Penalization\nLet us repeat the analysis, but this time while penalizing the treatment-covariate coefficients using a Bayesian LASSO prior. \n\n\n::: {.cell hash='chapter_16_cache/html/MAcont6_dcc5628e88daf48e4a629d1994b07803'}\n\n```{.r .cell-code}\nipd <- with(ds, ipdma.model.onestage(y = y, study = studyid, \n                                     treat = treat,\n                                     X = cbind(z1, z2), \n                                     response = \"normal\", \n                                     shrinkage = \"laplace\"), \n            type = \"random\")\n\nsamples <- ipd.run(ipd, n.chains = 2, n.iter = 20, \n                   pars.save = c(\"alpha\", \"beta\", \"delta\", \"sd\", \"gamma\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 600\n   Unobserved stochastic nodes: 20\n   Total graph size: 6039\n\nInitializing model\n```\n:::\n\n```{.r .cell-code}\nround(treatment.effect(ipd, samples, newpatient = c(1,0.5)), 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.025   0.5 0.975 \n-4.53 -2.92 -1.20 \n```\n:::\n:::\n\n\n### Example of a binary outcome\n\n\n#### Setup\n\nWe now present the case of a binary outcome. We first generate a dataset as before, using the **bipd** package.\n\n\n::: {.cell hash='chapter_16_cache/html/MAbin1_3f4c427d204e87c65719327d97f7a0d0'}\n\n```{.r .cell-code}\nds2 <- generate_ipdma_example(type = \"binary\")\nhead(ds2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  studyid treat         w1         w2 y\n1       1     1  0.2020881 -0.1301420 0\n2       1     0  0.5818186  0.6049542 0\n3       1     1  0.4475379  0.3141771 0\n4       1     1  0.2214633 -0.4015542 0\n5       1     1 -0.6675085 -0.1631319 0\n6       1     1  0.1248460  0.7159271 1\n```\n:::\n:::\n\n::: {#tbl-summary-binary_outcome-data .cell tbl-cap='The simulated dataset with a binary outcome' hash='chapter_16_cache/html/tbl-summary-binary_outcome-data_b2270a2a956d0b0daee8226076989aec'}\n::: {.cell-output-display}\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>0<br><span class='stratn'>(N=307)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>1<br><span class='stratn'>(N=293)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=600)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>w1</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>-0.0767 (0.957)</td>\n<td>-0.105 (1.01)</td>\n<td>-0.0904 (0.980)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Median [Min, Max]</td>\n<td class='lastrow'>-0.0642 [-3.04, 2.98]</td>\n<td class='lastrow'>-0.0543 [-2.87, 2.61]</td>\n<td class='lastrow'>-0.0568 [-3.04, 2.98]</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>w2</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>-0.0628 (0.989)</td>\n<td>0.0866 (1.01)</td>\n<td>0.0101 (1.00)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Median [Min, Max]</td>\n<td class='lastrow'>-0.0371 [-2.95, 2.37]</td>\n<td class='lastrow'>0.0741 [-2.53, 3.20]</td>\n<td class='lastrow'>0.0212 [-2.95, 3.20]</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>studyid</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>1</td>\n<td>48 (15.6%)</td>\n<td>52 (17.7%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2</td>\n<td>48 (15.6%)</td>\n<td>52 (17.7%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>3</td>\n<td>64 (20.8%)</td>\n<td>36 (12.3%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>4</td>\n<td>50 (16.3%)</td>\n<td>50 (17.1%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>5</td>\n<td>48 (15.6%)</td>\n<td>52 (17.7%)</td>\n<td>100 (16.7%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>6</td>\n<td class='lastrow'>49 (16.0%)</td>\n<td class='lastrow'>51 (17.4%)</td>\n<td class='lastrow'>100 (16.7%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Model fitting\n\n### Perform analysis\nWe use a Bayesian random effects model with binomial likelihood. This is similar to the model 16.7 of the book, but with a Binomial likelihood, i.e. \n\n$$ \ny_{ij}\\sim Binomial(\\pi_{ij}) \\\\\n$$ \n$$ \nlogit(\\pi_{ij})==a_j+\\delta_j t_{ij}+ \\sum_{l=1}^{L}\\beta_l x_{ij}+ \\sum_{l=1}^{L}\\gamma_l x_{ij} t_{ij}\n$$\nThe remaining of the model is as in the book. \nWe can  penalize the estimated parameters for effect modification ($\\gamma$'s), using a Bayesian LASSO. We can do this using again the *bipd* package:\n\n::: {.cell hash='chapter_16_cache/html/MAbin2_e768bbbff7ef9dff10944840a55797cb'}\n\n```{.r .cell-code}\nipd2 <- with(ds2, ipdma.model.onestage(y = y, study = studyid, treat = treat,\n                                       X = cbind(w1, w2), \n                                       response = \"binomial\", \n                                       shrinkage = \"laplace\"), \n             type=\"random\", hy.prior = list(\"dunif\", 0, 1))\n\nipd2$model.JAGS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction () \n{\n    for (i in 1:Np) {\n        y[i] ~ dbern(p[i])\n        logit(p[i]) <- alpha[studyid[i]] + inprod(beta[], X[i, \n            ]) + (1 - equals(treat[i], 1)) * inprod(gamma[], \n            X[i, ]) + d[studyid[i], treat[i]]\n    }\n    for (j in 1:Nstudies) {\n        d[j, 1] <- 0\n        d[j, 2] ~ dnorm(delta[2], tau)\n    }\n    sd ~ dnorm(0, 1)\n    T(0, )\n    tau <- pow(sd, -2)\n    delta[1] <- 0\n    delta[2] ~ dnorm(0, 0.001)\n    for (j in 1:Nstudies) {\n        alpha[j] ~ dnorm(0, 0.001)\n    }\n    for (k in 1:Ncovariate) {\n        beta[k] ~ dnorm(0, 0.001)\n    }\n    tt <- lambda\n    lambda <- pow(lambda.inv, -1)\n    lambda.inv ~ dunif(0, 5)\n    for (k in 1:Ncovariate) {\n        gamma[k] ~ ddexp(0, tt)\n    }\n}\n<environment: 0x000001511dfc97d8>\n```\n:::\n\n```{.r .cell-code}\nsamples <- ipd.run(ipd2, n.chains = 2, n.iter = 20, \n                   pars.save = c(\"alpha\", \"beta\", \"delta\", \"sd\", \"gamma\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 600\n   Unobserved stochastic nodes: 19\n   Total graph size: 6637\n\nInitializing model\n```\n:::\n\n```{.r .cell-code}\nsummary(samples)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nIterations = 2001:2020\nThinning interval = 1 \nNumber of chains = 2 \nSample size per chain = 20 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n              Mean      SD Naive SE Time-series SE\nalpha[1] -0.854196 0.24328  0.03847        0.05717\nalpha[2] -1.543003 0.31978  0.05056        0.08902\nalpha[3] -1.098836 0.26109  0.04128        0.09468\nalpha[4] -1.651112 0.27215  0.04303        0.06417\nalpha[5] -1.165417 0.21796  0.03446        0.03484\nalpha[6] -1.069416 0.29587  0.04678        0.03900\nbeta[1]  -0.012638 0.06450  0.01020        0.01353\nbeta[2]   0.025347 0.15276  0.02415        0.03748\ndelta[1]  0.000000 0.00000  0.00000        0.00000\ndelta[2]  0.008926 0.38644  0.06110        0.06164\ngamma[1]  0.003702 0.09524  0.01506        0.01517\ngamma[2]  0.209376 0.19569  0.03094        0.06027\nsd        0.771144 0.23172  0.03664        0.05466\n\n2. Quantiles for each variable:\n\n            2.5%      25%       50%      75%    97.5%\nalpha[1] -1.3077 -0.99719 -0.868776 -0.68103 -0.37053\nalpha[2] -2.0253 -1.72185 -1.519481 -1.35276 -0.99268\nalpha[3] -1.5658 -1.23598 -1.127486 -0.96662 -0.62305\nalpha[4] -2.1034 -1.89295 -1.610415 -1.42877 -1.20646\nalpha[5] -1.5966 -1.28529 -1.187849 -1.00887 -0.83660\nalpha[6] -1.5484 -1.25737 -1.105760 -0.82059 -0.52047\nbeta[1]  -0.1140 -0.05484 -0.013534  0.02487  0.09707\nbeta[2]  -0.2173 -0.11417  0.042099  0.11506  0.30272\ndelta[1]  0.0000  0.00000  0.000000  0.00000  0.00000\ndelta[2] -0.7700 -0.21437 -0.007767  0.21470  0.72292\ngamma[1] -0.1483 -0.07459 -0.004495  0.07034  0.16011\ngamma[2] -0.1988  0.04186  0.200443  0.34597  0.53296\nsd        0.5018  0.61046  0.698693  0.87955  1.25409\n```\n:::\n\n```{.r .cell-code}\nround(treatment.effect(ipd2, samples, newpatient= c(1.6,1.3)), 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.025   0.5 0.975 \n 0.50  1.33  3.24 \n```\n:::\n:::\n\n\n\n\n## Version info {.unnumbered}\nThis chapter was rendered using the following version of R and its packages:\n\n\n::: {.cell hash='chapter_16_cache/html/unnamed-chunk-4_ad6fd9d877b794a33ce82fd3356260ed'}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=Dutch_Netherlands.utf8  LC_CTYPE=Dutch_Netherlands.utf8   \n[3] LC_MONETARY=Dutch_Netherlands.utf8 LC_NUMERIC=C                      \n[5] LC_TIME=Dutch_Netherlands.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.4.2   dplyr_1.1.1     table1_1.4.3    tableone_0.13.2\n[5] bipd_0.3       \n\nloaded via a namespace (and not attached):\n [1] pillar_1.9.0      compiler_4.2.3    tools_4.2.3       digest_0.6.31    \n [5] gtable_0.3.3      jsonlite_1.8.4    evaluate_0.21     lifecycle_1.0.3  \n [9] tibble_3.2.1      lattice_0.21-8    pkgconfig_2.0.3   rlang_1.1.0      \n[13] Matrix_1.5-4      cli_3.6.1         DBI_1.1.3         rstudioapi_0.14  \n[17] yaml_2.3.7        mvtnorm_1.1-3     xfun_0.39         fastmap_1.1.1    \n[21] coda_0.19-4       withr_2.5.0       knitr_1.42        rjags_4-14       \n[25] generics_0.1.3    vctrs_0.6.1       htmlwidgets_1.6.2 mitools_2.4      \n[29] grid_4.2.3        tidyselect_1.2.0  glue_1.6.2        R6_2.5.1         \n[33] fansi_1.0.4       survival_3.5-5    rmarkdown_2.21    Formula_1.2-5    \n[37] magrittr_2.0.3    codetools_0.2-19  scales_1.2.1      htmltools_0.5.5  \n[41] splines_4.2.3     colorspace_2.1-0  utf8_1.2.3        survey_4.2-1     \n[45] munsell_0.5.0    \n```\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/table1-1.0/table1_defaults.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}