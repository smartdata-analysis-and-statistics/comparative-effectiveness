---
title: "Dealing with missing data"
authors:   
  - name: Johanna Munoz
    affiliations:
      - ref: julius
  - name: Thomas Debray
    orcid: 0000-0002-1790-2719
    affiliations:
      - ref: smartdas
affiliations:
  - id: smartdas
    name: Smart Data Analysis and Statistics B.V.
    city: Utrecht
  - id: julius
    name: Julius Center for Health Sciences and Primary Care
    city: Utrecht
format:
  html:
    toc: true
    number-sections: true
execute:
  cache: true
---

```{r}
#| include: FALSE
library(kableExtra)
library(table1)
```

## Main Analysis

The main objective of this analysis is to assess whether the number of episodes (y) occurring within specific time periods (years) differs between the treatment groups (1: DMF and 0: TERI). To address potential confounding factors, the researchers consider variables such as patient age, the log of premedical cost (`logPremedicalcost`), previous DMT efficacy (`prevDMTefficacy`), and the number of episodes in previous relapses (prerelapseNum).

When estimating treatment effects from observational data, an assumption is made that the patient populations in both treatment groups are as similar as possible. Various methods for balancing data across treatment groups are proposed, including matching, inverse propensity weighting, stratification, and regression adjustment.

In this case, the focus is specifically on the matching method, which offers advantages over regression adjustment by potentially alleviating issues related to model mis-specification. This includes addressing non-linear relationships between certain confounders and the outcome variable and accounting for treatment effects that may depend on specific confounders (treatment-confounder interaction terms). Propensity scores are used to match subjects in the treatment groups.

Moreover, intentionally introducing incomplete covariate variables in this example adds complexity to the propensity score estimation. Depending on the propensity score estimation technique employed, it may be necessary to incorporate an imputation step. For instance, logistic regression estimation requires complete data for all observations, while XGBoost is robust to missing data \cite{zhao_propensity_2021}.

To estimate marginal treatment effects, the g-computation method is employed \cite{snowden_implementation_2011}. This method involves specifying a model for the outcome dependent on the treatment and covariates. The potential outcomes, i.e., the predicted values of the outcome on treatment ($y_i^1$) and control ($y_i^0$) for each sample unit $i$, are estimated. The marginal treatment effect is then calculated by contrasting the averaged estimated potential outcomes.


In this example, we consider the estimation of comparative treatment effects in the absence of treatment-effect heterogeneity.


## Estimation workflow

The proposed workflow consists of the following steps:

![Estimation Workflow](resources/chapter 09/Workflow.png)

1.  **Data Exploration:** In this step, we examine the observed data to comprehend the variables within the dataset. Our primary focus lies on identifying missing patterns and relationships among observed variables, including missing indicator variables and others. This exploration aids in discerning the most plausible missing mechanisms and suitable imputation techniques. Additionally, field experts' insights may be incorporated to enhance understanding of the missing process, potentially considering MNAR assumptions.
2.  **Imputation:** It is essential to evaluate whether the imputation procedure is necessary or if simpler methods, such as complete case analysis, are more suitable. In case imputation procedures are required, selecting plausible imputation methods that align with the main model analysis is crucial. This involves choosing individual imputation methods for each incomplete variable, determining the predictor variables on the imputation model. Pre_imputation (where imputation values can be deterministically derived from other variables) and Post-imputation (e.g.ensuring imputed values fall within a reasonable range) steps may also considered.
3.  **Data Balancing:** Several methods, including PS matching or inverse weighting propensity score, can be utilized. It is required to evaluate the balance, which could be done via visual inspection.(eg.cobalt package). In this example, we estimate propensity scores using logistic regression. For most balancing procedures in R, counterparts specifically designed for imputed datasets are available, such as those in the matchthem R package, which includes PS matching and IPW as done in the matchit R package.
4.  **Model Fit:** : It is fit a model to predict the outcomes for each sample unit under each possible treatment value (DMF and TERI), as predictors include the treatment and optionally the baseline covariates and also the propensity score.
5.  **Treatment Estimation & Pooling:** For simplicity in this tutorial, we will use the comparison functions from the R **matchingmethods** package \cite{arel_marginaleffects_2023}, which can be used for completed data and also from outputs from the imputation process. In the last case, internally the functions calculate the treatment effects on each imputed dataset and pool the estimates using Rubin's Rules.

Let's start by preparing the R environment. All the functions used in this tutorial can be found in the resource file `functions.r`.

```{r}
#| warning: false
#| echo: true
# Load the required packages and additional functions
source("resources/chapter 09/functions.r") 
```

## Homogeneous Treatment Effect

In this example, we focus on estimating comparative treatment effects in the absence of heterogeneous treatment effects (HTE).


### Generating an Observational Dataset

We can simulate an observational dataset of $N = 3000$ patients as follows:

```{r hom gendata}
data_hom <- generate_data(n = 3000, seed = 1234) 
```

The **generate_data()** function allows the specification of various treatment effect options, easily adjustable by modifying the beta parameter. In this instance, we assume a consistent treatment effect across the entire target population. This dataset currently contains no missing values.

The simulated dataset comprises two treatment groups with variations in baseline characteristics. For example, the figure below illustrates baseline imbalances in covariates such as age.

```{r hom plotdata}
#| fig.width: 6
#| fig.height: 6
#| fig.align: center
#| fig.cap: Figure 1:Distribution of confounders and outcome variable
#| echo: false
fplot <- plot_dis(data = data_hom)  #Age density
fplot
```

We can calculate the treatment effect on the complete observed dataset. To do this, we start by balancing the dataset using Propensity Score matching. In this case, the propensity score model uses confounder variables only: `age`, `gender`, `prevDMTefficacy`, `logPremedicalcost`, and `prerelapseNum`.

```{r full1}
## Apply Matching on the PS for the ATE
mF <- matchit(  treatment ~ age + gender + prevDMTefficacy + logPremedicalcost + prerelapseNum, 
                data = data_hom,
                family = binomial,
                method = "full",
                caliper = 0.2,
                estimand = "ATE",
                replace = FALSE) 

## Extract matched data
mdata <- match.data(mF)
```

Then, we proceed to model estimation. In this case, a Poisson model is used with the form:

$$\begin{eqnarray}count_i\sim Poisson(\lambda_i)\end{eqnarray}$$ 

$$\begin{eqnarray} log(\lambda_i) &=& \beta_0 + \beta_1treatment_i + \beta_2age + \beta_3gender \\ &+& \beta_4prevDMTefficacy + \beta_5logPremedicalcost
\\ &+& \beta_6prerelapseNum + \beta_7numSymptoms + offset(log(years))\end{eqnarray}$$

Since patient measurements were recorded over varying time frames, the natural logarithm of the years of evaluation is incorporated as an offset in the model. The model is fitted with a glm function, and we include the treatment and the baseline covariates as predictors, which are optional if the data is well balanced. Additionally, it is necessary to specify the matching weights in the glm function.

```{r full2}
# Model fit
fit_mod <- glm(as.formula("y ~ treatment + gender + age + logPremedicalcost + prerelapseNum + prevDMTefficacy + numSymptoms + offset(log(years))"),
                 family = poisson(link = "log"),
                 data = mdata,
                 weights = weights)
```

Typically, Poisson models adjust standard errors using robust standard errors to accommodate small values arising from the equidispersion assumption. This correction can be directly applied to the model using the vcovCL() function \cite{zeileis_sandwich_2022}. However, given that we will calculate the treatment effect using the functions of the **marginaleffects** package, this step becomes redundant. This package allows specifying HC3 sandwich standard errors during treatment estimation.

Finally, we calculate the Average Treatment Effect (ATE). The ATE is defined as $$\tau_{ATE}=E(y_i^1-y_i^0)$$

But this cannot be directly extracted from the $\beta_1$ parameter, as the model has $log(\lambda)$ as the response. We estimate it as: $$\tau_{ATE}=E(\lambda^1_i-\lambda^0_i)$$ This can be done with the function **avg_comparisons()**, from the R package marginaleffect, that calculates the potential outcomes for each unit sample and then combines them to summarize the average effect.

```{r full3}
# Estimation of treatment effects with robust standard errors
ATE <- avg_comparisons(fit_mod, 
                       variables = list(treatment = c("TERI","DMF")),
                       vcov = "HC3",
                       newdata = mdata,
                       wts = "weights")

result_ATE <- data.frame( ATE,
                          analysis = "Full Data")

```

Henceforth, for ease of explanation, we will use the function **TE_estimation()** attached to the function code that performs all the previous estimation steps at once.

### Generating Missing Values

In this example, we focus on the case where confounder variables are incomplete.

Missing values can be generated using the **getmissdata()** function, considering the following patterns of missingness for the log previous medical cost (`logPremedicalcost`):

1.  MAR: missingness depends on `age` and `sex`
2.  MART: missingness depends on `age`, `sex` and the treatment variable `treatment`
3.  MARTY: missingness depends on `age`, `sex`, `treatment` and the outcome variable `y`
4.  MNAR: missingness depends on `age`, `sex` and `logPremedicalcost`

Lets select the missing data pattern "MART"

```{r hom miss}
m_data_hom <- get_missdata(data = data_hom, scenario = "MART")
```

After introducing missing values, we only have complete data for $N=$ `r sum(complete.cases(m_data_hom))` patients.

```{r hom misstable}
#| echo: false
dat <- formatMSdata(m_data_hom)

table1(~ age + gender + prevDMTefficacy + logPremedicalcost + numSymptoms + prerelapseNum | treatment, data = dat, caption = "Baseline characteristics of the incomplete dataset.")
```

### Data Exploration

First, let's examine the missing patterns in our dataset. This will help us better understand the missing data, including the proportion of missing values and the underlying causes, which may be related to other observable variables. Various R packages, such as ggmice, vim, naniar, and factorminer, can assist in visualizing the data.

Upon initial examination, we've observed that the outcome variable `y`, treatment status, and gender are fully observed, while other covariate variables, including age, logPremedicalcost, prevDMTefficacy, numSymptoms, and prerelapseNum, have incomplete data. In total, approximately 11% of the observations in the dataset have missing data. These missing values follow a non-monotonic pattern, requiring the use of MCMC imputation techniques, therefore we mainly use the Full Conditional Specification approach given in the mice package.

When assessing missingness based on treatment groups, we find that there are more patients receiving DMF treatment. However, the percentage of missing values is higher for the DMF treatment group compared to the TERI treatment group, indicating that data is unlikely to be MCAR when the proportion of missing differs by treatment allocation.

```{r hom miss exploration}
library(naniar)
naniar::gg_miss_upset(m_data_hom, nsets = 10)
naniar::gg_miss_var(m_data_hom, facet = treatment, show_pct = T)
```

Additionally, it could be explored whether associations exist between the missingness of variables and other observed variables, indicating if a MAR assumption is more plausible than a MCAR assumption. The plausibility of MNAR vs. MAR assumptions cannot be evidenced by observable data, and the possibility of a MNAR scenario is contemplated based on expert input.

### Methods for Handling Missing Data

#### Complete Case Analysis

To estimate the ATE using propensity score matching, we employ complete case analysis. Initially, we filter out all units with incomplete data and then apply the estimation process as before.

```{r hom cc}
#| message: false
#| warning: false
# Filter out the complete case data
ccdata <- m_data_hom[complete.cases(m_data_hom), ]

# Estimation procedure
result_CC <- ATE_estimation( data = ccdata,
                             analysis = "Complete Case Analysis")$ATE
result_ATE <- result_ATE %>% add_row(result_CC)
```

#### Missing Indicator

In this method, it is essential to create missing indicators and deterministic imputed variables for each incomplete variable. For example, for the "age" variable, we calculate a missing indicator, denoted as "age.mind," and a deterministic imputed value of age where missing values are replaced by an arbitrary value (in this case, the missing values were replaced by zero).

```{r hom mind}
#| eval: false
data$age.mind <- ifelse( is.na(data$age),1,0)  # missing indicator of age
data$age <-  ifelse(is.na(data$age), 0, data$age) # deterministic imputed age, 
```

Subsequently, the Propensity Score (PS) model is estimated for all the confounding variables, including their missing indicators. In this case, the propensity score model is given by:

```{r hom mind1}
#| eval: false
PS.formula <- treatment ~ gender + age.mind + age + lpmc.mind + logPremedicalcost + pde.mind + prevDMTefficacy + prn.mind + prerelapseNum
```

Then, the estimation process follows the same structure as before:

```{r hom mind2}
#| eval: false
result_mind <- ATE_estimation(data = m_data_hom, PSform ="Mind", analysis = "Missing indicator")$ATE
result_ATE <- result_ATE %>% add_row(result_mind)
```

#### Multiple Imputation

In this section, we will generate $m=10$ imputed datasets and perform matching within each imputed dataset. We first need to specify the imputation model for `prevDMTefficacy`, `premedicalcost`, `numSymptoms`, `prerelapseNum`, and `age`, i.e., the predictors for each incomplete variable. This can be done in mice via the prediction matrix or by using the form parameter where the models are specified for each variable and saved in a list.

```{r hom imp1}
#| message: false
#| warning: false
# We add a covariate for log(years)
impdata <-  m_data_hom %>% mutate(logyears = log(years))

# Specify the conditional imputation models
form_y <- list(prevDMTefficacy ~ age + gender + logyears + logPremedicalcost + numSymptoms + 
                 treatment + prerelapseNum + y,
               logPremedicalcost ~ age + gender + logyears + prevDMTefficacy + numSymptoms + 
                 treatment + prerelapseNum + y,
               numSymptoms ~ age + gender + logPremedicalcost + logyears + prevDMTefficacy + 
                 prerelapseNum + treatment + y,
               prerelapseNum ~ age + gender + logPremedicalcost + logyears + prevDMTefficacy + 
                 numSymptoms + treatment + y,
               age ~ prerelapseNum + gender + logPremedicalcost + logyears + prevDMTefficacy + 
                 numSymptoms + treatment + y)
form_y <- name.formulas(form_y)
```

Next, we need to set the individual imputation model for each variable. We call the mice function, which automatically proposes certain imputation methods according to the type of variable. Here, we decide to modify the imputation method for the `numSymptoms` and `prevDMTefficacy` variables to the predictive mean matching method "pmm". After this, we run the **mice()** function to generate 10 imputed datasets.

```{r hom imp2}
#| message: false
#| warning: false
# Adopt predictive mean matching for imputing the incomplete variables
imp0 <- mice(impdata, form = form_y, maxit = 0)
method <- imp0$method
method["numSymptoms"] <- "pmm"
method["prevDMTefficacy"] <- "pmm"

# Generate 10 imputed datasets
imp <- mice(impdata, form = form_y, method = method, m = 10, maxit = 10,  printFlag = FALSE)
```

Before proceeding with the estimation procedure, we inspect the convergence of all the imputed variables using a trace plot:

```{r homimp convergency}
plot(imp)
```

As there don't seem to be any problems in the trace plot (i.e., no marked tendency & well-dispersed plots), we can now proceed with the PS Matching in each of the imputed datasets using the **MatchedThem** package functions. Here, we adopt full matching without replacement and use a logistic model. The function allows the pooling of PS estimates, which can be done through the within or across approach.


##### Multiple Imputation (within approach)

The within approach it is specified with the approach parameter in the matchthem function as follows:

```{r hom miw}
#| message: false
# Matching based on PS model
mdata <- matchthem(formula = treatment ~ age + gender+ prevDMTefficacy + logPremedicalcost + prerelapseNum,
                   datasets = imp,
                   approach = "within",
                   method = "full",
                   caliper = 0.1,
                   family = binomial,
                   estimand = "ATE",
                   distance = "glm",
                   link = "logit",
                   replace = FALSE) 
```

Then we proceed to fit a main model on the outcome Y.

```{r hom miw2}
#| message: false
# Get a list of the imputed datasets
dat <- complete( mdata, action = "all")

# Fit the model on each imputed dataset
mod <- lapply(dat, \(i) 
                glm(formula = as.formula("y ~ treatment + gender + age + logPremedicalcost + prerelapseNum + prevDMTefficacy + numSymptoms + offset(log(years))"),
                family = poisson(link = "log"), 
                weights = weights,
                data = i))
```

Finally, we utilize the marginal effects package to estimate the treatment effect. As before, we use the `avg_comparisons` function, which allows us to specify the variance correction. While most of the marginal effects functions are designed to handle imputed datasets, since we need to evaluate the model on each imputed dataset, we manually pass each imputed dataset into the parameter newdata using the lapply function, as follows:

```{r hom miw3}
#| message: false
#| warning: false
#| echo: false
# Calculate the treatment effect on each imputed dataset
ATE_i <- lapply(seq_along(mod), \(i) 
                     avg_comparisons(mod[[i]],
                                     variables = list(treatment = c("TERI","DMF")),
                                     vcov = "HC3",
                                     wts = "weights",
                                     newdata = dat[[i]]))
# Pool the estimates with rubins rules
result_micew <- data.frame(summary(pool(ATE_i),conf.int = TRUE)) %>%
                           rename('conf.low'="X2.5..",'conf.high' = "X97.5..") %>%
                mutate(analysis = "MICE (within)")

result_ATE <- bind_rows(result_ATE,result_micew)
```


##### Multiple Imputation (across aproach)

We proceed similarly as before; the only difference is specifying the approach "across" in the matchthem function. To simplify the steps, use the built-up function ATE_estimation.

```{r hom mia1}
#| message: false
#| warning: false
result_micea <- ATE_estimation( data = imp,
                                approach = "across",
                                analysis = "MICE (across)")$ATE
result_ATE <- bind_rows(result_ATE,result_micea)
```

### Results

Analysis methods:

-   **Full Data**: The treatment effect is estimated in the original data of $N=3000$ patients where no missing values are present. This estimate can be used as a benchmark to compare the missing data methods.
-   **Complete Case Analysis**: The treatment effect is estimated using all data from $N=$ `r sum(complete.cases(m_data_hom))` patients that do not have any missing values.
-   **Missing Indicator**: The treatment effect is estimated in the incomplete dataset of $N=3000$ patients. The propensity score model includes a missing indicator variable for each incomplete covariate.
-   **MICE**: A treatment effect is estimated within each imputed dataset using propensity score analysis. Using Rubin's rule, the ten treatment effects are combined into a single treatment effect.

```{r hom fres}
#| message: false
#| warning: false
library(ggplot2)
result_ATE$analysis = factor(result_ATE$analysis,
                         levels = c("Full Data","Complete Case Analysis","Missing indicator","MICE (within)","MICE (across)"))
levels(result_ATE$analysis)
ggplot(result_ATE,aes(x = analysis, y = estimate, col = analysis)) +
  geom_point(shape = 1,
             size  = 1) +
  geom_errorbar(aes(ymin  = conf.low ,
                    ymax  = conf.high),
                width = 0.2,
                size  = 0.5) +
  see::scale_color_flat() + theme_light() + 
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        legend.position = "bottom")
```

In this example, we observe that there is no significant difference across the methods. The Complete Case Analysis yields a wider confidence interval and leads to more biased estimates. It appears that the MICE method with the within approach and Missing Indicator methods provide less biased estimates. However, the formal leads to a non-significant treatment estimate similar to the results from the Full Dataset.


## Version info {.unnumbered}
This chapter was rendered using the following version of R and its packages:

```{r}
#| echo: false
#| message: false
#| warning: false
sessionInfo()
```
